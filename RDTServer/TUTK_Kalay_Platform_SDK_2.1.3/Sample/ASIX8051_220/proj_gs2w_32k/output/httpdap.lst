C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE HTTPDAP
OBJECT MODULE PLACED IN .\httpdap.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe ..\src\web_page\httpdap.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X8020) INC
                    -DIR(..\src\main;..\src\mcpu;..\src\mswdma;..\src\uart0;..\src\mmstimer;..\src\mwif;..\src\madapter;..\src\mtcpip;..\src\
                    -mping;..\src\mpppoe;..\src\si2c;..\src\mdnsc;..\src\mconsole;..\src\mtelnet;..\src\meeprom;..\src\mmac;..\src\mdhcpc;..\
                    -src\mhttp;..\src\mgs2wifi;..\src\mhsuart;..\src\msmtpc;..\src\web_page;..\src\mdhcps;..\src\mdebug;..\..\..\Include;..\.
                    -.\..\Build\ASIX8051_220\) DEFINE(RuntimeCodeAt32KH) VARBANKING DEBUG PRINT(.\output\httpdap.lst) OBJECT(.\httpdap.obj)

line level    source

   1          /*
   2           ******************************************************************************
   3           *     Copyright (c) 2010       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           ******************************************************************************
  10           */
  11           /*============================================================================
  12           * Module Name: httpdap.c
  13           * Purpose:
  14           * Author:
  15           * Date:
  16           * Notes:
  17           * $Log: httpdap.c,v $
  18           * no message
  19           *
  20           *=============================================================================
  21           */
  22          #define HTTPDAP_DEBUG   1
  23          #define HTTPDAP_ENABLE_AUTHORITY 0
  24          /* INCLUDE FILE DECLARATIONS */
  25          #include "httpdap.h"
  26          #include "httpdapi.h"
  27          #include "filesys.h"
  28          #include "ax22000.h"
  29          
  30          #include "mcpu.h"
  31          #include "printd.h"
  32          #include <string.h>
  33          #include "delay.h"
  34          #include "main.h"
  35          #include "gs2w.h"
  36          #include "gconfig.h"
  37          #if (INCLUDE_EVENT_DETECT)
              #include "gevent.h"
              #endif
  40          
  41          #include "gudpdat.h"
  42          #include "gtcpdat.h"
  43          #include "stoe.h"
  44          
  45          #include "mwioctl.h"
  46          #include "mwifapp.h"
  47          #include "hsuart2.h"
  48          #include "mstimer.h"
  49          /* NAMING CONSTANT DECLARATIONS */
  50          #define HTTPDAP_REBOOT_CMD              0x01
  51          #define HTTPDAP_RESTORE_CMD             0x02
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 2   

  52          #define HTTPDAP_FWUPGRADE_CMD   0x03
  53          
  54          /* GLOBAL VARIABLES DECLARATIONS */
  55          
  56          /* LOCAL VARIABLES DECLARATIONS */
  57          static U8_T *pHttpap_buf;
  58          static U8_T httpap_tmp8;
  59          static U16_T httpap_tmp16;
  60          static U32_T httpap_tmp32;
  61          
  62          static U16_T httpdap_AuthenTimerEvent = 0;
  63          
  64          HTTPDAP_INFO httpdap;
  65          /* NAMING CONSTANT DECLARATIONS */
  66          
  67          /* GLOBAL VARIABLES DECLARATIONS */
  68          
  69          /* LOCAL VARIABLES DECLARATIONS */
  70          
  71          /* LOCAL SUBPROGRAM DECLARATIONS */
  72          /* Add function declaration to support customers' application, start */
  73          U8_T httpap_GetElementValue(U8_T eid, U8_T **pVal);
  74          U8_T httpap_SetElementValue(U8_T eid, U8_T *pVal, U8_T ValLen);
  75          U8_T httpap_CheckElementUpdate(U8_T eid);
  76          U8_T httpap_CheckElementUpdateByName(U8_T *pEname);
  77          
  78          U8_T httpap_SecurityProcess(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  79          
  80          U8_T httpap_GetIndexPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  81          U8_T httpap_PostIndexPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  82          U8_T httpap_GetBasicPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  83          U8_T httpap_PostBasicPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  84          U8_T httpap_GetAdvancePage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  85          U8_T httpap_PostAdvancePage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  86          U8_T httpap_GetSecurityPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  87          U8_T httpap_PostSecurityPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  88          U8_T httpap_GetWiFiPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  89          U8_T httpap_PostWiFiPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  90          U8_T httpap_GetSysMonitPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  91          /* Add function declaration to support customers' application, end */
  92          
  93          /*
  94           * ----------------------------------------------------------------------------
  95           * Function Name: HTTPAP_Init()
  96           * Purpose:
  97           * Params:
  98           * Returns:
  99           * Note:
 100           * ----------------------------------------------------------------------------
 101           */
 102          void HTTPAP_Init(HTTP_SERVER_INFO *pInfo)
 103          {
 104   1              pInfo->HomePage = FILE_INDEX;
 105   1      
 106   1              /* Add to support customers' application, start */
 107   1              memset((U8_T *)&httpdap, 0, sizeof(HTTPDAP_INFO));
 108   1              httpdap.AccIPOnOff = (GCONFIG_GetNetwork() & GCONFIG_NETWORK_ACC_IP_ENABLE) ? 1:0;
 109   1              
 110   1      #if HTTPDAP_ENABLE_AUTHORITY    
                      pInfo->HomePage = FILE_BSCSETTING;
              #endif
 113   1              /* Add to support customers' application, end */
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 3   

 114   1      
 115   1      } /* End of HTTPAP_Init() */
 116          
 117          /*
 118           * ----------------------------------------------------------------------------
 119           * Function Name: HTTPAP_ResponseComplete()
 120           * Purpose:
 121           * Params:
 122           * Returns:
 123           * Note:
 124           * ----------------------------------------------------------------------------
 125           */
 126          U8_T HTTPAP_ResponseComplete(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 127          {
 128   1              /* Add to support customers' application, start */
 129   1              if (pConn->FileId == FILE_SYSMSG)
 130   1              {
 131   2                      switch (httpdap.Cmd)
 132   2                      {
 133   3                      case HTTPDAP_REBOOT_CMD:
 134   3      #if HTTPDAP_DEBUG                       
 135   3                              printd("HTTPDAP: Device Reboot!!\n\r");
 136   3      #endif                  
 137   3                              DELAY_Ms(500);
 138   3                              MCPU_SoftReboot();
 139   3                      break;
 140   3                      
 141   3                      case HTTPDAP_RESTORE_CMD:
 142   3      #if HTTPDAP_DEBUG                       
 143   3                              printd("HTTPDAP: Restore and Reboot!!\n\r");
 144   3      #endif
 145   3                              GCONFIG_ReadDefaultConfigData();
 146   3                              GCONFIG_WriteConfigData();
 147   3                              DELAY_Ms(500);
 148   3                              MCPU_SoftReboot();
 149   3                      break;  
 150   3                      
 151   3                      case HTTPDAP_FWUPGRADE_CMD:
 152   3      #if HTTPDAP_DEBUG                       
 153   3                              printd("HTTPDAP: Upgrade\n\r");
 154   3      #endif                  
 155   3                              GCONFIG_EnableFirmwareUpgrade();
 156   3                              GCONFIG_WriteConfigData();              
 157   3                              MCPU_SoftReboot();
 158   3                      break;
 159   3                      
 160   3                      default:
 161   3                      break;
 162   3                      }
 163   2                      httpdap.Cmd = 0;        
 164   2              }
 165   1              
 166   1              /* Add to support customers' application, end */
 167   1              return HTTP_POST_OK;
 168   1      } /* End of HTTPAP_ResponseComplete() */
*** WARNING C280 IN LINE 126 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
 169          
 170          /*
 171           * ----------------------------------------------------------------------------
 172           * Function Name: HTTPAP_DivideHtmlFile()
 173           * Purpose:
 174           * Params:
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 4   

 175           * Returns:
 176           * Note:
 177           * ----------------------------------------------------------------------------
 178           */
 179          void HTTPAP_DivideHtmlFile(HTTP_SERVER_CONN *pConn, U8_T fileId)
 180          {
 181   1              /* Add to support customers' application, start */
 182   1      
 183   1              /* Add to support customers' application, end */
 184   1      
 185   1      } /* End of HTTPAP_DivideHtmlFile() */
*** WARNING C280 IN LINE 179 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
*** WARNING C280 IN LINE 179 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'fileId': unreferenced local variable
 186          
 187          /*
 188           * ----------------------------------------------------------------------------
 189           * Function Name: HTTPAP_SendMoreWebFragment()
 190           * Purpose:
 191           * Params:
 192           * Returns:
 193           * Note:
 194           * ----------------------------------------------------------------------------
 195           */
 196          void HTTPAP_SendMoreWebFragment(U8_T index, HTTP_SERVER_CONN *pConn)
 197          {
 198   1              /* Add to support customers' application, start */
 199   1      
 200   1              /* Add to support customers' application, end */
 201   1      
 202   1      } /* End of HTTPAP_SendMoreWebFragment() */
*** WARNING C280 IN LINE 196 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'index': unreferenced local variable
*** WARNING C280 IN LINE 196 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
 203          
 204          /*
 205           * ----------------------------------------------------------------------------
 206           * Function Name: HTTPAP_GetMethodProcess()
 207           * Purpose:
 208           * Params:
 209           * Returns:
 210           * Note:
 211           * ----------------------------------------------------------------------------
 212           */
 213          U8_T HTTPAP_GetMethodProcess(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 214          {
 215   1              /* Add to support customers' application, start */
 216   1              if (httpap_SecurityProcess(pConn, pInfo) == HTTP_POST_ERR)
 217   1                      return HTTP_POST_ERR;
 218   1                              
 219   1              switch (pConn->FileId)
 220   1              {
 221   2              case FILE_INDEX:
 222   2                      return (httpap_GetIndexPage(pConn, pInfo));
 223   2                      break;
 224   2              case FILE_BSCSETTING:
 225   2                      return (httpap_GetBasicPage(pConn, pInfo));
 226   2                      break;          
 227   2              case FILE_ADVSETTING:
 228   2                      return (httpap_GetAdvancePage(pConn, pInfo));   
 229   2                      break;          
 230   2              case FILE_SECURITY:
 231   2                      return (httpap_GetSecurityPage(pConn, pInfo));
 232   2                      break;          
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 5   

 233   2              case FILE_WIFISETTING:
 234   2                      return (httpap_GetWiFiPage(pConn, pInfo));      
 235   2                      break;
 236   2              case FILE_SYSMONITOR:
 237   2                      return (httpap_GetSysMonitPage(pConn, pInfo));  
 238   2                      break;          
 239   2              default:
 240   2                      break;  
 241   2              }
 242   1              /* Add to support customers' application, end */
 243   1              return HTTP_POST_OK;
 244   1      } /* End of HTTPAP_GetMethodProcess() */
 245          
 246          /*
 247           * ----------------------------------------------------------------------------
 248           * Function Name: HTTPAP_PostMethodPreParseProcess()
 249           * Purpose:
 250           * Params:
 251           * Returns:
 252           * Note:
 253           * ----------------------------------------------------------------------------
 254           */
 255          U8_T HTTPAP_PostMethodPreParseProcess(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 256          {
 257   1              /* Add to support customers' application, start */
 258   1      
 259   1              /* Add to support customers' application, end */
 260   1              return HTTP_POST_OK;
 261   1      } /* HTTPAP_PostMethodPreParseProcess() */
*** WARNING C280 IN LINE 255 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
*** WARNING C280 IN LINE 255 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
 262          
 263          /*
 264           * ----------------------------------------------------------------------------
 265           * Function Name: HTTPAP_PostMethodDeferParseProcess()
 266           * Purpose:
 267           * Params:
 268           * Returns:
 269           * Note:
 270           * ----------------------------------------------------------------------------
 271           */
 272          U8_T HTTPAP_PostMethodDeferParseProcess(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 273          {
 274   1              /* Add to support customers' application, start */
 275   1      
 276   1              /* Add to support customers' application, end */
 277   1              return HTTP_POST_OK;
 278   1      } /* HTTPAP_PostMethodDeferParseProcess() */
*** WARNING C280 IN LINE 272 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
*** WARNING C280 IN LINE 272 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
 279          
 280          /*
 281           * ----------------------------------------------------------------------------
 282           * Function Name: HTTPAP_PostMethodPreUpdateProcess()
 283           * Purpose:
 284           * Params:
 285           * Returns:
 286           * Note:
 287           * ----------------------------------------------------------------------------
 288           */
 289          U8_T HTTPAP_PostMethodPreUpdateProcess(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 290          {
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 6   

 291   1              /* Add to support customers' application, start */
 292   1      
 293   1              /* Add to support customers' application, end */
 294   1              return HTTP_POST_OK;
 295   1      } /* End of HTTPAP_PostMethodPreUpdateProcess() */
*** WARNING C280 IN LINE 289 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
*** WARNING C280 IN LINE 289 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
 296          
 297          /*
 298           * ----------------------------------------------------------------------------
 299           * Function Name: HTTPAP_PostMethodDeferProcess()
 300           * Purpose:
 301           * Params:
 302           * Returns:
 303           * Note:
 304           * ----------------------------------------------------------------------------
 305           */
 306          U8_T HTTPAP_PostMethodDeferProcess(U8_T postSuccessFlag, HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 307          {
 308   1              /* Add to support customers' application, start */
 309   1              if (postSuccessFlag == HTTP_POST_FAILURE)
 310   1                      return HTTP_POST_ERR;
 311   1              
 312   1              if (httpap_SecurityProcess(pConn, pInfo) == HTTP_POST_ERR)
 313   1                      return HTTP_POST_ERR;
 314   1                              
 315   1              switch (pConn->FileId)
 316   1              {
 317   2              case FILE_INDEX:
 318   2                      return (httpap_PostIndexPage(pConn, pInfo));
 319   2                      break;
 320   2              case FILE_BSCSETTING:
 321   2                      return (httpap_PostBasicPage(pConn, pInfo));
 322   2                      break;          
 323   2              case FILE_ADVSETTING:
 324   2                      return (httpap_PostAdvancePage(pConn, pInfo));  
 325   2                      break;          
 326   2              case FILE_SECURITY:
 327   2                      return (httpap_PostSecurityPage(pConn, pInfo));
 328   2                      break;          
 329   2              case FILE_WIFISETTING:
 330   2                      return (httpap_PostWiFiPage(pConn, pInfo));     
 331   2                      break;
 332   2              default:
 333   2                      break;  
 334   2              }
 335   1              /* Add to support customers' application, end */
 336   1              return HTTP_POST_ERR;
 337   1      
 338   1      } /* End of HTTPAP_PostMethodDeferProcess() */
 339          
 340          /*===========================================================================*/
 341          /*============== Functions Supplied by Customers' Application ===============*/
 342          /*===========================================================================*/
 343          /* Add to support customers' application, start */
 344          
 345          /*
 346           * ----------------------------------------------------------------------------
 347           * Function Name: HTTPAP_Task
 348           * Purpose:
 349           * Params:
 350           * Returns:
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 7   

 351           * Note:
 352           * ----------------------------------------------------------------------------
 353           */
 354          void HTTPAP_Task(void)
 355          {
 356   1              U8_T i;
 357   1      
 358   1              if (httpdap_AuthenTimerEvent != (U16_T)SWTIMER_Tick())
 359   1              {
 360   2                      httpdap_AuthenTimerEvent = (U16_T)SWTIMER_Tick();       
 361   2                      for (i = 0; i < MAX_HTTP_CONNECT; i++)
 362   2                      {
 363   3                              if (httpdap.SecurityTimeExpired[i])
 364   3                                      httpdap.SecurityTimeExpired[i] --;
 365   3                      }
 366   2              }
 367   1      } /* End of HTTPAP_Task() */
 368          
 369          /*
 370           * ----------------------------------------------------------------------------
 371           * Function Name: httpap_GetElementValue()
 372           * Purpose: 
 373           * Params:
 374           * Returns:
 375           * Note:
 376           * ----------------------------------------------------------------------------
 377           */
 378          U8_T httpap_GetElementValue(U8_T eid, U8_T **pVal)
 379          {
 380   1              if (eid >= MAX_POST_RECORDS)
 381   1                      return 0;
 382   1      
 383   1              if (POST_Record[eid].PostType == POST_TYPE_TEXT || 
 384   1                      POST_Record[eid].PostType == POST_TYPE_TAG || 
 385   1                      POST_Record[eid].PostType == POST_TYPE_PASSWORD)
 386   1              {
 387   2                      BUF_TEXT XDATA *pText = POST_Record[eid].PValue;        
 388   2                      *pVal = pText->CurrValue;
 389   2                      return (pText->CurrLength - 1);
 390   2              }
 391   1              else if (POST_Record[eid].PostType == POST_TYPE_SELECT)
 392   1              {
 393   2                      BUF_SELECT XDATA *pSelect = POST_Record[eid].PValue;
 394   2                      *pVal = &(pSelect->CurrentSet);
 395   2                      return 1;
 396   2              }
 397   1      #if (MAX_POST_BUF_RADIO)
 398   1              else if (POST_Record[eid].PostType == POST_TYPE_RADIO)
 399   1              {
 400   2                      BUF_RADIO XDATA *pRadio = POST_Record[eid].PValue;
 401   2                      *pVal = &(pRadio->CurrentSet);
 402   2                      return 1;
 403   2              }
 404   1      #endif          
 405   1              else if (POST_Record[eid].PostType == POST_TYPE_SUBMIT)
 406   1              {
 407   2                      BUF_SUBMIT XDATA *pSubmit = POST_Record[eid].PValue;    
 408   2                      *pVal = pSubmit->Value;
 409   2                      return (pSubmit->DefaultVlaueLen);
 410   2              }                       
 411   1              return 0; /* element type not support */
 412   1                      
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 8   

 413   1      } /* End of httpap_GetElementValue() */
 414          
 415          /*
 416           * ----------------------------------------------------------------------------
 417           * Function Name: httpap_SetElementValue()
 418           * Purpose: 
 419           * Params:
 420           * Returns:
 421           * Note:
 422           * ----------------------------------------------------------------------------
 423           */
 424          U8_T httpap_SetElementValue(U8_T eid, U8_T *pVal, U8_T ValLen)
 425          {
 426   1              if (eid >= MAX_POST_RECORDS)
 427   1                      return HTTPAPI_ERR;
 428   1              
 429   1              if (POST_Record[eid].PostType == POST_TYPE_TEXT || 
 430   1                      POST_Record[eid].PostType == POST_TYPE_TAG || 
 431   1                      POST_Record[eid].PostType == POST_TYPE_PASSWORD)
 432   1              {
 433   2                      BUF_TEXT XDATA *pText = POST_Record[eid].PValue;        
 434   2                      memcpy(pText->CurrValue, pVal, ValLen);         
 435   2                      pText->CurrValue[ValLen] = '"';
 436   2                      pText->CurrLength = ValLen + 1;         
 437   2                      return POST_Record[eid].PostType;
 438   2              }
 439   1              else if (POST_Record[eid].PostType == POST_TYPE_SELECT)
 440   1              {
 441   2                      BUF_SELECT XDATA *pSelect = POST_Record[eid].PValue;            
 442   2                      if (*pVal < pSelect->Count)
 443   2                              pSelect->CurrentSet = *pVal;            
 444   2                      else
 445   2                              pSelect->CurrentSet = pSelect->Count-1;
 446   2      
 447   2                      return POST_Record[eid].PostType;
 448   2              }
 449   1      #if (MAX_POST_BUF_RADIO)
 450   1              else if (POST_Record[eid].PostType == POST_TYPE_RADIO)
 451   1              {
 452   2                      BUF_RADIO XDATA *pRadio = POST_Record[eid].PValue;
 453   2                      if (*pVal < pRadio->Count)
 454   2                              pRadio->CurrentSet = *pVal;             
 455   2                      else
 456   2                              pRadio->CurrentSet = pRadio->Count-1;
 457   2                      return POST_Record[eid].PostType;
 458   2              }
 459   1      #endif
 460   1              return HTTPAPI_ERR; /* element type not support */
 461   1      } /* End of httpap_SetElementValue() */
 462          
 463          /*
 464           * ----------------------------------------------------------------------------
 465           * Function Name: U8_T httpap_CheckElementUpdate()
 466           * Purpose: 
 467           * Params:
 468           * Returns:
 469           * Note:
 470           * ----------------------------------------------------------------------------
 471           */
 472          U8_T httpap_CheckElementUpdate(U8_T eid)
 473          {
 474   1              U8_T i;
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 9   

 475   1              
 476   1              if (HTTP_PostCount == 0)
 477   1                      return HTTPAPI_ERR;
 478   1                      
 479   1              for (i = 0; i < HTTP_PostCount; i++)
 480   1              {
 481   2                      if (HTTP_PostTable[i] == eid)
 482   2                              return i;
 483   2              }
 484   1              return HTTPAPI_ERR;
 485   1      } /* End of httpap_CheckElementUpdate() */
 486          
 487          /*
 488           * ----------------------------------------------------------------------------
 489           * Function Name: U8_T httpap_CheckElementUpdateByName()
 490           * Purpose: 
 491           * Params:
 492           * Returns:
 493           * Note:
 494           * ----------------------------------------------------------------------------
 495           */
 496          U8_T httpap_CheckElementUpdateByName(U8_T *pEname)
 497          {
 498   1              U8_T i;
 499   1              
 500   1              if (HTTP_PostCount == 0)
 501   1                      return HTTPAPI_ERR;
 502   1                      
 503   1              for (i = 0; i < HTTP_PostCount; i++)
 504   1              {
 505   2                      if ((strlen(pEname) == POST_Record[HTTP_PostTable[i]].NameLen) && 
 506   2                              memcmp(pEname, POST_Record[HTTP_PostTable[i]].Name, POST_Record[HTTP_PostTable[i]].NameLen) == 0)
 507   2                              return i;
 508   2              }
 509   1              return HTTPAPI_ERR;
 510   1      } /* End of httpap_CheckElementUpdateByName() */
 511          
 512          /*
 513           * ----------------------------------------------------------------------------
 514           * Function Name: httpap_SecurityProcess()
 515           * Purpose:
 516           * Params:
 517           * Returns:
 518           * Note:
 519           * ----------------------------------------------------------------------------
 520           */
 521          U8_T httpap_SecurityProcess(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 522          {
 523   1              /* Add to support customers' application, start */
 524   1              U8_T i;
 525   1      #if HTTPDAP_ENABLE_AUTHORITY    
                      U8_T *pUsername, *pPassword, *pbuf1, *pbuf2;
              #endif
 528   1      
 529   1              // accessible IP process //
 530   1              if (httpdap.AccIPOnOff)
 531   1              {
 532   2                      for (i = 0; i < GCONFIG_ACCESSIBLE_IP_NUM; i ++)
 533   2                      {
 534   3                              GCONFIG_GetAccessibleIP(i,&httpap_tmp32);
 535   3                              if (httpap_tmp32 == 0)
 536   3                                      continue;
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 10  

 537   3                              if (pConn->Ip == httpap_tmp32)
 538   3                                      break;
 539   3                      }
 540   2                      
 541   2                      if (i == GCONFIG_ACCESSIBLE_IP_NUM)
 542   2                      {
 543   3                              pHttpap_buf = HTTP_TmpBuf;
 544   3                              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
 545   3                              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"Unacces
             -sible!");
 546   3                              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
 547   3                              return HTTP_POST_ERR;
 548   3                      }
 549   2              }
 550   1                      
 551   1      #if HTTPDAP_ENABLE_AUTHORITY
                      //===================== RFC 2617 support ======================= //
                      if (HTTPAPI_ParseAuthenHeader(HTTP_TmpBuf, pInfo->pRequestBuf, &pUsername, &pPassword) == HTTPAPI_ERR)
                      {
              #if HTTPDAP_DEBUG               
                              printd("HTTPDAP: Authenication header not found\r\n");          
              #endif
              HTTPDAP_AUTHORITY_REQUST:       
              #if (INCLUDE_EVENT_DETECT)
                              GEVENT_SetAuthFailEvent(1);// Add for authentication fail detect //
              #endif
                              HTTPAPI_ResponseAuthenMessage(HTTP_TmpBuf, "Please enter username and password", pConn);
                              return HTTP_POST_ERR;
                      }
                      else
              #if HTTPDAP_DEBUG
                              printd("HTTPDAP: header is found, user name is %s, password is %s\r\n", pUsername, pPassword);          
              #endif  
                      // get uername and password for reference //
                      pbuf1 = HTTP_TmpBuf+100;
                      pbuf2 = HTTP_TmpBuf+150;        
                      GCONFIG_GetAdmin(pbuf1, pbuf2, &i);
                      
                      // check username //
                      if (strlen(pUsername) != strlen(pbuf1) || strcmp(pUsername,pbuf1))
                      {
                              goto HTTPDAP_AUTHORITY_REQUST;
                      }
                      // check password //
                      if (strlen(pPassword) != strlen(pbuf2) || strcmp(pPassword,pbuf2))
                      {
                              goto HTTPDAP_AUTHORITY_REQUST;
                      }
                      
                      httpap_tmp16 = 0xffff;
                      for (i = 0; i < MAX_HTTP_CONNECT; i++)
                      {
                              // found the empty security slot //
                              if (httpdap.SecurityTimeExpired[i] == 0)
                              {
                                      httpdap.SecurityTimeExpired[i] = 0xffff;
                                      httpdap.SecurityRemoteIP[i] = pConn->Ip;                        
                                      break;
                              }
                              
                              // found a slot is not most commonly used //
                              if (httpap_tmp16 > httpdap.SecurityTimeExpired[i])
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 11  

                              {
                                      httpap_tmp16 = httpdap.SecurityTimeExpired[i];
                                      httpap_tmp8 = i;
                              }
                      }
                      if (i == MAX_HTTP_CONNECT)
                      {
                              httpdap.SecurityTimeExpired[httpap_tmp8] = 0xffff;
                              httpdap.SecurityRemoteIP[httpap_tmp8] = pConn->Ip;
                      }
              #else 
 609   1              //==================== Web page authentication support =======================//
 610   1              if (pConn->FileId != pInfo->HomePage)
 611   1              {
 612   2                      for (i = 0; i < MAX_HTTP_CONNECT; i++)
 613   2                      {
 614   3                              if (httpdap.SecurityRemoteIP[i] == pConn->Ip)
 615   3                                      break;
 616   3                      }
 617   2                      
 618   2                      if (i == MAX_HTTP_CONNECT || httpdap.SecurityTimeExpired[i] == 0)
 619   2                      {
 620   3                              printd("HTTPDAP: redirect to home page\r\n");
 621   3                              HTTPAPI_ResponseRedirectMesssge(HTTP_TmpBuf, pInfo->HomePage, pConn);   
 622   3                              return HTTP_POST_ERR;   
 623   3                      }
 624   2                      
 625   2                      httpdap.SecurityTimeExpired[i] = 0xffff;// fill a new security time-expired //
 626   2              }
 627   1      #endif
 628   1              /* Add to support customers' application, end */
 629   1              return HTTP_POST_OK;
 630   1      } /* httpap_SecurityProcess() */
 631          
 632          /*
 633           * ----------------------------------------------------------------------------
 634           * Function Name: httpap_GetIndexPage()
 635           * Purpose:
 636           * Params:
 637           * Returns:
 638           * Note:
 639           * ----------------------------------------------------------------------------
 640           */
 641          U8_T httpap_GetIndexPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 642          {
 643   1      #if HTTPDAP_ENABLE_AUTHORITY
                      pHttpap_buf = HTTP_TmpBuf;
                      httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"Logout");
                      HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
                      return HTTP_POST_ERR;/* EXTERNAL DROP */
              #else
 650   1              U8_T i;
 651   1              
 652   1              for (i=0; i < MAX_HTTP_CONNECT; i++)
 653   1              {
 654   2                      if (httpdap.SecurityRemoteIP[i] == pConn->Ip)
 655   2                      {
 656   3                              httpdap.SecurityTimeExpired[i] = 0;             
 657   3                              break;
 658   3                      }
 659   2              }
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 12  

 660   1      
 661   1      #endif  
 662   1              return HTTP_POST_OK;
 663   1      } /* End of httpap_GetIndexPage() */
*** WARNING C280 IN LINE 641 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
 664          
 665          /*
 666           * ----------------------------------------------------------------------------
 667           * Function Name: httpap_PostIndexPage()
 668           * Purpose:
 669           * Params:
 670           * Returns:
 671           * Note:
 672           * ----------------------------------------------------------------------------
 673           */
 674          U8_T httpap_PostIndexPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 675          {
 676   1              U8_T i, j;
 677   1              U8_T *pTmp, XDATA *pbuf1, XDATA *pbuf2;
 678   1      
 679   1              if (httpap_CheckElementUpdate(RECORD_TEXT_username) != HTTPAPI_ERR &&
 680   1                      httpap_CheckElementUpdate(RECORD_PASSWORD_password) != HTTPAPI_ERR)
 681   1              {
 682   2                      // get uername and password for reference //
 683   2                      pbuf1 = HTTP_TmpBuf;
 684   2                      pbuf2 = HTTP_TmpBuf + 100;              
 685   2                      GCONFIG_GetAdmin(pbuf1, pbuf2, &i);
 686   2                              
 687   2                      // check username //
 688   2                      i = httpap_GetElementValue(RECORD_TEXT_username, &pTmp);
 689   2                      j = strlen(pbuf1);
 690   2                      if (i != j || memcmp(pbuf1, pTmp, j))
 691   2                      {
 692   3                              goto HTTPAP_INDEX_POST_ERR;
 693   3                      }
 694   2                              
 695   2                      // check password //
 696   2                      i =     httpap_GetElementValue(RECORD_PASSWORD_password, &pTmp);
 697   2                      j = strlen(pbuf2);
 698   2                      if (i != j || memcmp(pbuf2, pTmp, j))
 699   2                      {
 700   3                              goto HTTPAP_INDEX_POST_ERR;
 701   3                      }
 702   2                      httpap_tmp16 = 0xffff;
 703   2                      for (i = 0; i < MAX_HTTP_CONNECT; i++)
 704   2                      {
 705   3                              // found the empty security slot //
 706   3                              if (httpdap.SecurityTimeExpired[i] == 0)
 707   3                              {
 708   4                                      httpdap.SecurityTimeExpired[i] = 0xffff;
 709   4                                      httpdap.SecurityRemoteIP[i] = pConn->Ip;                        
 710   4                                      break;
 711   4                              }
 712   3                      
 713   3                              // found a slot is not most commonly used //
 714   3                              if (httpap_tmp16 > httpdap.SecurityTimeExpired[i])
 715   3                              {
 716   4                                      httpap_tmp16 = httpdap.SecurityTimeExpired[i];
 717   4                                      httpap_tmp8 = i;
 718   4                              }
 719   3                      }
 720   2                      if (i == MAX_HTTP_CONNECT)
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 13  

 721   2                      {
 722   3                              httpdap.SecurityTimeExpired[httpap_tmp8] = 0xffff;
 723   3                              httpdap.SecurityRemoteIP[httpap_tmp8] = pConn->Ip;                      
 724   3                      }
 725   2                      goto HTTPAP_INDEX_POST_OK;
 726   2              }
 727   1      
 728   1      HTTPAP_INDEX_POST_ERR:
 729   1      #if (INCLUDE_EVENT_DETECT)
                      GEVENT_SetAuthFailEvent(1);// Add for authentication fail detect //
              #endif  
 732   1              pHttpap_buf = HTTP_TmpBuf;
 733   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
 734   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
 735   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
 736   1                                                                                               ,"Username or Password error",2,"sec","off",FSYS_Manage[pConn->FileId].FName);
 737   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
 738   1              return HTTP_POST_ERR;
 739   1                      
 740   1      HTTPAP_INDEX_POST_OK:   
 741   1              HTTPAPI_ResponseRedirectMesssge(HTTP_TmpBuf, FILE_BSCSETTING, pConn);// re-direction to basic page //
 742   1              return HTTP_POST_ERR;
 743   1                              
 744   1      } /* End of httpap_PostIndexPage() */
*** WARNING C280 IN LINE 674 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
 745          
 746          /*
 747           * ----------------------------------------------------------------------------
 748           * Function Name: httpap_GetBasicPage()
 749           * Purpose:
 750           * Params:
 751           * Returns:
 752           * Note:
 753           * ----------------------------------------------------------------------------
 754           */
 755          U8_T httpap_GetBasicPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 756          {
 757   1              /* Load device name */
 758   1              pHttpap_buf = (U8_T *)(GCONFIG_GetDeviceName());
 759   1              httpap_tmp8 = strlen(pHttpap_buf);
 760   1              if (httpap_tmp8 > 16)
 761   1                      httpap_tmp8 = 16;
 762   1              httpap_SetElementValue(RECORD_TEXT_dsm_name, pHttpap_buf, httpap_tmp8); 
 763   1              
 764   1              /* Load serial setting */
 765   1              httpap_tmp16 = GCONFIG_GetSerialPort();
 766   1      
 767   1              httpap_tmp8 = ((httpap_tmp16 & 0xF800) >> 11);
 768   1              httpap_SetElementValue(RECORD_SELECT_dbr, &httpap_tmp8, 1);
 769   1      
 770   1              httpap_tmp8 = ((httpap_tmp16 & 0x0700) >> 8);
 771   1              httpap_SetElementValue(RECORD_SELECT_data, &httpap_tmp8, 1);
 772   1      
 773   1              httpap_tmp8 = ((httpap_tmp16 & 0x00E0) >> 5);
 774   1              httpap_SetElementValue(RECORD_SELECT_parity, &httpap_tmp8, 1);
 775   1      
 776   1              httpap_tmp8 = ((httpap_tmp16 & 0x0003));
 777   1              httpap_SetElementValue(RECORD_SELECT_stop, &httpap_tmp8, 1);
 778   1      
 779   1              httpap_tmp8 = ((httpap_tmp16 & 0x0001C) >> 2);
 780   1              httpap_SetElementValue(RECORD_SELECT_flow, &httpap_tmp8, 1);
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 14  

 781   1      
 782   1              /* Load DHCP/Connection type/Connection mode/Accessiable control */
 783   1              httpap_tmp16 = GCONFIG_GetNetwork();
 784   1              
 785   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_NETWORK_DHCP_ENABLE) ? 1 : 0;
 786   1              httpap_SetElementValue(RECORD_SELECT_dhcp, &httpap_tmp8, 1);
 787   1              
 788   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_NETWORK_PROTO_TCP) ? 0 : 1;
 789   1              httpap_SetElementValue(RECORD_SELECT_conntype, &httpap_tmp8, 1);
 790   1                      
 791   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_NETWORK_CLIENT) ? 1 : 0;
 792   1              httpap_SetElementValue(RECORD_SELECT_cs_mode, &httpap_tmp8, 1);
 793   1      
 794   1              /* Load IP address */
 795   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetServerStaticIP(), HTTP_TmpBuf);
 796   1              httpap_SetElementValue(RECORD_TEXT_static_ip, HTTP_TmpBuf, httpap_tmp8);
 797   1                      
 798   1              /* Load subnet mask */
 799   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetNetmask(), HTTP_TmpBuf);
 800   1              httpap_SetElementValue(RECORD_TEXT_mask, HTTP_TmpBuf, httpap_tmp8);
 801   1                      
 802   1              /* Load gateway */
 803   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetGateway(), HTTP_TmpBuf);
 804   1              httpap_SetElementValue(RECORD_TEXT_gateway_ip, HTTP_TmpBuf, httpap_tmp8);
 805   1      
 806   1              /* Load DNS */
 807   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetDNS(), HTTP_TmpBuf);
 808   1              httpap_SetElementValue(RECORD_TEXT_dns_ip, HTTP_TmpBuf, httpap_tmp8);
 809   1      
 810   1              /* Load server listen port */
 811   1              httpap_tmp8 = HTTPAPI_Short2Str(GCONFIG_GetServerDataPktListenPort(), HTTP_TmpBuf);
 812   1              httpap_SetElementValue(RECORD_TEXT_s_lstport, HTTP_TmpBuf, httpap_tmp8);
 813   1      
 814   1              /* Load transmit timer */
 815   1              httpap_tmp8 = HTTPAPI_Short2Str(GCONFIG_GetEthernetTxTimer(), HTTP_TmpBuf);
 816   1              httpap_SetElementValue(RECORD_TEXT_txtimer, HTTP_TmpBuf, httpap_tmp8);
 817   1      
 818   1              /* Load destination port */
 819   1              httpap_tmp8 = HTTPAPI_Short2Str(GCONFIG_GetClientDestPort(), HTTP_TmpBuf);
 820   1              httpap_SetElementValue(RECORD_TEXT_c_desport, HTTP_TmpBuf, httpap_tmp8);
 821   1      
 822   1              /* Load Destination host name */
 823   1              httpap_tmp8 = GCONFIG_GetDestHostName(HTTP_TmpBuf);
 824   1              httpap_SetElementValue(RECORD_TEXT_c_deshn, HTTP_TmpBuf, httpap_tmp8);
 825   1              
 826   1              /* Load rs485 control bits */
 827   1              httpap_tmp8 = GCONFIG_GetRs485Mode();
 828   1              httpap_SetElementValue(RECORD_SELECT_rs485, &httpap_tmp8, 1);
 829   1                      
 830   1              return HTTP_POST_OK;
 831   1      } /* End of httpap_GetBasicPage() */
*** WARNING C280 IN LINE 755 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
*** WARNING C280 IN LINE 755 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
 832          
 833          /*
 834           * ----------------------------------------------------------------------------
 835           * Function Name: httpap_PostBasicPage()
 836           * Purpose:
 837           * Params:
 838           * Returns:
 839           * Note:
 840           * ----------------------------------------------------------------------------
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 15  

 841           */
 842          U8_T httpap_PostBasicPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 843          {
 844   1              
 845   1              if (httpap_CheckElementUpdateByName("reboot") != HTTPAPI_ERR)
 846   1              {
 847   2                      httpdap.Cmd = HTTPDAP_REBOOT_CMD;
 848   2              
 849   2                      httpap_tmp8 = (GCONFIG_GetNetwork() & GCONFIG_NETWORK_DHCP_ENABLE) ? 20 : 15;//select delay time for DHC
             -P enable or disable. //                       
 850   2                      
 851   2                      pHttpap_buf = HTTP_TmpBuf;
 852   2                      httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);          
 853   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%
             -s&%s&%s"
 854   2                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
 855   2                                                                                               ,"Device reboot! please Wait",httpap_tmp8,"sec","on",FSYS_Manage[pInfo->HomePage].FName);                      
 856   2                      HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                
 857   2                      return HTTP_POST_ERR;           
 858   2              }
 859   1              else if (httpap_CheckElementUpdateByName("restore") != HTTPAPI_ERR)
 860   1              {
 861   2                      httpdap.Cmd = HTTPDAP_RESTORE_CMD;      
 862   2                      
 863   2                      pHttpap_buf = HTTP_TmpBuf;
 864   2                      httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);          
 865   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%
             -s&%s&%s"
 866   2                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
 867   2                                                                                               ,"Device restore! please Wait",20,"sec","on",FSYS_Manage[pInfo->HomePage].FName);                      
 868   2                      HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                
 869   2                      return HTTP_POST_ERR;           
 870   2              }
 871   1                                              
 872   1              if (httpap_CheckElementUpdate(RECORD_TEXT_dsm_name) != HTTPAPI_ERR && 
 873   1                      httpap_CheckElementUpdate(RECORD_TEXT_c_desport) != HTTPAPI_ERR)
 874   1              {
 875   2                      // Save device name //
 876   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_dsm_name, &pHttpap_buf);
 877   2                      memcpy(HTTP_TmpBuf,pHttpap_buf,httpap_tmp8);
 878   2                      memset(HTTP_TmpBuf+httpap_tmp8, 0 , 16-httpap_tmp8);// To fill the unused data with terminal char('\0').
             -                
 879   2                      GCONFIG_SetDeviceName((GCONFIG_DEV_NAME*)HTTP_TmpBuf);
 880   2                              
 881   2                      // Save serial setting //
 882   2                      httpap_tmp16 = GCONFIG_GetSerialPort();
 883   2                      httpap_GetElementValue(RECORD_SELECT_dbr, &pHttpap_buf);
 884   2                      httpap_tmp16 = (httpap_tmp16 & (~0xF800)) | (*pHttpap_buf << 11);
 885   2              
 886   2                      httpap_GetElementValue(RECORD_SELECT_data, &pHttpap_buf);
 887   2                      httpap_tmp16 = (httpap_tmp16 & (~0x0700)) | (*pHttpap_buf << 8);
 888   2      
 889   2                      httpap_GetElementValue(RECORD_SELECT_parity, &pHttpap_buf);
 890   2                      httpap_tmp16 = (httpap_tmp16 & (~0x00E0)) | (*pHttpap_buf << 5);
 891   2              
 892   2                      httpap_GetElementValue(RECORD_SELECT_stop, &pHttpap_buf);
 893   2                      httpap_tmp16 = (httpap_tmp16 & (~0x0003)) | *pHttpap_buf;
 894   2      
 895   2                      httpap_GetElementValue(RECORD_SELECT_flow, &pHttpap_buf);
 896   2                      httpap_tmp16 = (httpap_tmp16 & (~0x001C)) | (*pHttpap_buf << 2);
 897   2                      GCONFIG_SetSerialPort(httpap_tmp16);
 898   2              
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 16  

 899   2                      // Save DHCP/Connection type/Connection mode //
 900   2                      httpap_tmp16 = GCONFIG_GetNetwork();
 901   2                      httpap_GetElementValue(RECORD_SELECT_dhcp, &pHttpap_buf);
 902   2                      httpap_tmp16 = (httpap_tmp16 & 0xBFFF) | (*pHttpap_buf << 14);
 903   2              
 904   2                      httpap_GetElementValue(RECORD_SELECT_conntype, &pHttpap_buf);
 905   2                      httpap_tmp16 = httpap_tmp16 & 0xF3FF;
 906   2                      if (*pHttpap_buf)       
 907   2                              httpap_tmp16 |= 0x0800;//UDP mode
 908   2                      else            
 909   2                              httpap_tmp16 |= 0x0400;//TCP mode
 910   2                              
 911   2                      httpap_GetElementValue(RECORD_SELECT_cs_mode, &pHttpap_buf);
 912   2                      httpap_tmp16 = (httpap_tmp16 & 0x7FFF) | (*pHttpap_buf << 15);
 913   2                      GCONFIG_SetNetwork(httpap_tmp16);
 914   2      
 915   2                      // Save IP address //
 916   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_static_ip, &pHttpap_buf);
 917   2                      GCONFIG_SetServerStaticIP(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));
 918   2      
 919   2                      // Save subnet mask //
 920   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_mask, &pHttpap_buf);
 921   2                      GCONFIG_SetNetmask(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));
 922   2                      
 923   2                      // Save gateway //
 924   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_gateway_ip, &pHttpap_buf);
 925   2                      GCONFIG_SetGateway(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));
 926   2      
 927   2                      // Save DNS //
 928   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_dns_ip, &pHttpap_buf);
 929   2                      GCONFIG_SetDNS(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));
 930   2      
 931   2                      // Save server listen port //
 932   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_s_lstport, &pHttpap_buf);
 933   2                      GCONFIG_SetServerDataPktListenPort(HTTPAPI_Str2Short(pHttpap_buf, httpap_tmp8));
 934   2      
 935   2                      // Save transmit timer //
 936   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_txtimer, &pHttpap_buf);
 937   2                      GCONFIG_SetEthernetTxTimer(HTTPAPI_Str2Short(pHttpap_buf, httpap_tmp8));
 938   2              
 939   2                      // Save destination port //
 940   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_c_desport, &pHttpap_buf);
 941   2                      GCONFIG_SetClientDestPort(HTTPAPI_Str2Short(pHttpap_buf, httpap_tmp8));
 942   2              
 943   2                      // Save Destination host name //
 944   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_c_deshn, &pHttpap_buf);
 945   2                      GCONFIG_SetDestHostName(pHttpap_buf, httpap_tmp8);
 946   2      
 947   2                      // Save rs485 control bits //
 948   2                      httpap_GetElementValue(RECORD_SELECT_rs485, &pHttpap_buf);
 949   2                      GCONFIG_SetRs485Mode(*pHttpap_buf);
 950   2                      
 951   2                      goto HTTPAP_POST_BASIC_OK;
 952   2              }
 953   1      
 954   1      //HTTPAP_POST_BASIC_ERR:        
 955   1              pHttpap_buf = HTTP_TmpBuf;
 956   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
 957   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
 958   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
 959   1                                                                                               ,"Basic settings validation error!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 17  

 960   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
 961   1              return HTTP_POST_ERR;   
 962   1      
 963   1      HTTPAP_POST_BASIC_OK:   
 964   1              // Store configuration to flash ROM //
 965   1              GCONFIG_WriteConfigData();      
 966   1                      
 967   1              pHttpap_buf = HTTP_TmpBuf;
 968   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
 969   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
 970   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
 971   1                                                                                               ,"Basic settings validation ok!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);
 972   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
 973   1              return HTTP_POST_ERR;   
 974   1                                                                                                              
 975   1      } /* End of httpap_PostBasicPage() */
 976          
 977          /*
 978           * ----------------------------------------------------------------------------
 979           * Function Name: httpap_GetAdvancePage()
 980           * Purpose:
 981           * Params:
 982           * Returns:
 983           * Note:
 984           * ----------------------------------------------------------------------------
 985           */
 986          U8_T httpap_GetAdvancePage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 987          {
 988   1              /* Load TFTP IP addr */
 989   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetTftpServerIp(), HTTP_TmpBuf);
 990   1              httpap_SetElementValue(RECORD_TEXT_tftps_ip, HTTP_TmpBuf, httpap_tmp8);
 991   1              
 992   1              /* Load TFTP File name */
 993   1              GCONFIG_GetFilename(HTTP_TmpBuf, 128);
 994   1              httpap_tmp8 = strlen(HTTP_TmpBuf);
 995   1              httpap_SetElementValue(RECORD_TEXT_file_name, HTTP_TmpBuf, httpap_tmp8);
 996   1      
 997   1              /* Load SMTP Domain name */
 998   1              httpap_tmp8 = GCONFIG_GetSMTPDomainName(HTTP_TmpBuf);
 999   1              httpap_SetElementValue(RECORD_TEXT_email_addr, HTTP_TmpBuf, httpap_tmp8);
1000   1              
1001   1              /* Load SMTP From addr */
1002   1              httpap_tmp8 = GCONFIG_GetSMTPFrom(HTTP_TmpBuf);
1003   1              httpap_SetElementValue(RECORD_TEXT_email_from, HTTP_TmpBuf, httpap_tmp8);
1004   1              
1005   1              /* Load SMTP To1 addr */
1006   1              httpap_tmp8 = GCONFIG_GetSMTPTo1(HTTP_TmpBuf);
1007   1              httpap_SetElementValue(RECORD_TEXT_email_to1, HTTP_TmpBuf, httpap_tmp8);
1008   1              
1009   1              /* Load SMTP To2 addr */
1010   1              httpap_tmp8 = GCONFIG_GetSMTPTo2(HTTP_TmpBuf);
1011   1              httpap_SetElementValue(RECORD_TEXT_email_to2, HTTP_TmpBuf, httpap_tmp8);
1012   1              
1013   1              /* Load SMTP To3 addr */
1014   1              httpap_tmp8 = GCONFIG_GetSMTPTo3(HTTP_TmpBuf);
1015   1              httpap_SetElementValue(RECORD_TEXT_email_to3, HTTP_TmpBuf, httpap_tmp8);
1016   1      
1017   1              /* Load Auto Warning enable bits */
1018   1              httpap_tmp16 = GCONFIG_GetAutoWarning();
1019   1              
1020   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_SMTP_EVENT_COLDSTART) ? 1 : 0;
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 18  

1021   1              httpap_SetElementValue(RECORD_SELECT_coldstart, &httpap_tmp8, 1);
1022   1                                              
1023   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_SMTP_EVENT_AUTH_FAIL) ? 1 : 0;
1024   1              httpap_SetElementValue(RECORD_SELECT_authfail, &httpap_tmp8, 1);
1025   1                      
1026   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_SMTP_EVENT_IP_CHANGED) ? 1 : 0;
1027   1              httpap_SetElementValue(RECORD_SELECT_ipchg, &httpap_tmp8, 1);
1028   1                      
1029   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_SMTP_EVENT_PSW_CHANGED) ? 1 : 0;
1030   1              httpap_SetElementValue(RECORD_SELECT_pswchg, &httpap_tmp8, 1);
1031   1                              
1032   1              /* Load DHCP server status */
1033   1              httpap_tmp8 = GCONFIG_GetDhcpSrvStatus() ? 1 : 0;
1034   1              httpap_SetElementValue(RECORD_RADIO_dhcps_onoff, &httpap_tmp8, 1);
1035   1                      
1036   1              /* Load DHCP server IP pool start address */
1037   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetDhcpSrvStartIp(), HTTP_TmpBuf);
1038   1              httpap_SetElementValue(RECORD_TEXT_dhcps_startip, HTTP_TmpBuf, httpap_tmp8);
1039   1              
1040   1              /* Load DHCP server IP pool end address */              
1041   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetDhcpSrvEndIp(), HTTP_TmpBuf);
1042   1              httpap_SetElementValue(RECORD_TEXT_dhcps_endip, HTTP_TmpBuf, httpap_tmp8);
1043   1              
1044   1              /* Load DHCP server default gateway */          
1045   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetDhcpSrvDefGateway(), HTTP_TmpBuf);
1046   1              httpap_SetElementValue(RECORD_TEXT_dhcps_gateway, HTTP_TmpBuf, httpap_tmp8);    
1047   1              
1048   1              /* Load DHCP server netmask */          
1049   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetDhcpSrvNetmask(), HTTP_TmpBuf);
1050   1              httpap_SetElementValue(RECORD_TEXT_dhcps_mask, HTTP_TmpBuf, httpap_tmp8);       
1051   1              return HTTP_POST_OK;
1052   1      } /* End of httpap_GetAdvancePage() */
*** WARNING C280 IN LINE 986 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
*** WARNING C280 IN LINE 986 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
1053          
1054          /*
1055           * ----------------------------------------------------------------------------
1056           * Function Name: httpap_PostAdvancePage()
1057           * Purpose:
1058           * Params:
1059           * Returns:
1060           * Note:
1061           * ----------------------------------------------------------------------------
1062           */
1063          U8_T httpap_PostAdvancePage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
1064          {
1065   1              if (httpap_CheckElementUpdate(RECORD_TEXT_tftps_ip) != HTTPAPI_ERR && 
1066   1                      httpap_CheckElementUpdate(RECORD_TEXT_file_name) != HTTPAPI_ERR)
1067   1              {
1068   2                      // Save TFTP IP addr //
1069   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_tftps_ip, &pHttpap_buf);
1070   2                      GCONFIG_SetTftpServerIp(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));
1071   2                              
1072   2                      // Save TFTP File name //
1073   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_file_name, &pHttpap_buf);
1074   2                      GCONFIG_SetFilename(pHttpap_buf, httpap_tmp8);
1075   2      
1076   2                      // process firmware upgrade //
1077   2                      if (httpap_CheckElementUpdateByName("upgrade") != HTTPAPI_ERR)
1078   2                      {
1079   3                              // Store configuration to flash ROM //
1080   3                              GCONFIG_WriteConfigData();      
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 19  

1081   3      
1082   3                              httpdap.Cmd = HTTPDAP_FWUPGRADE_CMD;
1083   3                              httpap_tmp8 = (GCONFIG_GetNetwork() & GCONFIG_NETWORK_DHCP_ENABLE) ? 60 : 55;//select delay time for DH
             -CP enable or disable. //                              
1084   3                              
1085   3                              pHttpap_buf = HTTP_TmpBuf;
1086   3                              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1087   3                              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&
             -%s&%s&%s"
1088   3                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
1089   3                                                                                               ,"Please Wait",httpap_tmp8,"sec","on",FSYS_Manage[pInfo->HomePage].FName);                     
1090   3                              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
1091   3                              return HTTP_POST_ERR;
1092   3                      }
1093   2                                              
1094   2                      goto HTTPAP_POST_ADVANCE_OK;
1095   2              }
1096   1              else if (httpap_CheckElementUpdate(RECORD_TEXT_email_addr) != HTTPAPI_ERR &&
1097   1                               httpap_CheckElementUpdate(RECORD_SELECT_pswchg) != HTTPAPI_ERR)
1098   1              {
1099   2                      // Save SMTP Domain name //
1100   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_email_addr, &pHttpap_buf);
1101   2                      GCONFIG_SetSMTPDomainName(pHttpap_buf, httpap_tmp8);
1102   2                      
1103   2                      // Save SMTP From addr //
1104   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_email_from, &pHttpap_buf);
1105   2                      GCONFIG_SetSMTPFrom(pHttpap_buf, httpap_tmp8);
1106   2      
1107   2                      // Save SMTP To1 addr //
1108   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_email_to1, &pHttpap_buf);
1109   2                      GCONFIG_SetSMTPTo1(pHttpap_buf, httpap_tmp8);
1110   2      
1111   2                      // Save SMTP To2 addr //
1112   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_email_to2, &pHttpap_buf);
1113   2                      GCONFIG_SetSMTPTo2(pHttpap_buf, httpap_tmp8);
1114   2              
1115   2                      // Save SMTP To3 addr //
1116   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_email_to3, &pHttpap_buf);
1117   2                      GCONFIG_SetSMTPTo3(pHttpap_buf, httpap_tmp8);
1118   2              
1119   2                      // Save Auto Warning enable bits //
1120   2                      httpap_tmp16 = GCONFIG_GetAutoWarning();        
1121   2                      httpap_GetElementValue(RECORD_SELECT_coldstart, &pHttpap_buf);
1122   2                      if (*pHttpap_buf)
1123   2                              httpap_tmp16 |= GCONFIG_SMTP_EVENT_COLDSTART;
1124   2                      else
1125   2                              httpap_tmp16 &= (~GCONFIG_SMTP_EVENT_COLDSTART);
1126   2      
1127   2                      httpap_GetElementValue(RECORD_SELECT_authfail, &pHttpap_buf);
1128   2                      if (*pHttpap_buf)
1129   2                              httpap_tmp16 |= GCONFIG_SMTP_EVENT_AUTH_FAIL;
1130   2                      else
1131   2                              httpap_tmp16 &= (~GCONFIG_SMTP_EVENT_AUTH_FAIL);
1132   2      
1133   2                      httpap_GetElementValue(RECORD_SELECT_ipchg, &pHttpap_buf);
1134   2                      if (*pHttpap_buf)
1135   2                              httpap_tmp16 |= GCONFIG_SMTP_EVENT_IP_CHANGED;
1136   2                      else
1137   2                              httpap_tmp16 &= (~GCONFIG_SMTP_EVENT_IP_CHANGED);
1138   2              
1139   2                      httpap_GetElementValue(RECORD_SELECT_pswchg, &pHttpap_buf);
1140   2                      if (*pHttpap_buf)
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 20  

1141   2                              httpap_tmp16 |= GCONFIG_SMTP_EVENT_PSW_CHANGED;
1142   2                      else
1143   2                              httpap_tmp16 &= (~GCONFIG_SMTP_EVENT_PSW_CHANGED);
1144   2                      GCONFIG_SetAutoWarning(httpap_tmp16);
1145   2      
1146   2                      goto HTTPAP_POST_ADVANCE_OK;
1147   2              }                       
1148   1              else if (httpap_CheckElementUpdate(RECORD_RADIO_dhcps_onoff) != HTTPAPI_ERR &&
1149   1                               httpap_CheckElementUpdate(RECORD_TEXT_dhcps_mask) != HTTPAPI_ERR)      
1150   1              {
1151   2                      // Save DHCP server status //
1152   2                      httpap_GetElementValue(RECORD_RADIO_dhcps_onoff, &pHttpap_buf);
1153   2                      GCONFIG_SetDhcpSrvStatus(*pHttpap_buf);
1154   2                      
1155   2                      // Save DHCP server IP pool start address //            
1156   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_dhcps_startip, &pHttpap_buf);          
1157   2                      GCONFIG_SetDhcpSrvStartIp(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));
1158   2      
1159   2                      // Save DHCP server IP pool end address //              
1160   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_dhcps_endip, &pHttpap_buf);                            
1161   2                      GCONFIG_SetDhcpSrvEndIp(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));                
1162   2              
1163   2                      // Save DHCP server default gateway //          
1164   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_dhcps_gateway, &pHttpap_buf);                          
1165   2                      GCONFIG_SetDhcpSrvDefGateway(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));                           
1166   2              
1167   2                      // Save DHCP server netmask //          
1168   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_dhcps_mask, &pHttpap_buf);                             
1169   2                      GCONFIG_SetDhcpSrvNetmask(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));      
1170   2                      
1171   2                      goto HTTPAP_POST_ADVANCE_OK;            
1172   2              }                       
1173   1                      
1174   1      //HTTPAP_POST_ADVANCE_ERR:      
1175   1              pHttpap_buf = HTTP_TmpBuf;
1176   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1177   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
1178   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
1179   1                                                                                               ,"Advance settings validation error!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);                 
1180   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
1181   1              return HTTP_POST_ERR;
1182   1      
1183   1      HTTPAP_POST_ADVANCE_OK: 
1184   1              // Store configuration to flash ROM //
1185   1              GCONFIG_WriteConfigData();
1186   1      
1187   1              pHttpap_buf = HTTP_TmpBuf;
1188   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1189   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
1190   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
1191   1                                                                                               ,"Advance settings validation ok!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);                    
1192   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
1193   1              return HTTP_POST_ERR;
1194   1                                      
1195   1      } /* End of httpap_PostAdvancePage() */
1196          
1197          /*
1198           * ----------------------------------------------------------------------------
1199           * Function Name: httpap_GetSecurityPage()
1200           * Purpose:
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 21  

1201           * Params:
1202           * Returns:
1203           * Note:
1204           * ----------------------------------------------------------------------------
1205           */
1206          U8_T httpap_GetSecurityPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
1207          {
1208   1              U8_T i, j;
1209   1              
1210   1              /* Clear new user and password */
1211   1              httpap_SetElementValue(RECORD_TEXT_new_usn, 0, 0);
1212   1              httpap_SetElementValue(RECORD_PASSWORD_old_psw, 0, 0);
1213   1              httpap_SetElementValue(RECORD_PASSWORD_new_psw, 0, 0);
1214   1              httpap_SetElementValue(RECORD_PASSWORD_cfm_psw, 0, 0);
1215   1              
1216   1              /* Accessible IP address 0~3 */
1217   1              for (i = 0; i < 4; i ++)
1218   1              {
1219   2                      switch (i)
1220   2                      {
1221   3                      case 0:
1222   3                              j = RECORD_TEXT_acc_ip1;        break;
1223   3                      case 1:
1224   3                              j = RECORD_TEXT_acc_ip2;        break;                  
1225   3                      case 2:
1226   3                              j = RECORD_TEXT_acc_ip3;        break;                  
1227   3                      case 3:                                                                 
1228   3                              j = RECORD_TEXT_acc_ip4;        break;                  
1229   3                      }       
1230   2                      GCONFIG_GetAccessibleIP(i,&httpap_tmp32);
1231   2                      if (httpap_tmp32)
1232   2                      {
1233   3                              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(httpap_tmp32, HTTP_TmpBuf);
1234   3                              httpap_SetElementValue(j, HTTP_TmpBuf, httpap_tmp8);
1235   3                      }
1236   2                      else
1237   2                              httpap_SetElementValue(j, 0, 0);
1238   2              }
1239   1              
1240   1              httpap_tmp16 = GCONFIG_GetNetwork();
1241   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_NETWORK_ACC_IP_ENABLE) ? 1 : 0;
1242   1              httpap_SetElementValue(RECORD_SELECT_acc_ipen, &httpap_tmp8, 1);
1243   1              return HTTP_POST_OK;
1244   1      } /* End of httpap_GetSecurityPage() */
*** WARNING C280 IN LINE 1206 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
*** WARNING C280 IN LINE 1206 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
1245          
1246          /*
1247           * ----------------------------------------------------------------------------
1248           * Function Name: httpap_PostSecurityPage()
1249           * Purpose:
1250           * Params:
1251           * Returns:
1252           * Note:
1253           * ----------------------------------------------------------------------------
1254           */
1255          U8_T httpap_PostSecurityPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
1256          {
1257   1              U8_T *pTmp, *pbuf1, *pbuf2, tmp;
1258   1              
1259   1              pbuf1 = HTTP_TmpBuf;
1260   1              pbuf2 = HTTP_TmpBuf + 50;
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 22  

1261   1              
1262   1              if (httpap_CheckElementUpdate(RECORD_TEXT_new_usn) != HTTPAPI_ERR)      
1263   1              {
1264   2                      // Save new username //
1265   2                      GCONFIG_GetAdmin(pbuf1, pbuf2, &httpap_tmp8);
1266   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_new_usn, &pHttpap_buf);
1267   2                      
1268   2                      memcpy(pbuf1, pHttpap_buf, httpap_tmp8);
1269   2                      pbuf1[httpap_tmp8] = '\0';
1270   2                      GCONFIG_SetAdmin(pbuf1, pbuf2);
1271   2                      
1272   2                      // Store configuration to flash ROM //
1273   2                      GCONFIG_WriteConfigData();
1274   2                              
1275   2                      pHttpap_buf = HTTP_TmpBuf;
1276   2                      httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSCONFIRM);
1277   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "msg", "Change username ok!
             -</br>Please use new user name to login again.");      
1278   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "dst_style", "title_2");           
1279   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "redirect", "%s", FSYS_Mana
             -ge[pConn->FileId].FName);             
1280   2                      HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSCONFIRM, pConn);                                                                            
1281   2                      return HTTP_POST_ERR;
1282   2                              
1283   2              }
1284   1              else if (httpap_CheckElementUpdate(RECORD_PASSWORD_old_psw) != HTTPAPI_ERR && 
1285   1                               httpap_CheckElementUpdate(RECORD_PASSWORD_cfm_psw) != HTTPAPI_ERR)
1286   1              {
1287   2                      // check old password //
1288   2                      GCONFIG_GetAdmin(pbuf1, pbuf2, &httpap_tmp8);
1289   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_PASSWORD_old_psw, &pHttpap_buf);
1290   2                      if (strlen(pbuf2) != httpap_tmp8 || memcmp(pbuf2, pHttpap_buf, httpap_tmp8) != 0)
1291   2                              goto HTTPAP_POST_SECURITY_ERR;
1292   2                      
1293   2                      // check new password and confirm password //
1294   2                      tmp = httpap_GetElementValue(RECORD_PASSWORD_cfm_psw, &pTmp);           
1295   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_PASSWORD_new_psw, &pHttpap_buf);
1296   2                      if (tmp != httpap_tmp8 || memcmp(pTmp, pHttpap_buf, httpap_tmp8) != 0)
1297   2                              goto HTTPAP_POST_SECURITY_ERR;
1298   2      
1299   2                      // save new password //         
1300   2                      memcpy(pbuf2, pHttpap_buf, httpap_tmp8);
1301   2                      pbuf2[httpap_tmp8] = '\0';
1302   2                      GCONFIG_SetAdmin(pbuf1, pbuf2);
1303   2      
1304   2                      // Store configuration to flash ROM //
1305   2                      GCONFIG_WriteConfigData();
1306   2                      
1307   2                      pHttpap_buf = HTTP_TmpBuf;
1308   2                      httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSCONFIRM);
1309   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "msg", "Change password ok!
             -</br>Please use new password to login again.");       
1310   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "dst_style", "title_2");           
1311   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "redirect", "%s", FSYS_Mana
             -ge[pConn->FileId].FName);             
1312   2                      HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSCONFIRM, pConn);                                                                            
1313   2                      return HTTP_POST_ERR;           
1314   2              }
1315   1              else if (httpap_CheckElementUpdate(RECORD_TEXT_acc_ip1) != HTTPAPI_ERR && 
1316   1                               httpap_CheckElementUpdate(RECORD_SELECT_acc_ipen) != HTTPAPI_ERR)                       
1317   1              {       
1318   2              
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 23  

1319   2                      // save accible IP 1~4 //
1320   2                      for (tmp = 0; tmp < 4; tmp ++)
1321   2                      {
1322   3                              switch (tmp)
1323   3                              {
1324   4                              case 0:
1325   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_acc_ip1, &pHttpap_buf);        break;
1326   4                              case 1:
1327   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_acc_ip2, &pHttpap_buf);        break;                  
1328   4                              case 2:
1329   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_acc_ip3, &pHttpap_buf);        break;                  
1330   4                              case 3:                                                                 
1331   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_acc_ip4, &pHttpap_buf);        break;                  
1332   4                              }
1333   3                              if (httpap_tmp8)
1334   3                                      GCONFIG_SetAccessibleIP(tmp, HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));
1335   3                              else
1336   3                                      GCONFIG_SetAccessibleIP(tmp, 0);
1337   3                      }
1338   2                                              
1339   2                      // Save accessible IP enable bit //
1340   2                      httpap_tmp16 = GCONFIG_GetNetwork();    
1341   2                      httpap_GetElementValue(RECORD_SELECT_acc_ipen, &pHttpap_buf);
1342   2                      if (*pHttpap_buf)
1343   2                              httpap_tmp16 |= GCONFIG_NETWORK_ACC_IP_ENABLE;
1344   2                      else
1345   2                              httpap_tmp16 &= (~GCONFIG_NETWORK_ACC_IP_ENABLE);
1346   2                      GCONFIG_SetNetwork(httpap_tmp16);
1347   2                      
1348   2                      goto HTTPAP_POST_SECURITY_OK;
1349   2              }
1350   1              
1351   1      HTTPAP_POST_SECURITY_ERR:       
1352   1              pHttpap_buf = HTTP_TmpBuf;
1353   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1354   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
1355   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
1356   1                                                                                               ,"Security settings validation error!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);        
1357   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
1358   1              return HTTP_POST_ERR;
1359   1              
1360   1              
1361   1      HTTPAP_POST_SECURITY_OK:        
1362   1              // Store configuration to flash ROM //
1363   1              GCONFIG_WriteConfigData();
1364   1      
1365   1              pHttpap_buf = HTTP_TmpBuf;
1366   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1367   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
1368   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
1369   1                                                                                               ,"Security settings validation ok!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);   
1370   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
1371   1              return HTTP_POST_ERR;
1372   1      
1373   1      } /* End of httpap_PostSecurityPage() */
*** WARNING C280 IN LINE 1255 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
1374          
1375          /*
1376           * ----------------------------------------------------------------------------
1377           * Function Name: httpap_GetWiFiPage()
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 24  

1378           * Purpose:
1379           * Params:
1380           * Returns:
1381           * Note:
1382           * ----------------------------------------------------------------------------
1383           */
1384          U8_T httpap_GetWiFiPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
1385          {
1386   1              U8_T i, *pbuf1, *pbuf2;
1387   1              
1388   1              /* Network mode */
1389   1              httpap_tmp8 = GCONFIG_GetWifiNetworkMode() ? 1:0;
1390   1              httpap_SetElementValue(RECORD_SELECT_network_mode, &httpap_tmp8, 1);
1391   1              
1392   1              /* Channel */
1393   1              httpap_tmp8 = GCONFIG_GetChannel();
1394   1              httpap_SetElementValue(RECORD_SELECT_channel, &httpap_tmp8, 1);
1395   1              
1396   1              /* Service Area Name/SSID */
1397   1              httpap_tmp8 = GCONFIG_GetSsid(HTTP_TmpBuf);
1398   1              httpap_SetElementValue(RECORD_TEXT_ssid, HTTP_TmpBuf, httpap_tmp8);
1399   1                              
1400   1              /* Secirity Mode */
1401   1              httpap_tmp8 = GCONFIG_GetWifiEncryptMode();// % 5;
1402   1              httpap_SetElementValue(RECORD_SELECT_security_mode, &httpap_tmp8, 1);
1403   1              
1404   1              /* Key Length */        
1405   1              httpap_tmp8 = GCONFIG_GetWifiWepKeyLength() ? 1:0;
1406   1              httpap_SetElementValue(RECORD_SELECT_key_length, &httpap_tmp8, 1);
1407   1              
1408   1              /* Key Index Select */
1409   1              httpap_tmp8 = GCONFIG_GetWifiWepKeyIndex();// % 4;
1410   1              httpap_SetElementValue(RECORD_SELECT_key_index, &httpap_tmp8, 1);
1411   1      
1412   1              /* AES/TKIP Passphrase */       
1413   1              httpap_tmp8 = GCONFIG_GetWifiPreShareKey(HTTP_TmpBuf);  
1414   1              httpap_SetElementValue(RECORD_TEXT_aes_passphrase, HTTP_TmpBuf, httpap_tmp8);
1415   1              
1416   1              /* TX Data Rate */      
1417   1              httpap_tmp8 = GCONFIG_GetWifiTxRate();//%sizof(IO_WiFiSupportTxRate);
1418   1              httpap_SetElementValue(RECORD_SELECT_tx_data_rate, &httpap_tmp8, 1);
1419   1              
1420   1              /* Transmission Power */        
1421   1              httpap_tmp8 = GCONFIG_GetWifiTxPowerLevel();
1422   1              httpap_SetElementValue(RECORD_SELECT_tx_power, &httpap_tmp8, 1);
1423   1              
1424   1              /* Preamble */  
1425   1              httpap_tmp8 = GCONFIG_GetWifiPreambleMode();
1426   1              httpap_SetElementValue(RECORD_SELECT_preamble, &httpap_tmp8, 1);
1427   1              
1428   1              /* Beacon Interval */   
1429   1              httpap_tmp16 = GCONFIG_GetWifiBcnInterval();
1430   1              httpap_tmp8 = HTTPAPI_Short2Str(httpap_tmp16, HTTP_TmpBuf);
1431   1              httpap_SetElementValue(RECORD_TEXT_beacon_intv, HTTP_TmpBuf, httpap_tmp8);
1432   1              
1433   1              /* RTS Threshold */
1434   1              httpap_tmp16 = GCONFIG_GetWifiRtsThreshold();
1435   1              httpap_tmp8 = HTTPAPI_Short2Str(httpap_tmp16, HTTP_TmpBuf);
1436   1              httpap_SetElementValue(RECORD_TEXT_rts_threshold, HTTP_TmpBuf, httpap_tmp8);
1437   1              
1438   1              /* Auto Power Control */
1439   1              httpap_tmp8 = GCONFIG_GetWifiAutoPowerCtrl();
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 25  

1440   1              httpap_SetElementValue(RECORD_SELECT_auto_pwr_ctrl, &httpap_tmp8, 1);
1441   1      
1442   1              /* for WEP64bits and WEP128bit dynamic option */
1443   1              pbuf1 = HTTP_TmpBuf + 400;
1444   1              pbuf2 = HTTP_TmpBuf + 450;      
1445   1              pHttpap_buf = HTTP_TmpBuf;
1446   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1447   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "<input type=\"hidden
             -\" id=\"wep64_info\" value=\"");// Build hidden element start //              
1448   1              for (i = 0; i < 4; i ++)
1449   1              {       
1450   2                      GCONFIG_GetWifiWep64Key(i, pbuf1);
1451   2                      HTTPAPI_Num2HexText(pbuf2, pbuf1, 5);
1452   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%s&", pbuf2);      
1453   2              }
1454   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "\"/>");/* Build hidd
             -en element end */                     
1455   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "<input type=\"hidden
             -\" id=\"wep128_info\" value=\"");// Build hidden element start //                     
1456   1              for (i = 0; i < 4; i ++)
1457   1              {       
1458   2                      GCONFIG_GetWifiWep128Key(i, pbuf1);
1459   2                      HTTPAPI_Num2HexText(pbuf2, pbuf1, 13);
1460   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%s&", pbuf2);
1461   2              }
1462   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "\"/>");/* Build hidd
             -en element end */     
1463   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, pConn->FileId, pConn);                                                                              
1464   1              return HTTP_POST_ERR;
1465   1      } /* End of httpap_GetWiFiPage() */
*** WARNING C280 IN LINE 1384 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
1466          
1467          /*
1468           * ----------------------------------------------------------------------------
1469           * Function Name: httpap_PostWiFiPage()
1470           * Purpose:
1471           * Params:
1472           * Returns:
1473           * Note:
1474           * ----------------------------------------------------------------------------
1475           */
1476          U8_T httpap_PostWiFiPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
1477          {
1478   1              U8_T i, j;
1479   1              
1480   1              if (httpap_CheckElementUpdate(RECORD_SELECT_network_mode) != HTTPAPI_ERR && 
1481   1                      httpap_CheckElementUpdate(RECORD_SELECT_security_mode) != HTTPAPI_ERR)  
1482   1              {
1483   2                      // Network mode //
1484   2                      httpap_GetElementValue(RECORD_SELECT_network_mode, &pHttpap_buf);
1485   2                      GCONFIG_SetWifiNetworkMode(*pHttpap_buf);
1486   2                                      
1487   2                      // Channel //
1488   2                      httpap_GetElementValue(RECORD_SELECT_channel, &pHttpap_buf);            
1489   2                      GCONFIG_SetChannel(*pHttpap_buf);
1490   2              
1491   2                      // Service Area Name/SSID //
1492   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_ssid, &pHttpap_buf);           
1493   2                      GCONFIG_SetSsid(pHttpap_buf, httpap_tmp8);
1494   2                                      
1495   2                      // Secirity Mode //
1496   2                      httpap_GetElementValue(RECORD_SELECT_security_mode, &pHttpap_buf);
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 26  

1497   2                      GCONFIG_SetWifiEncryptMode(*pHttpap_buf);
1498   2                      
1499   2                      goto HTTPAP_POST_WIFI_OK;
1500   2              }
1501   1              else if (httpap_CheckElementUpdate(RECORD_SELECT_key_length) != HTTPAPI_ERR && 
1502   1                       httpap_CheckElementUpdate(RECORD_TEXT_key_index_3) != HTTPAPI_ERR)                      
1503   1              {
1504   2                      // Key Length //        
1505   2                      httpap_GetElementValue(RECORD_SELECT_key_length, &pHttpap_buf);
1506   2                      GCONFIG_SetWifiWepKeyLength(*pHttpap_buf);
1507   2                      i = *pHttpap_buf;
1508   2                                      
1509   2                      // Key Index Select //
1510   2                      httpap_GetElementValue(RECORD_SELECT_key_index, &pHttpap_buf);          
1511   2                      GCONFIG_SetWifiWepKeyIndex(*pHttpap_buf);
1512   2      
1513   2                      // WEP 64/128 bits key 1~4 //   
1514   2                      for (j = 0; j < 4; j ++)
1515   2                      {
1516   3                              switch (j)
1517   3                              {
1518   4                              case 0:
1519   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_key_index_0, &pHttpap_buf); break;
1520   4                              case 1:
1521   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_key_index_1, &pHttpap_buf); break;
1522   4                              case 2:
1523   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_key_index_2, &pHttpap_buf); break;
1524   4                              case 3:
1525   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_key_index_3, &pHttpap_buf); break;
1526   4                              }
1527   3      
1528   3                              if (httpap_tmp8)
1529   3                              {
1530   4                                      if (httpap_tmp8 != 10 && httpap_tmp8 != 26)
1531   4                                              goto HTTPAP_POST_WIFI_ERR;
1532   4                                      if (!HTTPAPI_HexText2Num(HTTP_TmpBuf, pHttpap_buf, httpap_tmp8))
1533   4                                              goto HTTPAP_POST_WIFI_ERR;
1534   4                                      if (i)
1535   4                                              GCONFIG_SetWifiWep128Key(j, HTTP_TmpBuf);
1536   4                                      else
1537   4                                              GCONFIG_SetWifiWep64Key(j, HTTP_TmpBuf);
1538   4                              }
1539   3                      }
1540   2                      goto HTTPAP_POST_WIFI_OK;       
1541   2              }
1542   1              else if (httpap_CheckElementUpdate(RECORD_TEXT_aes_passphrase) != HTTPAPI_ERR)
1543   1              {
1544   2                      // AES/TKIP Passphrase //       
1545   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_aes_passphrase, &pHttpap_buf);
1546   2                      if (httpap_tmp8 < 8 || httpap_tmp8 > 63)
1547   2                              goto HTTPAP_POST_WIFI_ERR;                      
1548   2                      GCONFIG_SetWifiPreShareKey(pHttpap_buf, httpap_tmp8);
1549   2                      goto HTTPAP_POST_WIFI_OK;
1550   2              }
1551   1              else if (httpap_CheckElementUpdate(RECORD_SELECT_tx_data_rate) != HTTPAPI_ERR && 
1552   1                       httpap_CheckElementUpdate(RECORD_SELECT_auto_pwr_ctrl) != HTTPAPI_ERR)                  
1553   1              {
1554   2                      // TX Data Rate //      
1555   2                      httpap_GetElementValue(RECORD_SELECT_tx_data_rate, &pHttpap_buf);               
1556   2                      GCONFIG_SetWifiTxRate(*pHttpap_buf);
1557   2                      
1558   2                      // Transmission Power //        
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 27  

1559   2                      httpap_GetElementValue(RECORD_SELECT_tx_power, &pHttpap_buf);           
1560   2                      GCONFIG_SetWifiTxPowerLevel(*pHttpap_buf);
1561   2                      
1562   2                      // Preamble //  
1563   2                      httpap_GetElementValue(RECORD_SELECT_preamble, &pHttpap_buf);           
1564   2                      GCONFIG_SetWifiPreambleMode(*pHttpap_buf);              
1565   2                                      
1566   2                      // Beacon Interval //   
1567   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_beacon_intv, &pHttpap_buf);            
1568   2                      httpap_tmp16 = HTTPAPI_Str2Short(pHttpap_buf, httpap_tmp8);             
1569   2                      GCONFIG_SetWifiBcnInterval(httpap_tmp16);               
1570   2                      
1571   2                      // RTS Threshold //                                             
1572   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_rts_threshold, &pHttpap_buf);          
1573   2                      httpap_tmp16 = HTTPAPI_Str2Short(pHttpap_buf, httpap_tmp8);             
1574   2                      GCONFIG_SetWifiRtsThreshold(httpap_tmp16);      
1575   2                                      
1576   2                      // Auto Power Control //                                                
1577   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_SELECT_auto_pwr_ctrl, &pHttpap_buf);                
1578   2                      GCONFIG_SetWifiAutoPowerCtrl(*pHttpap_buf);             
1579   2      
1580   2                      goto HTTPAP_POST_WIFI_OK;               
1581   2              }       
1582   1              
1583   1      HTTPAP_POST_WIFI_ERR:   
1584   1              pHttpap_buf = HTTP_TmpBuf;
1585   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1586   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
1587   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
1588   1                                                                                               ,"WiFi settings validation error!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);    
1589   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);
1590   1              
1591   1              return HTTP_POST_ERR;
1592   1              
1593   1      HTTPAP_POST_WIFI_OK:    
1594   1              // Store configuration to flash ROM //
1595   1              GCONFIG_WriteConfigData();
1596   1                                      
1597   1              pHttpap_buf = HTTP_TmpBuf;
1598   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1599   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
1600   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
1601   1                                                                                               ,"WiFi settings validation ok!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);
1602   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);
1603   1              
1604   1              return HTTP_POST_ERR;
1605   1      } /* End of httpap_PostWiFiPage() */
*** WARNING C280 IN LINE 1476 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
1606          
1607          /*
1608           * ----------------------------------------------------------------------------
1609           * Function Name: httpap_GetSysMonitPage()
1610           * Purpose:
1611           * Params:
1612           * Returns:
1613           * Note:
1614           * ----------------------------------------------------------------------------
1615           */
1616          U8_T httpap_GetSysMonitPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
1617          {
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 28  

1618   1              U8_T *pTmp;
1619   1              U8_T *pbuf1 = HTTP_TmpBuf + 200;        
1620   1              
1621   1              pHttpap_buf = (U8_T *)(GCONFIG_GetDeviceName());
1622   1              httpap_tmp8 = strlen(pHttpap_buf);
1623   1              if (httpap_tmp8 > 16)
1624   1                      httpap_tmp8 = 16;
1625   1              memcpy(pbuf1, pHttpap_buf, httpap_tmp8);
1626   1              pbuf1[httpap_tmp8] = '\0';
1627   1              
1628   1              pHttpap_buf = HTTP_TmpBuf;
1629   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1630   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "<input type=\"hidden
             -\" id=\"device_all_status\" value=\"");// Build hidden element start //       
1631   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%s&", pbuf1);// Buil
             -d device name //
1632   1              pTmp = (U8_T*)&(STOE_GetIPAddr());      
1633   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%bu.%bu.%bu.%bu&"// 
             -Build local IP address //
1634   1                                                                                               ,pTmp[0],pTmp[1],pTmp[2],pTmp[3]);             
1635   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%s&", GCONFIG_VERSIO
             -N_STRING);// Build mcpu firmware version //
1636   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%s&", MWIFAPP_WiFiIn
             -fo.WcpuFwVersion);// Build wcpu firmware version //
1637   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "0x%08lx%02bx%02bx&"/
             -/ Build wcpu mac address //
1638   1                                                                                               ,*(U32_T*)(MWIFAPP_WiFiInfo.WcpuMAC), MWIFAPP_WiFiInfo.WcpuMAC[4], MWIFAPP_WiFiInfo.WcpuMAC[5]
             -);        
1639   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%bx&", HSUR2_GetMode
             -mStatus(1));// Build modem status //                                                                                   
1640   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%s&"// Build protoco
             -l type //        
1641   1                                                                                               ,(GCONFIG_GetNetwork() & GCONFIG_NETWORK_PROTO_TCP)?"TCP":"UDP");                                                                      
1642   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%s&"// Build connect
             -ion type //                        
1643   1                                                                                               ,(GS2W_GetTaskState() == GS2W_STATE_IDLE)?"Idle":"Connected");                                                                                                                                 
1644   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%lu&"// Build HUART 
             -TX byte counter //
1645   1                                                                                               ,(GS2W_CONN_UDP == GS2W_GetConnType())? GUDPDAT_GetTxBytes(0) : GTCPDAT_GetTxBytes(0));
1646   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%lu"// Build HUART R
             -X byte counter //
1647   1                                                                                               ,(GS2W_CONN_UDP == GS2W_GetConnType())? GUDPDAT_GetRxBytes(0) : GTCPDAT_GetRxBytes(0));
1648   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "\"/>");// Build hidd
             -en element end //     
1649   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, pConn->FileId, pConn);      
1650   1              return HTTP_POST_ERR;
1651   1      } /* End of httpap_GetSysMonitPage() */
*** WARNING C280 IN LINE 1616 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
1652          
1653          /* Add to support customers' application, end */
1654          
1655          /* End of httpdap.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  13385    ----
   CONSTANT SIZE    =    937    ----
   XDATA SIZE       =     62     171
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.01   HTTPDAP                                                               08/29/2011 15:28:02 PAGE 29  

   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  23 WARNING(S),  0 ERROR(S)
