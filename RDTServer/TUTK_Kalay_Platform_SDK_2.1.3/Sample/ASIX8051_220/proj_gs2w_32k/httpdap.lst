C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE HTTPDAP
OBJECT MODULE PLACED IN .\httpdap.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\src\web_page\httpdap.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X8020) INC
                    -DIR(..\src\main;..\src\mcpu;..\src\mswdma;..\src\uart0;..\src\mmstimer;..\src\mwif;..\src\madapter;..\src\mtcpip;..\src\
                    -mping;..\src\mpppoe;..\src\si2c;..\src\mdnsc;..\src\mconsole;..\src\mtelnet;..\src\meeprom;..\src\mmac;..\src\mdhcpc;..\
                    -src\mhttp;..\src\mgs2wifi;..\src\mhsuart;..\src\msmtpc;..\src\web_page;..\src\mdhcps;..\src\mdebug) DEFINE(RuntimeCodeAt
                    -32KH) VARBANKING DEBUG PRINT(.\httpdap.lst) OBJECT(.\httpdap.obj)

line level    source

   1          /*
   2           ******************************************************************************
   3           *     Copyright (c) 2010       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           ******************************************************************************
  10           */
  11           /*============================================================================
  12           * Module Name: httpdap.c
  13           * Purpose:
  14           * Author:
  15           * Date:
  16           * Notes:
  17           * $Log: httpdap.c,v $
  18           * no message
  19           *
  20           *=============================================================================
  21           */
  22          #define HTTPDAP_DEBUG   1
  23          #define HTTPDAP_ENABLE_AUTHORITY 0
  24          /* INCLUDE FILE DECLARATIONS */
  25          #include "httpdap.h"
  26          #include "httpdapi.h"
  27          #include "filesys.h"
  28          #include "ax22000.h"
  29          
  30          #include "mcpu.h"
  31          #include "printd.h"
  32          #include <string.h>
  33          #include "delay.h"
  34          #include "main.h"
  35          #include "gs2w.h"
  36          #include "gconfig.h"
  37          #if (INCLUDE_EVENT_DETECT)
              #include "gevent.h"
              #endif
  40          
  41          #include "gudpdat.h"
  42          #include "gtcpdat.h"
  43          #include "stoe.h"
  44          
  45          #include "mwioctl.h"
  46          #include "mwifapp.h"
  47          #include "hsuart2.h"
  48          #include "mstimer.h"
  49          /* NAMING CONSTANT DECLARATIONS */
  50          #define HTTPDAP_REBOOT_CMD              0x01
  51          #define HTTPDAP_RESTORE_CMD             0x02
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 2   

  52          #define HTTPDAP_FWUPGRADE_CMD   0x03
  53          
  54          /* GLOBAL VARIABLES DECLARATIONS */
  55          
  56          /* LOCAL VARIABLES DECLARATIONS */
  57          static U8_T *pHttpap_buf;
  58          static U8_T httpap_tmp8;
  59          static U16_T httpap_tmp16;
  60          static U32_T httpap_tmp32;
  61          
  62          static U16_T httpdap_AuthenTimerEvent = 0;
  63          
  64          HTTPDAP_INFO httpdap;
  65          /* NAMING CONSTANT DECLARATIONS */
  66          
  67          /* GLOBAL VARIABLES DECLARATIONS */
  68          
  69          /* LOCAL VARIABLES DECLARATIONS */
  70          
  71          /* LOCAL SUBPROGRAM DECLARATIONS */
  72          /* Add function declaration to support customers' application, start */
  73          U8_T httpap_GetElementValue(U8_T eid, U8_T **pVal);
  74          U8_T httpap_SetElementValue(U8_T eid, U8_T *pVal, U8_T ValLen);
  75          U8_T httpap_CheckElementUpdate(U8_T eid);
  76          U8_T httpap_CheckElementUpdateByName(U8_T *pEname);
  77          
  78          U8_T httpap_SecurityProcess(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  79          
  80          U8_T httpap_GetIndexPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  81          U8_T httpap_PostIndexPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  82          U8_T httpap_GetBasicPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  83          U8_T httpap_PostBasicPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  84          U8_T httpap_GetAdvancePage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  85          U8_T httpap_PostAdvancePage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  86          U8_T httpap_GetSecurityPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  87          U8_T httpap_PostSecurityPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  88          U8_T httpap_GetWiFiPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  89          U8_T httpap_PostWiFiPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  90          U8_T httpap_GetSysMonitPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo);
  91          /* Add function declaration to support customers' application, end */
  92          
  93          /*
  94           * ----------------------------------------------------------------------------
  95           * Function Name: HTTPAP_Init()
  96           * Purpose:
  97           * Params:
  98           * Returns:
  99           * Note:
 100           * ----------------------------------------------------------------------------
 101           */
 102          void HTTPAP_Init(HTTP_SERVER_INFO *pInfo)
 103          {
 104   1              pInfo->HomePage = FILE_INDEX;
 105   1      
 106   1              /* Add to support customers' application, start */
 107   1              memset((U8_T *)&httpdap, 0, sizeof(HTTPDAP_INFO));
 108   1              httpdap.AccIPOnOff = (GCONFIG_GetNetwork() & GCONFIG_NETWORK_ACC_IP_ENABLE) ? 1:0;
 109   1              
 110   1      #if HTTPDAP_ENABLE_AUTHORITY    
                      pInfo->HomePage = FILE_BSCSETTING;
              #endif
 113   1              /* Add to support customers' application, end */
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 3   

 114   1      
 115   1      } /* End of HTTPAP_Init() */
 116          
 117          /*
 118           * ----------------------------------------------------------------------------
 119           * Function Name: HTTPAP_ResponseComplete()
 120           * Purpose:
 121           * Params:
 122           * Returns:
 123           * Note:
 124           * ----------------------------------------------------------------------------
 125           */
 126          U8_T HTTPAP_ResponseComplete(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 127          {
 128   1              /* Add to support customers' application, start */
 129   1              if (pConn->FileId == FILE_SYSMSG)
 130   1              {
 131   2                      switch (httpdap.Cmd)
 132   2                      {
 133   3                      case HTTPDAP_REBOOT_CMD:
 134   3      #if HTTPDAP_DEBUG                       
 135   3                              printd("HTTPDAP: Device Reboot!!\n\r");
 136   3      #endif                  
 137   3                              DELAY_Ms(500);
 138   3                              MCPU_SoftReboot();
 139   3                      break;
 140   3                      
 141   3                      case HTTPDAP_RESTORE_CMD:
 142   3      #if HTTPDAP_DEBUG                       
 143   3                              printd("HTTPDAP: Restore and Reboot!!\n\r");
 144   3      #endif
 145   3                              GCONFIG_ReadDefaultConfigData();
 146   3                              GCONFIG_WriteConfigData();
 147   3                              DELAY_Ms(500);
 148   3                              MCPU_SoftReboot();
 149   3                      break;  
 150   3                      
 151   3                      case HTTPDAP_FWUPGRADE_CMD:
 152   3      #if HTTPDAP_DEBUG                       
 153   3                              printd("HTTPDAP: Upgrade\n\r");
 154   3      #endif                  
 155   3                              GCONFIG_EnableFirmwareUpgrade();
 156   3                              GCONFIG_WriteConfigData();              
 157   3                              MCPU_SoftReboot();
 158   3                      break;
 159   3                      
 160   3                      default:
 161   3                      break;
 162   3                      }
 163   2                      httpdap.Cmd = 0;        
 164   2              }
 165   1              
 166   1              /* Add to support customers' application, end */
 167   1              return HTTP_POST_OK;
 168   1      } /* End of HTTPAP_ResponseComplete() */
*** WARNING C280 IN LINE 126 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
 169          
 170          /*
 171           * ----------------------------------------------------------------------------
 172           * Function Name: HTTPAP_DivideHtmlFile()
 173           * Purpose:
 174           * Params:
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 4   

 175           * Returns:
 176           * Note:
 177           * ----------------------------------------------------------------------------
 178           */
 179          void HTTPAP_DivideHtmlFile(HTTP_SERVER_CONN *pConn, U8_T fileId)
 180          {
 181   1              /* Add to support customers' application, start */
 182   1      
 183   1              /* Add to support customers' application, end */
 184   1      
 185   1      } /* End of HTTPAP_DivideHtmlFile() */
*** WARNING C280 IN LINE 179 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
*** WARNING C280 IN LINE 179 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'fileId': unreferenced local variable
 186          
 187          /*
 188           * ----------------------------------------------------------------------------
 189           * Function Name: HTTPAP_SendMoreWebFragment()
 190           * Purpose:
 191           * Params:
 192           * Returns:
 193           * Note:
 194           * ----------------------------------------------------------------------------
 195           */
 196          void HTTPAP_SendMoreWebFragment(U8_T index, HTTP_SERVER_CONN *pConn)
 197          {
 198   1              /* Add to support customers' application, start */
 199   1      
 200   1              /* Add to support customers' application, end */
 201   1      
 202   1      } /* End of HTTPAP_SendMoreWebFragment() */
*** WARNING C280 IN LINE 196 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'index': unreferenced local variable
*** WARNING C280 IN LINE 196 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
 203          
 204          /*
 205           * ----------------------------------------------------------------------------
 206           * Function Name: HTTPAP_GetMethodProcess()
 207           * Purpose:
 208           * Params:
 209           * Returns:
 210           * Note:
 211           * ----------------------------------------------------------------------------
 212           */
 213          U8_T HTTPAP_GetMethodProcess(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 214          {
 215   1              /* Add to support customers' application, start */
 216   1              if (httpap_SecurityProcess(pConn, pInfo) == HTTP_POST_ERR)
 217   1                      return HTTP_POST_ERR;
 218   1                              
 219   1              switch (pConn->FileId)
 220   1              {
 221   2              case FILE_INDEX:
 222   2                      return (httpap_GetIndexPage(pConn, pInfo));
 223   2                      break;
 224   2              case FILE_BSCSETTING:
 225   2                      return (httpap_GetBasicPage(pConn, pInfo));
 226   2                      break;          
 227   2              case FILE_ADVSETTING:
 228   2                      return (httpap_GetAdvancePage(pConn, pInfo));   
 229   2                      break;          
 230   2              case FILE_SECURITY:
 231   2                      return (httpap_GetSecurityPage(pConn, pInfo));
 232   2                      break;          
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 5   

 233   2              case FILE_WIFISETTING:
 234   2                      return (httpap_GetWiFiPage(pConn, pInfo));      
 235   2                      break;
 236   2              case FILE_SYSMONITOR:
 237   2                      return (httpap_GetSysMonitPage(pConn, pInfo));  
 238   2                      break;          
 239   2              default:
 240   2                      break;  
 241   2              }
 242   1              /* Add to support customers' application, end */
 243   1              return HTTP_POST_OK;
 244   1      } /* End of HTTPAP_GetMethodProcess() */
 245          
 246          /*
 247           * ----------------------------------------------------------------------------
 248           * Function Name: HTTPAP_PostMethodPreParseProcess()
 249           * Purpose:
 250           * Params:
 251           * Returns:
 252           * Note:
 253           * ----------------------------------------------------------------------------
 254           */
 255          U8_T HTTPAP_PostMethodPreParseProcess(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 256          {
 257   1              /* Add to support customers' application, start */
 258   1      
 259   1              /* Add to support customers' application, end */
 260   1              return HTTP_POST_OK;
 261   1      } /* HTTPAP_PostMethodPreParseProcess() */
*** WARNING C280 IN LINE 255 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
*** WARNING C280 IN LINE 255 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
 262          
 263          /*
 264           * ----------------------------------------------------------------------------
 265           * Function Name: HTTPAP_PostMethodDeferParseProcess()
 266           * Purpose:
 267           * Params:
 268           * Returns:
 269           * Note:
 270           * ----------------------------------------------------------------------------
 271           */
 272          U8_T HTTPAP_PostMethodDeferParseProcess(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 273          {
 274   1              /* Add to support customers' application, start */
 275   1      
 276   1              /* Add to support customers' application, end */
 277   1              return HTTP_POST_OK;
 278   1      } /* HTTPAP_PostMethodDeferParseProcess() */
*** WARNING C280 IN LINE 272 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
*** WARNING C280 IN LINE 272 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
 279          
 280          /*
 281           * ----------------------------------------------------------------------------
 282           * Function Name: HTTPAP_PostMethodPreUpdateProcess()
 283           * Purpose:
 284           * Params:
 285           * Returns:
 286           * Note:
 287           * ----------------------------------------------------------------------------
 288           */
 289          U8_T HTTPAP_PostMethodPreUpdateProcess(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 290          {
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 6   

 291   1              /* Add to support customers' application, start */
 292   1      
 293   1              /* Add to support customers' application, end */
 294   1              return HTTP_POST_OK;
 295   1      } /* End of HTTPAP_PostMethodPreUpdateProcess() */
*** WARNING C280 IN LINE 289 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
*** WARNING C280 IN LINE 289 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
 296          
 297          /*
 298           * ----------------------------------------------------------------------------
 299           * Function Name: HTTPAP_PostMethodDeferProcess()
 300           * Purpose:
 301           * Params:
 302           * Returns:
 303           * Note:
 304           * ----------------------------------------------------------------------------
 305           */
 306          U8_T HTTPAP_PostMethodDeferProcess(U8_T postSuccessFlag, HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 307          {
 308   1              /* Add to support customers' application, start */
 309   1              if (postSuccessFlag == HTTP_POST_FAILURE)
 310   1                      return HTTP_POST_ERR;
 311   1              
 312   1              if (httpap_SecurityProcess(pConn, pInfo) == HTTP_POST_ERR)
 313   1                      return HTTP_POST_ERR;
 314   1                              
 315   1              switch (pConn->FileId)
 316   1              {
 317   2              case FILE_INDEX:
 318   2                      return (httpap_PostIndexPage(pConn, pInfo));
 319   2                      break;
 320   2              case FILE_BSCSETTING:
 321   2                      return (httpap_PostBasicPage(pConn, pInfo));
 322   2                      break;          
 323   2              case FILE_ADVSETTING:
 324   2                      return (httpap_PostAdvancePage(pConn, pInfo));  
 325   2                      break;          
 326   2              case FILE_SECURITY:
 327   2                      return (httpap_PostSecurityPage(pConn, pInfo));
 328   2                      break;          
 329   2              case FILE_WIFISETTING:
 330   2                      return (httpap_PostWiFiPage(pConn, pInfo));     
 331   2                      break;
 332   2              default:
 333   2                      break;  
 334   2              }
 335   1              /* Add to support customers' application, end */
 336   1              return HTTP_POST_ERR;
 337   1      
 338   1      } /* End of HTTPAP_PostMethodDeferProcess() */
 339          
 340          void DetectReset()
 341          {
 342   1              unsigned char val = P2_2;
 343   1              
 344   1              if(val == 0)
 345   1              {       
 346   2                      DELAY_Ms(150);
 347   2      
 348   2                      if(val == 0)
 349   2                      {
 350   3                              unsigned char val2;
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 7   

 351   3                              DELAY_Ms(3000);
 352   3                              val2 = P2_2;
 353   3                              if(val2 == 0)
 354   3                              {
 355   4                                      char tmpBuf[2];
 356   4                                      memset(tmpBuf, 0, 2);
 357   4                                      GCONFIG_SetSsid(tmpBuf, 1);
 358   4                                      GCONFIG_WriteConfigData();
 359   4                              }
 360   3                      }
 361   2              }
 362   1      }
 363          
 364          /*===========================================================================*/
 365          /*============== Functions Supplied by Customers' Application ===============*/
 366          /*===========================================================================*/
 367          /* Add to support customers' application, start */
 368          
 369          /*
 370           * ----------------------------------------------------------------------------
 371           * Function Name: HTTPAP_Task
 372           * Purpose:
 373           * Params:
 374           * Returns:
 375           * Note:
 376           * ----------------------------------------------------------------------------
 377           */
 378          void HTTPAP_Task(void)
 379          {
 380   1              U8_T i;
 381   1      
 382   1              if (httpdap_AuthenTimerEvent != (U16_T)SWTIMER_Tick())
 383   1              {
 384   2                      httpdap_AuthenTimerEvent = (U16_T)SWTIMER_Tick();       
 385   2                      for (i = 0; i < MAX_HTTP_CONNECT; i++)
 386   2                      {
 387   3                              if (httpdap.SecurityTimeExpired[i])
 388   3                                      httpdap.SecurityTimeExpired[i] --;
 389   3                      }
 390   2              }
 391   1      
 392   1              DetectReset();
 393   1      } /* End of HTTPAP_Task() */
 394          
 395          /*
 396           * ----------------------------------------------------------------------------
 397           * Function Name: httpap_GetElementValue()
 398           * Purpose: 
 399           * Params:
 400           * Returns:
 401           * Note:
 402           * ----------------------------------------------------------------------------
 403           */
 404          U8_T httpap_GetElementValue(U8_T eid, U8_T **pVal)
 405          {
 406   1              if (eid >= MAX_POST_RECORDS)
 407   1                      return 0;
 408   1      
 409   1              if (POST_Record[eid].PostType == POST_TYPE_TEXT || 
 410   1                      POST_Record[eid].PostType == POST_TYPE_TAG || 
 411   1                      POST_Record[eid].PostType == POST_TYPE_PASSWORD)
 412   1              {
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 8   

 413   2                      BUF_TEXT XDATA *pText = POST_Record[eid].PValue;        
 414   2                      *pVal = pText->CurrValue;
 415   2                      return (pText->CurrLength - 1);
 416   2              }
 417   1              else if (POST_Record[eid].PostType == POST_TYPE_SELECT)
 418   1              {
 419   2                      BUF_SELECT XDATA *pSelect = POST_Record[eid].PValue;
 420   2                      *pVal = &(pSelect->CurrentSet);
 421   2                      return 1;
 422   2              }
 423   1      #if (MAX_POST_BUF_RADIO)
 424   1              else if (POST_Record[eid].PostType == POST_TYPE_RADIO)
 425   1              {
 426   2                      BUF_RADIO XDATA *pRadio = POST_Record[eid].PValue;
 427   2                      *pVal = &(pRadio->CurrentSet);
 428   2                      return 1;
 429   2              }
 430   1      #endif          
 431   1              else if (POST_Record[eid].PostType == POST_TYPE_SUBMIT)
 432   1              {
 433   2                      BUF_SUBMIT XDATA *pSubmit = POST_Record[eid].PValue;    
 434   2                      *pVal = pSubmit->Value;
 435   2                      return (pSubmit->DefaultVlaueLen);
 436   2              }                       
 437   1              return 0; /* element type not support */
 438   1                      
 439   1      } /* End of httpap_GetElementValue() */
 440          
 441          /*
 442           * ----------------------------------------------------------------------------
 443           * Function Name: httpap_SetElementValue()
 444           * Purpose: 
 445           * Params:
 446           * Returns:
 447           * Note:
 448           * ----------------------------------------------------------------------------
 449           */
 450          U8_T httpap_SetElementValue(U8_T eid, U8_T *pVal, U8_T ValLen)
 451          {
 452   1              if (eid >= MAX_POST_RECORDS)
 453   1                      return HTTPAPI_ERR;
 454   1              
 455   1              if (POST_Record[eid].PostType == POST_TYPE_TEXT || 
 456   1                      POST_Record[eid].PostType == POST_TYPE_TAG || 
 457   1                      POST_Record[eid].PostType == POST_TYPE_PASSWORD)
 458   1              {
 459   2                      BUF_TEXT XDATA *pText = POST_Record[eid].PValue;        
 460   2                      memcpy(pText->CurrValue, pVal, ValLen);         
 461   2                      pText->CurrValue[ValLen] = '"';
 462   2                      pText->CurrLength = ValLen + 1;         
 463   2                      return POST_Record[eid].PostType;
 464   2              }
 465   1              else if (POST_Record[eid].PostType == POST_TYPE_SELECT)
 466   1              {
 467   2                      BUF_SELECT XDATA *pSelect = POST_Record[eid].PValue;            
 468   2                      if (*pVal < pSelect->Count)
 469   2                              pSelect->CurrentSet = *pVal;            
 470   2                      else
 471   2                              pSelect->CurrentSet = pSelect->Count-1;
 472   2      
 473   2                      return POST_Record[eid].PostType;
 474   2              }
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 9   

 475   1      #if (MAX_POST_BUF_RADIO)
 476   1              else if (POST_Record[eid].PostType == POST_TYPE_RADIO)
 477   1              {
 478   2                      BUF_RADIO XDATA *pRadio = POST_Record[eid].PValue;
 479   2                      if (*pVal < pRadio->Count)
 480   2                              pRadio->CurrentSet = *pVal;             
 481   2                      else
 482   2                              pRadio->CurrentSet = pRadio->Count-1;
 483   2                      return POST_Record[eid].PostType;
 484   2              }
 485   1      #endif
 486   1              return HTTPAPI_ERR; /* element type not support */
 487   1      } /* End of httpap_SetElementValue() */
 488          
 489          /*
 490           * ----------------------------------------------------------------------------
 491           * Function Name: U8_T httpap_CheckElementUpdate()
 492           * Purpose: 
 493           * Params:
 494           * Returns:
 495           * Note:
 496           * ----------------------------------------------------------------------------
 497           */
 498          U8_T httpap_CheckElementUpdate(U8_T eid)
 499          {
 500   1              U8_T i;
 501   1              
 502   1              if (HTTP_PostCount == 0)
 503   1                      return HTTPAPI_ERR;
 504   1                      
 505   1              for (i = 0; i < HTTP_PostCount; i++)
 506   1              {
 507   2                      if (HTTP_PostTable[i] == eid)
 508   2                              return i;
 509   2              }
 510   1              return HTTPAPI_ERR;
 511   1      } /* End of httpap_CheckElementUpdate() */
 512          
 513          /*
 514           * ----------------------------------------------------------------------------
 515           * Function Name: U8_T httpap_CheckElementUpdateByName()
 516           * Purpose: 
 517           * Params:
 518           * Returns:
 519           * Note:
 520           * ----------------------------------------------------------------------------
 521           */
 522          U8_T httpap_CheckElementUpdateByName(U8_T *pEname)
 523          {
 524   1              U8_T i;
 525   1              
 526   1              if (HTTP_PostCount == 0)
 527   1                      return HTTPAPI_ERR;
 528   1                      
 529   1              for (i = 0; i < HTTP_PostCount; i++)
 530   1              {
 531   2                      if ((strlen(pEname) == POST_Record[HTTP_PostTable[i]].NameLen) && 
 532   2                              memcmp(pEname, POST_Record[HTTP_PostTable[i]].Name, POST_Record[HTTP_PostTable[i]].NameLen) == 0)
 533   2                              return i;
 534   2              }
 535   1              return HTTPAPI_ERR;
 536   1      } /* End of httpap_CheckElementUpdateByName() */
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 10  

 537          
 538          /*
 539           * ----------------------------------------------------------------------------
 540           * Function Name: httpap_SecurityProcess()
 541           * Purpose:
 542           * Params:
 543           * Returns:
 544           * Note:
 545           * ----------------------------------------------------------------------------
 546           */
 547          U8_T httpap_SecurityProcess(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 548          {
 549   1              /* Add to support customers' application, start */
 550   1              U8_T i;
 551   1      #if HTTPDAP_ENABLE_AUTHORITY    
                      U8_T *pUsername, *pPassword, *pbuf1, *pbuf2;
              #endif
 554   1      
 555   1              // accessible IP process //
 556   1              if (httpdap.AccIPOnOff)
 557   1              {
 558   2                      for (i = 0; i < GCONFIG_ACCESSIBLE_IP_NUM; i ++)
 559   2                      {
 560   3                              GCONFIG_GetAccessibleIP(i,&httpap_tmp32);
 561   3                              if (httpap_tmp32 == 0)
 562   3                                      continue;
 563   3                              if (pConn->Ip == httpap_tmp32)
 564   3                                      break;
 565   3                      }
 566   2                      
 567   2                      if (i == GCONFIG_ACCESSIBLE_IP_NUM)
 568   2                      {
 569   3                              pHttpap_buf = HTTP_TmpBuf;
 570   3                              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
 571   3                              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"Unacces
             -sible!");
 572   3                              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
 573   3                              return HTTP_POST_ERR;
 574   3                      }
 575   2              }
 576   1                      
 577   1      #if HTTPDAP_ENABLE_AUTHORITY
                      //===================== RFC 2617 support ======================= //
                      if (HTTPAPI_ParseAuthenHeader(HTTP_TmpBuf, pInfo->pRequestBuf, &pUsername, &pPassword) == HTTPAPI_ERR)
                      {
              #if HTTPDAP_DEBUG               
                              printd("HTTPDAP: Authenication header not found\r\n");          
              #endif
              HTTPDAP_AUTHORITY_REQUST:       
              #if (INCLUDE_EVENT_DETECT)
                              GEVENT_SetAuthFailEvent(1);// Add for authentication fail detect //
              #endif
                              HTTPAPI_ResponseAuthenMessage(HTTP_TmpBuf, "Please enter username and password", pConn);
                              return HTTP_POST_ERR;
                      }
                      else
              #if HTTPDAP_DEBUG
                              printd("HTTPDAP: header is found, user name is %s, password is %s\r\n", pUsername, pPassword);          
              #endif  
                      // get uername and password for reference //
                      pbuf1 = HTTP_TmpBuf+100;
                      pbuf2 = HTTP_TmpBuf+150;        
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 11  

                      GCONFIG_GetAdmin(pbuf1, pbuf2, &i);
                      
                      // check username //
                      if (strlen(pUsername) != strlen(pbuf1) || strcmp(pUsername,pbuf1))
                      {
                              goto HTTPDAP_AUTHORITY_REQUST;
                      }
                      // check password //
                      if (strlen(pPassword) != strlen(pbuf2) || strcmp(pPassword,pbuf2))
                      {
                              goto HTTPDAP_AUTHORITY_REQUST;
                      }
                      
                      httpap_tmp16 = 0xffff;
                      for (i = 0; i < MAX_HTTP_CONNECT; i++)
                      {
                              // found the empty security slot //
                              if (httpdap.SecurityTimeExpired[i] == 0)
                              {
                                      httpdap.SecurityTimeExpired[i] = 0xffff;
                                      httpdap.SecurityRemoteIP[i] = pConn->Ip;                        
                                      break;
                              }
                              
                              // found a slot is not most commonly used //
                              if (httpap_tmp16 > httpdap.SecurityTimeExpired[i])
                              {
                                      httpap_tmp16 = httpdap.SecurityTimeExpired[i];
                                      httpap_tmp8 = i;
                              }
                      }
                      if (i == MAX_HTTP_CONNECT)
                      {
                              httpdap.SecurityTimeExpired[httpap_tmp8] = 0xffff;
                              httpdap.SecurityRemoteIP[httpap_tmp8] = pConn->Ip;
                      }
              #else 
 635   1              //==================== Web page authentication support =======================//
 636   1              if (pConn->FileId != pInfo->HomePage)
 637   1              {
 638   2                      for (i = 0; i < MAX_HTTP_CONNECT; i++)
 639   2                      {
 640   3                              if (httpdap.SecurityRemoteIP[i] == pConn->Ip)
 641   3                                      break;
 642   3                      }
 643   2                      
 644   2                      if (i == MAX_HTTP_CONNECT || httpdap.SecurityTimeExpired[i] == 0)
 645   2                      {
 646   3                              printd("HTTPDAP: redirect to home page\r\n");
 647   3                              HTTPAPI_ResponseRedirectMesssge(HTTP_TmpBuf, pInfo->HomePage, pConn);   
 648   3                              return HTTP_POST_ERR;   
 649   3                      }
 650   2                      
 651   2                      httpdap.SecurityTimeExpired[i] = 0xffff;// fill a new security time-expired //
 652   2              }
 653   1      #endif
 654   1              /* Add to support customers' application, end */
 655   1              return HTTP_POST_OK;
 656   1      } /* httpap_SecurityProcess() */
 657          
 658          /*
 659           * ----------------------------------------------------------------------------
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 12  

 660           * Function Name: httpap_GetIndexPage()
 661           * Purpose:
 662           * Params:
 663           * Returns:
 664           * Note:
 665           * ----------------------------------------------------------------------------
 666           */
 667          U8_T httpap_GetIndexPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 668          {
 669   1      #if HTTPDAP_ENABLE_AUTHORITY
                      pHttpap_buf = HTTP_TmpBuf;
                      httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"Logout");
                      HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
                      return HTTP_POST_ERR;/* EXTERNAL DROP */
              #else
 676   1              U8_T i;
 677   1              
 678   1              for (i=0; i < MAX_HTTP_CONNECT; i++)
 679   1              {
 680   2                      if (httpdap.SecurityRemoteIP[i] == pConn->Ip)
 681   2                      {
 682   3                              httpdap.SecurityTimeExpired[i] = 0;             
 683   3                              break;
 684   3                      }
 685   2              }
 686   1      
 687   1      #endif  
 688   1              return HTTP_POST_OK;
 689   1      } /* End of httpap_GetIndexPage() */
*** WARNING C280 IN LINE 667 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
 690          
 691          /*
 692           * ----------------------------------------------------------------------------
 693           * Function Name: httpap_PostIndexPage()
 694           * Purpose:
 695           * Params:
 696           * Returns:
 697           * Note:
 698           * ----------------------------------------------------------------------------
 699           */
 700          U8_T httpap_PostIndexPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 701          {
 702   1              U8_T i, j;
 703   1              U8_T *pTmp, XDATA *pbuf1, XDATA *pbuf2;
 704   1      
 705   1              if (httpap_CheckElementUpdate(RECORD_TEXT_username) != HTTPAPI_ERR &&
 706   1                      httpap_CheckElementUpdate(RECORD_PASSWORD_password) != HTTPAPI_ERR)
 707   1              {
 708   2                      // get uername and password for reference //
 709   2                      pbuf1 = HTTP_TmpBuf;
 710   2                      pbuf2 = HTTP_TmpBuf + 100;              
 711   2                      GCONFIG_GetAdmin(pbuf1, pbuf2, &i);
 712   2                              
 713   2                      // check username //
 714   2                      i = httpap_GetElementValue(RECORD_TEXT_username, &pTmp);
 715   2                      j = strlen(pbuf1);
 716   2                      if (i != j || memcmp(pbuf1, pTmp, j))
 717   2                      {
 718   3                              goto HTTPAP_INDEX_POST_ERR;
 719   3                      }
 720   2                              
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 13  

 721   2                      // check password //
 722   2                      i =     httpap_GetElementValue(RECORD_PASSWORD_password, &pTmp);
 723   2                      j = strlen(pbuf2);
 724   2                      if (i != j || memcmp(pbuf2, pTmp, j))
 725   2                      {
 726   3                              goto HTTPAP_INDEX_POST_ERR;
 727   3                      }
 728   2                      httpap_tmp16 = 0xffff;
 729   2                      for (i = 0; i < MAX_HTTP_CONNECT; i++)
 730   2                      {
 731   3                              // found the empty security slot //
 732   3                              if (httpdap.SecurityTimeExpired[i] == 0)
 733   3                              {
 734   4                                      httpdap.SecurityTimeExpired[i] = 0xffff;
 735   4                                      httpdap.SecurityRemoteIP[i] = pConn->Ip;                        
 736   4                                      break;
 737   4                              }
 738   3                      
 739   3                              // found a slot is not most commonly used //
 740   3                              if (httpap_tmp16 > httpdap.SecurityTimeExpired[i])
 741   3                              {
 742   4                                      httpap_tmp16 = httpdap.SecurityTimeExpired[i];
 743   4                                      httpap_tmp8 = i;
 744   4                              }
 745   3                      }
 746   2                      if (i == MAX_HTTP_CONNECT)
 747   2                      {
 748   3                              httpdap.SecurityTimeExpired[httpap_tmp8] = 0xffff;
 749   3                              httpdap.SecurityRemoteIP[httpap_tmp8] = pConn->Ip;                      
 750   3                      }
 751   2                      goto HTTPAP_INDEX_POST_OK;
 752   2              }
 753   1      
 754   1      HTTPAP_INDEX_POST_ERR:
 755   1      #if (INCLUDE_EVENT_DETECT)
                      GEVENT_SetAuthFailEvent(1);// Add for authentication fail detect //
              #endif  
 758   1              pHttpap_buf = HTTP_TmpBuf;
 759   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
 760   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
 761   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
 762   1                                                                                               ,"Username or Password error",2,"sec","off",FSYS_Manage[pConn->FileId].FName);
 763   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
 764   1              return HTTP_POST_ERR;
 765   1                      
 766   1      HTTPAP_INDEX_POST_OK:   
 767   1              HTTPAPI_ResponseRedirectMesssge(HTTP_TmpBuf, FILE_BSCSETTING, pConn);// re-direction to basic page //
 768   1              return HTTP_POST_ERR;
 769   1                              
 770   1      } /* End of httpap_PostIndexPage() */
*** WARNING C280 IN LINE 700 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
 771          
 772          /*
 773           * ----------------------------------------------------------------------------
 774           * Function Name: httpap_GetBasicPage()
 775           * Purpose:
 776           * Params:
 777           * Returns:
 778           * Note:
 779           * ----------------------------------------------------------------------------
 780           */
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 14  

 781          U8_T httpap_GetBasicPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 782          {
 783   1              /* Load device name */
 784   1              pHttpap_buf = (U8_T *)(GCONFIG_GetDeviceName());
 785   1              httpap_tmp8 = strlen(pHttpap_buf);
 786   1              if (httpap_tmp8 > 16)
 787   1                      httpap_tmp8 = 16;
 788   1              httpap_SetElementValue(RECORD_TEXT_dsm_name, pHttpap_buf, httpap_tmp8); 
 789   1              
 790   1              /* Load serial setting */
 791   1              httpap_tmp16 = GCONFIG_GetSerialPort();
 792   1      
 793   1              httpap_tmp8 = ((httpap_tmp16 & 0xF800) >> 11);
 794   1              httpap_SetElementValue(RECORD_SELECT_dbr, &httpap_tmp8, 1);
 795   1      
 796   1              httpap_tmp8 = ((httpap_tmp16 & 0x0700) >> 8);
 797   1              httpap_SetElementValue(RECORD_SELECT_data, &httpap_tmp8, 1);
 798   1      
 799   1              httpap_tmp8 = ((httpap_tmp16 & 0x00E0) >> 5);
 800   1              httpap_SetElementValue(RECORD_SELECT_parity, &httpap_tmp8, 1);
 801   1      
 802   1              httpap_tmp8 = ((httpap_tmp16 & 0x0003));
 803   1              httpap_SetElementValue(RECORD_SELECT_stop, &httpap_tmp8, 1);
 804   1      
 805   1              httpap_tmp8 = ((httpap_tmp16 & 0x0001C) >> 2);
 806   1              httpap_SetElementValue(RECORD_SELECT_flow, &httpap_tmp8, 1);
 807   1      
 808   1              /* Load DHCP/Connection type/Connection mode/Accessiable control */
 809   1              httpap_tmp16 = GCONFIG_GetNetwork();
 810   1              
 811   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_NETWORK_DHCP_ENABLE) ? 1 : 0;
 812   1              httpap_SetElementValue(RECORD_SELECT_dhcp, &httpap_tmp8, 1);
 813   1              
 814   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_NETWORK_PROTO_TCP) ? 0 : 1;
 815   1              httpap_SetElementValue(RECORD_SELECT_conntype, &httpap_tmp8, 1);
 816   1                      
 817   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_NETWORK_CLIENT) ? 1 : 0;
 818   1              httpap_SetElementValue(RECORD_SELECT_cs_mode, &httpap_tmp8, 1);
 819   1      
 820   1              /* Load IP address */
 821   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetServerStaticIP(), HTTP_TmpBuf);
 822   1              httpap_SetElementValue(RECORD_TEXT_static_ip, HTTP_TmpBuf, httpap_tmp8);
 823   1                      
 824   1              /* Load subnet mask */
 825   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetNetmask(), HTTP_TmpBuf);
 826   1              httpap_SetElementValue(RECORD_TEXT_mask, HTTP_TmpBuf, httpap_tmp8);
 827   1                      
 828   1              /* Load gateway */
 829   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetGateway(), HTTP_TmpBuf);
 830   1              httpap_SetElementValue(RECORD_TEXT_gateway_ip, HTTP_TmpBuf, httpap_tmp8);
 831   1      
 832   1              /* Load DNS */
 833   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetDNS(), HTTP_TmpBuf);
 834   1              httpap_SetElementValue(RECORD_TEXT_dns_ip, HTTP_TmpBuf, httpap_tmp8);
 835   1      
 836   1              /* Load server listen port */
 837   1              httpap_tmp8 = HTTPAPI_Short2Str(GCONFIG_GetServerDataPktListenPort(), HTTP_TmpBuf);
 838   1              httpap_SetElementValue(RECORD_TEXT_s_lstport, HTTP_TmpBuf, httpap_tmp8);
 839   1      
 840   1              /* Load transmit timer */
 841   1              httpap_tmp8 = HTTPAPI_Short2Str(GCONFIG_GetEthernetTxTimer(), HTTP_TmpBuf);
 842   1              httpap_SetElementValue(RECORD_TEXT_txtimer, HTTP_TmpBuf, httpap_tmp8);
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 15  

 843   1      
 844   1              /* Load destination port */
 845   1              httpap_tmp8 = HTTPAPI_Short2Str(GCONFIG_GetClientDestPort(), HTTP_TmpBuf);
 846   1              httpap_SetElementValue(RECORD_TEXT_c_desport, HTTP_TmpBuf, httpap_tmp8);
 847   1      
 848   1              /* Load Destination host name */
 849   1              httpap_tmp8 = GCONFIG_GetDestHostName(HTTP_TmpBuf);
 850   1              httpap_SetElementValue(RECORD_TEXT_c_deshn, HTTP_TmpBuf, httpap_tmp8);
 851   1              
 852   1              /* Load rs485 control bits */
 853   1              httpap_tmp8 = GCONFIG_GetRs485Mode();
 854   1              httpap_SetElementValue(RECORD_SELECT_rs485, &httpap_tmp8, 1);
 855   1                      
 856   1              return HTTP_POST_OK;
 857   1      } /* End of httpap_GetBasicPage() */
*** WARNING C280 IN LINE 781 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
*** WARNING C280 IN LINE 781 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
 858          
 859          /*
 860           * ----------------------------------------------------------------------------
 861           * Function Name: httpap_PostBasicPage()
 862           * Purpose:
 863           * Params:
 864           * Returns:
 865           * Note:
 866           * ----------------------------------------------------------------------------
 867           */
 868          U8_T httpap_PostBasicPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
 869          {
 870   1              
 871   1              if (httpap_CheckElementUpdateByName("reboot") != HTTPAPI_ERR)
 872   1              {
 873   2                      httpdap.Cmd = HTTPDAP_REBOOT_CMD;
 874   2              
 875   2                      httpap_tmp8 = (GCONFIG_GetNetwork() & GCONFIG_NETWORK_DHCP_ENABLE) ? 20 : 15;//select delay time for DHC
             -P enable or disable. //                       
 876   2                      
 877   2                      pHttpap_buf = HTTP_TmpBuf;
 878   2                      httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);          
 879   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%
             -s&%s&%s"
 880   2                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
 881   2                                                                                               ,"Device reboot! please Wait",httpap_tmp8,"sec","on",FSYS_Manage[pInfo->HomePage].FName);                      
 882   2                      HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                
 883   2                      return HTTP_POST_ERR;           
 884   2              }
 885   1              else if (httpap_CheckElementUpdateByName("restore") != HTTPAPI_ERR)
 886   1              {
 887   2                      httpdap.Cmd = HTTPDAP_RESTORE_CMD;      
 888   2                      
 889   2                      pHttpap_buf = HTTP_TmpBuf;
 890   2                      httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);          
 891   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%
             -s&%s&%s"
 892   2                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
 893   2                                                                                               ,"Device restore! please Wait",20,"sec","on",FSYS_Manage[pInfo->HomePage].FName);                      
 894   2                      HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                
 895   2                      return HTTP_POST_ERR;           
 896   2              }
 897   1                                              
 898   1              if (httpap_CheckElementUpdate(RECORD_TEXT_dsm_name) != HTTPAPI_ERR && 
 899   1                      httpap_CheckElementUpdate(RECORD_TEXT_c_desport) != HTTPAPI_ERR)
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 16  

 900   1              {
 901   2                      // Save device name //
 902   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_dsm_name, &pHttpap_buf);
 903   2                      memcpy(HTTP_TmpBuf,pHttpap_buf,httpap_tmp8);
 904   2                      memset(HTTP_TmpBuf+httpap_tmp8, 0 , 16-httpap_tmp8);// To fill the unused data with terminal char('\0').
             -                
 905   2                      GCONFIG_SetDeviceName((GCONFIG_DEV_NAME*)HTTP_TmpBuf);
 906   2                              
 907   2                      // Save serial setting //
 908   2                      httpap_tmp16 = GCONFIG_GetSerialPort();
 909   2                      httpap_GetElementValue(RECORD_SELECT_dbr, &pHttpap_buf);
 910   2                      httpap_tmp16 = (httpap_tmp16 & (~0xF800)) | (*pHttpap_buf << 11);
 911   2              
 912   2                      httpap_GetElementValue(RECORD_SELECT_data, &pHttpap_buf);
 913   2                      httpap_tmp16 = (httpap_tmp16 & (~0x0700)) | (*pHttpap_buf << 8);
 914   2      
 915   2                      httpap_GetElementValue(RECORD_SELECT_parity, &pHttpap_buf);
 916   2                      httpap_tmp16 = (httpap_tmp16 & (~0x00E0)) | (*pHttpap_buf << 5);
 917   2              
 918   2                      httpap_GetElementValue(RECORD_SELECT_stop, &pHttpap_buf);
 919   2                      httpap_tmp16 = (httpap_tmp16 & (~0x0003)) | *pHttpap_buf;
 920   2      
 921   2                      httpap_GetElementValue(RECORD_SELECT_flow, &pHttpap_buf);
 922   2                      httpap_tmp16 = (httpap_tmp16 & (~0x001C)) | (*pHttpap_buf << 2);
 923   2                      GCONFIG_SetSerialPort(httpap_tmp16);
 924   2              
 925   2                      // Save DHCP/Connection type/Connection mode //
 926   2                      httpap_tmp16 = GCONFIG_GetNetwork();
 927   2                      httpap_GetElementValue(RECORD_SELECT_dhcp, &pHttpap_buf);
 928   2                      httpap_tmp16 = (httpap_tmp16 & 0xBFFF) | (*pHttpap_buf << 14);
 929   2              
 930   2                      httpap_GetElementValue(RECORD_SELECT_conntype, &pHttpap_buf);
 931   2                      httpap_tmp16 = httpap_tmp16 & 0xF3FF;
 932   2                      if (*pHttpap_buf)       
 933   2                              httpap_tmp16 |= 0x0800;//UDP mode
 934   2                      else            
 935   2                              httpap_tmp16 |= 0x0400;//TCP mode
 936   2                              
 937   2                      httpap_GetElementValue(RECORD_SELECT_cs_mode, &pHttpap_buf);
 938   2                      httpap_tmp16 = (httpap_tmp16 & 0x7FFF) | (*pHttpap_buf << 15);
 939   2                      GCONFIG_SetNetwork(httpap_tmp16);
 940   2      
 941   2                      // Save IP address //
 942   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_static_ip, &pHttpap_buf);
 943   2                      GCONFIG_SetServerStaticIP(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));
 944   2      
 945   2                      // Save subnet mask //
 946   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_mask, &pHttpap_buf);
 947   2                      GCONFIG_SetNetmask(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));
 948   2                      
 949   2                      // Save gateway //
 950   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_gateway_ip, &pHttpap_buf);
 951   2                      GCONFIG_SetGateway(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));
 952   2      
 953   2                      // Save DNS //
 954   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_dns_ip, &pHttpap_buf);
 955   2                      GCONFIG_SetDNS(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));
 956   2      
 957   2                      // Save server listen port //
 958   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_s_lstport, &pHttpap_buf);
 959   2                      GCONFIG_SetServerDataPktListenPort(HTTPAPI_Str2Short(pHttpap_buf, httpap_tmp8));
 960   2      
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 17  

 961   2                      // Save transmit timer //
 962   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_txtimer, &pHttpap_buf);
 963   2                      GCONFIG_SetEthernetTxTimer(HTTPAPI_Str2Short(pHttpap_buf, httpap_tmp8));
 964   2              
 965   2                      // Save destination port //
 966   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_c_desport, &pHttpap_buf);
 967   2                      GCONFIG_SetClientDestPort(HTTPAPI_Str2Short(pHttpap_buf, httpap_tmp8));
 968   2              
 969   2                      // Save Destination host name //
 970   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_c_deshn, &pHttpap_buf);
 971   2                      GCONFIG_SetDestHostName(pHttpap_buf, httpap_tmp8);
 972   2      
 973   2                      // Save rs485 control bits //
 974   2                      httpap_GetElementValue(RECORD_SELECT_rs485, &pHttpap_buf);
 975   2                      GCONFIG_SetRs485Mode(*pHttpap_buf);
 976   2                      
 977   2                      goto HTTPAP_POST_BASIC_OK;
 978   2              }
 979   1      
 980   1      //HTTPAP_POST_BASIC_ERR:        
 981   1              pHttpap_buf = HTTP_TmpBuf;
 982   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
 983   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
 984   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
 985   1                                                                                               ,"Basic settings validation error!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);
 986   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
 987   1              return HTTP_POST_ERR;   
 988   1      
 989   1      HTTPAP_POST_BASIC_OK:   
 990   1              // Store configuration to flash ROM //
 991   1              GCONFIG_WriteConfigData();      
 992   1                      
 993   1              pHttpap_buf = HTTP_TmpBuf;
 994   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
 995   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
 996   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
 997   1                                                                                               ,"Basic settings validation ok!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);
 998   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
 999   1              return HTTP_POST_ERR;   
1000   1                                                                                                              
1001   1      } /* End of httpap_PostBasicPage() */
1002          
1003          /*
1004           * ----------------------------------------------------------------------------
1005           * Function Name: httpap_GetAdvancePage()
1006           * Purpose:
1007           * Params:
1008           * Returns:
1009           * Note:
1010           * ----------------------------------------------------------------------------
1011           */
1012          U8_T httpap_GetAdvancePage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
1013          {
1014   1              /* Load TFTP IP addr */
1015   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetTftpServerIp(), HTTP_TmpBuf);
1016   1              httpap_SetElementValue(RECORD_TEXT_tftps_ip, HTTP_TmpBuf, httpap_tmp8);
1017   1              
1018   1              /* Load TFTP File name */
1019   1              GCONFIG_GetFilename(HTTP_TmpBuf, 128);
1020   1              httpap_tmp8 = strlen(HTTP_TmpBuf);
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 18  

1021   1              httpap_SetElementValue(RECORD_TEXT_file_name, HTTP_TmpBuf, httpap_tmp8);
1022   1      
1023   1              /* Load SMTP Domain name */
1024   1              httpap_tmp8 = GCONFIG_GetSMTPDomainName(HTTP_TmpBuf);
1025   1              httpap_SetElementValue(RECORD_TEXT_email_addr, HTTP_TmpBuf, httpap_tmp8);
1026   1              
1027   1              /* Load SMTP From addr */
1028   1              httpap_tmp8 = GCONFIG_GetSMTPFrom(HTTP_TmpBuf);
1029   1              httpap_SetElementValue(RECORD_TEXT_email_from, HTTP_TmpBuf, httpap_tmp8);
1030   1              
1031   1              /* Load SMTP To1 addr */
1032   1              httpap_tmp8 = GCONFIG_GetSMTPTo1(HTTP_TmpBuf);
1033   1              httpap_SetElementValue(RECORD_TEXT_email_to1, HTTP_TmpBuf, httpap_tmp8);
1034   1              
1035   1              /* Load SMTP To2 addr */
1036   1              httpap_tmp8 = GCONFIG_GetSMTPTo2(HTTP_TmpBuf);
1037   1              httpap_SetElementValue(RECORD_TEXT_email_to2, HTTP_TmpBuf, httpap_tmp8);
1038   1              
1039   1              /* Load SMTP To3 addr */
1040   1              httpap_tmp8 = GCONFIG_GetSMTPTo3(HTTP_TmpBuf);
1041   1              httpap_SetElementValue(RECORD_TEXT_email_to3, HTTP_TmpBuf, httpap_tmp8);
1042   1      
1043   1              /* Load Auto Warning enable bits */
1044   1              httpap_tmp16 = GCONFIG_GetAutoWarning();
1045   1              
1046   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_SMTP_EVENT_COLDSTART) ? 1 : 0;
1047   1              httpap_SetElementValue(RECORD_SELECT_coldstart, &httpap_tmp8, 1);
1048   1                                              
1049   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_SMTP_EVENT_AUTH_FAIL) ? 1 : 0;
1050   1              httpap_SetElementValue(RECORD_SELECT_authfail, &httpap_tmp8, 1);
1051   1                      
1052   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_SMTP_EVENT_IP_CHANGED) ? 1 : 0;
1053   1              httpap_SetElementValue(RECORD_SELECT_ipchg, &httpap_tmp8, 1);
1054   1                      
1055   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_SMTP_EVENT_PSW_CHANGED) ? 1 : 0;
1056   1              httpap_SetElementValue(RECORD_SELECT_pswchg, &httpap_tmp8, 1);
1057   1                              
1058   1              /* Load DHCP server status */
1059   1              httpap_tmp8 = GCONFIG_GetDhcpSrvStatus() ? 1 : 0;
1060   1              httpap_SetElementValue(RECORD_RADIO_dhcps_onoff, &httpap_tmp8, 1);
1061   1                      
1062   1              /* Load DHCP server IP pool start address */
1063   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetDhcpSrvStartIp(), HTTP_TmpBuf);
1064   1              httpap_SetElementValue(RECORD_TEXT_dhcps_startip, HTTP_TmpBuf, httpap_tmp8);
1065   1              
1066   1              /* Load DHCP server IP pool end address */              
1067   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetDhcpSrvEndIp(), HTTP_TmpBuf);
1068   1              httpap_SetElementValue(RECORD_TEXT_dhcps_endip, HTTP_TmpBuf, httpap_tmp8);
1069   1              
1070   1              /* Load DHCP server default gateway */          
1071   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetDhcpSrvDefGateway(), HTTP_TmpBuf);
1072   1              httpap_SetElementValue(RECORD_TEXT_dhcps_gateway, HTTP_TmpBuf, httpap_tmp8);    
1073   1              
1074   1              /* Load DHCP server netmask */          
1075   1              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(GCONFIG_GetDhcpSrvNetmask(), HTTP_TmpBuf);
1076   1              httpap_SetElementValue(RECORD_TEXT_dhcps_mask, HTTP_TmpBuf, httpap_tmp8);       
1077   1              return HTTP_POST_OK;
1078   1      } /* End of httpap_GetAdvancePage() */
*** WARNING C280 IN LINE 1012 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
*** WARNING C280 IN LINE 1012 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
1079          
1080          /*
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 19  

1081           * ----------------------------------------------------------------------------
1082           * Function Name: httpap_PostAdvancePage()
1083           * Purpose:
1084           * Params:
1085           * Returns:
1086           * Note:
1087           * ----------------------------------------------------------------------------
1088           */
1089          U8_T httpap_PostAdvancePage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
1090          {
1091   1              if (httpap_CheckElementUpdate(RECORD_TEXT_tftps_ip) != HTTPAPI_ERR && 
1092   1                      httpap_CheckElementUpdate(RECORD_TEXT_file_name) != HTTPAPI_ERR)
1093   1              {
1094   2                      // Save TFTP IP addr //
1095   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_tftps_ip, &pHttpap_buf);
1096   2                      GCONFIG_SetTftpServerIp(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));
1097   2                              
1098   2                      // Save TFTP File name //
1099   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_file_name, &pHttpap_buf);
1100   2                      GCONFIG_SetFilename(pHttpap_buf, httpap_tmp8);
1101   2      
1102   2                      // process firmware upgrade //
1103   2                      if (httpap_CheckElementUpdateByName("upgrade") != HTTPAPI_ERR)
1104   2                      {
1105   3                              // Store configuration to flash ROM //
1106   3                              GCONFIG_WriteConfigData();      
1107   3      
1108   3                              httpdap.Cmd = HTTPDAP_FWUPGRADE_CMD;
1109   3                              httpap_tmp8 = (GCONFIG_GetNetwork() & GCONFIG_NETWORK_DHCP_ENABLE) ? 60 : 55;//select delay time for DH
             -CP enable or disable. //                              
1110   3                              
1111   3                              pHttpap_buf = HTTP_TmpBuf;
1112   3                              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1113   3                              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&
             -%s&%s&%s"
1114   3                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
1115   3                                                                                               ,"Please Wait",httpap_tmp8,"sec","on",FSYS_Manage[pInfo->HomePage].FName);                     
1116   3                              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
1117   3                              return HTTP_POST_ERR;
1118   3                      }
1119   2                                              
1120   2                      goto HTTPAP_POST_ADVANCE_OK;
1121   2              }
1122   1              else if (httpap_CheckElementUpdate(RECORD_TEXT_email_addr) != HTTPAPI_ERR &&
1123   1                               httpap_CheckElementUpdate(RECORD_SELECT_pswchg) != HTTPAPI_ERR)
1124   1              {
1125   2                      // Save SMTP Domain name //
1126   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_email_addr, &pHttpap_buf);
1127   2                      GCONFIG_SetSMTPDomainName(pHttpap_buf, httpap_tmp8);
1128   2                      
1129   2                      // Save SMTP From addr //
1130   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_email_from, &pHttpap_buf);
1131   2                      GCONFIG_SetSMTPFrom(pHttpap_buf, httpap_tmp8);
1132   2      
1133   2                      // Save SMTP To1 addr //
1134   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_email_to1, &pHttpap_buf);
1135   2                      GCONFIG_SetSMTPTo1(pHttpap_buf, httpap_tmp8);
1136   2      
1137   2                      // Save SMTP To2 addr //
1138   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_email_to2, &pHttpap_buf);
1139   2                      GCONFIG_SetSMTPTo2(pHttpap_buf, httpap_tmp8);
1140   2              
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 20  

1141   2                      // Save SMTP To3 addr //
1142   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_email_to3, &pHttpap_buf);
1143   2                      GCONFIG_SetSMTPTo3(pHttpap_buf, httpap_tmp8);
1144   2              
1145   2                      // Save Auto Warning enable bits //
1146   2                      httpap_tmp16 = GCONFIG_GetAutoWarning();        
1147   2                      httpap_GetElementValue(RECORD_SELECT_coldstart, &pHttpap_buf);
1148   2                      if (*pHttpap_buf)
1149   2                              httpap_tmp16 |= GCONFIG_SMTP_EVENT_COLDSTART;
1150   2                      else
1151   2                              httpap_tmp16 &= (~GCONFIG_SMTP_EVENT_COLDSTART);
1152   2      
1153   2                      httpap_GetElementValue(RECORD_SELECT_authfail, &pHttpap_buf);
1154   2                      if (*pHttpap_buf)
1155   2                              httpap_tmp16 |= GCONFIG_SMTP_EVENT_AUTH_FAIL;
1156   2                      else
1157   2                              httpap_tmp16 &= (~GCONFIG_SMTP_EVENT_AUTH_FAIL);
1158   2      
1159   2                      httpap_GetElementValue(RECORD_SELECT_ipchg, &pHttpap_buf);
1160   2                      if (*pHttpap_buf)
1161   2                              httpap_tmp16 |= GCONFIG_SMTP_EVENT_IP_CHANGED;
1162   2                      else
1163   2                              httpap_tmp16 &= (~GCONFIG_SMTP_EVENT_IP_CHANGED);
1164   2              
1165   2                      httpap_GetElementValue(RECORD_SELECT_pswchg, &pHttpap_buf);
1166   2                      if (*pHttpap_buf)
1167   2                              httpap_tmp16 |= GCONFIG_SMTP_EVENT_PSW_CHANGED;
1168   2                      else
1169   2                              httpap_tmp16 &= (~GCONFIG_SMTP_EVENT_PSW_CHANGED);
1170   2                      GCONFIG_SetAutoWarning(httpap_tmp16);
1171   2      
1172   2                      goto HTTPAP_POST_ADVANCE_OK;
1173   2              }                       
1174   1              else if (httpap_CheckElementUpdate(RECORD_RADIO_dhcps_onoff) != HTTPAPI_ERR &&
1175   1                               httpap_CheckElementUpdate(RECORD_TEXT_dhcps_mask) != HTTPAPI_ERR)      
1176   1              {
1177   2                      // Save DHCP server status //
1178   2                      httpap_GetElementValue(RECORD_RADIO_dhcps_onoff, &pHttpap_buf);
1179   2                      GCONFIG_SetDhcpSrvStatus(*pHttpap_buf);
1180   2                      
1181   2                      // Save DHCP server IP pool start address //            
1182   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_dhcps_startip, &pHttpap_buf);          
1183   2                      GCONFIG_SetDhcpSrvStartIp(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));
1184   2      
1185   2                      // Save DHCP server IP pool end address //              
1186   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_dhcps_endip, &pHttpap_buf);                            
1187   2                      GCONFIG_SetDhcpSrvEndIp(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));                
1188   2              
1189   2                      // Save DHCP server default gateway //          
1190   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_dhcps_gateway, &pHttpap_buf);                          
1191   2                      GCONFIG_SetDhcpSrvDefGateway(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));                           
1192   2              
1193   2                      // Save DHCP server netmask //          
1194   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_dhcps_mask, &pHttpap_buf);                             
1195   2                      GCONFIG_SetDhcpSrvNetmask(HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));      
1196   2                      
1197   2                      goto HTTPAP_POST_ADVANCE_OK;            
1198   2              }                       
1199   1                      
1200   1      //HTTPAP_POST_ADVANCE_ERR:      
1201   1              pHttpap_buf = HTTP_TmpBuf;
1202   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 21  

1203   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
1204   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
1205   1                                                                                               ,"Advance settings validation error!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);                 
1206   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
1207   1              return HTTP_POST_ERR;
1208   1      
1209   1      HTTPAP_POST_ADVANCE_OK: 
1210   1              // Store configuration to flash ROM //
1211   1              GCONFIG_WriteConfigData();
1212   1      
1213   1              pHttpap_buf = HTTP_TmpBuf;
1214   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1215   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
1216   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
1217   1                                                                                               ,"Advance settings validation ok!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);                    
1218   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
1219   1              return HTTP_POST_ERR;
1220   1                                      
1221   1      } /* End of httpap_PostAdvancePage() */
1222          
1223          /*
1224           * ----------------------------------------------------------------------------
1225           * Function Name: httpap_GetSecurityPage()
1226           * Purpose:
1227           * Params:
1228           * Returns:
1229           * Note:
1230           * ----------------------------------------------------------------------------
1231           */
1232          U8_T httpap_GetSecurityPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
1233          {
1234   1              U8_T i, j;
1235   1              
1236   1              /* Clear new user and password */
1237   1              httpap_SetElementValue(RECORD_TEXT_new_usn, 0, 0);
1238   1              httpap_SetElementValue(RECORD_PASSWORD_old_psw, 0, 0);
1239   1              httpap_SetElementValue(RECORD_PASSWORD_new_psw, 0, 0);
1240   1              httpap_SetElementValue(RECORD_PASSWORD_cfm_psw, 0, 0);
1241   1              
1242   1              /* Accessible IP address 0~3 */
1243   1              for (i = 0; i < 4; i ++)
1244   1              {
1245   2                      switch (i)
1246   2                      {
1247   3                      case 0:
1248   3                              j = RECORD_TEXT_acc_ip1;        break;
1249   3                      case 1:
1250   3                              j = RECORD_TEXT_acc_ip2;        break;                  
1251   3                      case 2:
1252   3                              j = RECORD_TEXT_acc_ip3;        break;                  
1253   3                      case 3:                                                                 
1254   3                              j = RECORD_TEXT_acc_ip4;        break;                  
1255   3                      }       
1256   2                      GCONFIG_GetAccessibleIP(i,&httpap_tmp32);
1257   2                      if (httpap_tmp32)
1258   2                      {
1259   3                              httpap_tmp8 = HTTPAPI_Ulong2IpAddr(httpap_tmp32, HTTP_TmpBuf);
1260   3                              httpap_SetElementValue(j, HTTP_TmpBuf, httpap_tmp8);
1261   3                      }
1262   2                      else
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 22  

1263   2                              httpap_SetElementValue(j, 0, 0);
1264   2              }
1265   1              
1266   1              httpap_tmp16 = GCONFIG_GetNetwork();
1267   1              httpap_tmp8 = (httpap_tmp16 & GCONFIG_NETWORK_ACC_IP_ENABLE) ? 1 : 0;
1268   1              httpap_SetElementValue(RECORD_SELECT_acc_ipen, &httpap_tmp8, 1);
1269   1              return HTTP_POST_OK;
1270   1      } /* End of httpap_GetSecurityPage() */
*** WARNING C280 IN LINE 1232 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pConn': unreferenced local variable
*** WARNING C280 IN LINE 1232 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
1271          
1272          /*
1273           * ----------------------------------------------------------------------------
1274           * Function Name: httpap_PostSecurityPage()
1275           * Purpose:
1276           * Params:
1277           * Returns:
1278           * Note:
1279           * ----------------------------------------------------------------------------
1280           */
1281          U8_T httpap_PostSecurityPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
1282          {
1283   1              U8_T *pTmp, *pbuf1, *pbuf2, tmp;
1284   1              
1285   1              pbuf1 = HTTP_TmpBuf;
1286   1              pbuf2 = HTTP_TmpBuf + 50;
1287   1              
1288   1              if (httpap_CheckElementUpdate(RECORD_TEXT_new_usn) != HTTPAPI_ERR)      
1289   1              {
1290   2                      // Save new username //
1291   2                      GCONFIG_GetAdmin(pbuf1, pbuf2, &httpap_tmp8);
1292   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_new_usn, &pHttpap_buf);
1293   2                      
1294   2                      memcpy(pbuf1, pHttpap_buf, httpap_tmp8);
1295   2                      pbuf1[httpap_tmp8] = '\0';
1296   2                      GCONFIG_SetAdmin(pbuf1, pbuf2);
1297   2                      
1298   2                      // Store configuration to flash ROM //
1299   2                      GCONFIG_WriteConfigData();
1300   2                              
1301   2                      pHttpap_buf = HTTP_TmpBuf;
1302   2                      httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSCONFIRM);
1303   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "msg", "Change username ok!
             -</br>Please use new user name to login again.");      
1304   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "dst_style", "title_2");           
1305   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "redirect", "%s", FSYS_Mana
             -ge[pConn->FileId].FName);             
1306   2                      HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSCONFIRM, pConn);                                                                            
1307   2                      return HTTP_POST_ERR;
1308   2                              
1309   2              }
1310   1              else if (httpap_CheckElementUpdate(RECORD_PASSWORD_old_psw) != HTTPAPI_ERR && 
1311   1                               httpap_CheckElementUpdate(RECORD_PASSWORD_cfm_psw) != HTTPAPI_ERR)
1312   1              {
1313   2                      // check old password //
1314   2                      GCONFIG_GetAdmin(pbuf1, pbuf2, &httpap_tmp8);
1315   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_PASSWORD_old_psw, &pHttpap_buf);
1316   2                      if (strlen(pbuf2) != httpap_tmp8 || memcmp(pbuf2, pHttpap_buf, httpap_tmp8) != 0)
1317   2                              goto HTTPAP_POST_SECURITY_ERR;
1318   2                      
1319   2                      // check new password and confirm password //
1320   2                      tmp = httpap_GetElementValue(RECORD_PASSWORD_cfm_psw, &pTmp);           
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 23  

1321   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_PASSWORD_new_psw, &pHttpap_buf);
1322   2                      if (tmp != httpap_tmp8 || memcmp(pTmp, pHttpap_buf, httpap_tmp8) != 0)
1323   2                              goto HTTPAP_POST_SECURITY_ERR;
1324   2      
1325   2                      // save new password //         
1326   2                      memcpy(pbuf2, pHttpap_buf, httpap_tmp8);
1327   2                      pbuf2[httpap_tmp8] = '\0';
1328   2                      GCONFIG_SetAdmin(pbuf1, pbuf2);
1329   2      
1330   2                      // Store configuration to flash ROM //
1331   2                      GCONFIG_WriteConfigData();
1332   2                      
1333   2                      pHttpap_buf = HTTP_TmpBuf;
1334   2                      httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSCONFIRM);
1335   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "msg", "Change password ok!
             -</br>Please use new password to login again.");       
1336   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "dst_style", "title_2");           
1337   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "redirect", "%s", FSYS_Mana
             -ge[pConn->FileId].FName);             
1338   2                      HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSCONFIRM, pConn);                                                                            
1339   2                      return HTTP_POST_ERR;           
1340   2              }
1341   1              else if (httpap_CheckElementUpdate(RECORD_TEXT_acc_ip1) != HTTPAPI_ERR && 
1342   1                               httpap_CheckElementUpdate(RECORD_SELECT_acc_ipen) != HTTPAPI_ERR)                       
1343   1              {       
1344   2              
1345   2                      // save accible IP 1~4 //
1346   2                      for (tmp = 0; tmp < 4; tmp ++)
1347   2                      {
1348   3                              switch (tmp)
1349   3                              {
1350   4                              case 0:
1351   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_acc_ip1, &pHttpap_buf);        break;
1352   4                              case 1:
1353   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_acc_ip2, &pHttpap_buf);        break;                  
1354   4                              case 2:
1355   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_acc_ip3, &pHttpap_buf);        break;                  
1356   4                              case 3:                                                                 
1357   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_acc_ip4, &pHttpap_buf);        break;                  
1358   4                              }
1359   3                              if (httpap_tmp8)
1360   3                                      GCONFIG_SetAccessibleIP(tmp, HTTPAPI_IpAddr2Ulong(pHttpap_buf, httpap_tmp8));
1361   3                              else
1362   3                                      GCONFIG_SetAccessibleIP(tmp, 0);
1363   3                      }
1364   2                                              
1365   2                      // Save accessible IP enable bit //
1366   2                      httpap_tmp16 = GCONFIG_GetNetwork();    
1367   2                      httpap_GetElementValue(RECORD_SELECT_acc_ipen, &pHttpap_buf);
1368   2                      if (*pHttpap_buf)
1369   2                              httpap_tmp16 |= GCONFIG_NETWORK_ACC_IP_ENABLE;
1370   2                      else
1371   2                              httpap_tmp16 &= (~GCONFIG_NETWORK_ACC_IP_ENABLE);
1372   2                      GCONFIG_SetNetwork(httpap_tmp16);
1373   2                      
1374   2                      goto HTTPAP_POST_SECURITY_OK;
1375   2              }
1376   1              
1377   1      HTTPAP_POST_SECURITY_ERR:       
1378   1              pHttpap_buf = HTTP_TmpBuf;
1379   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1380   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 24  

             -&%s&%s"
1381   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
1382   1                                                                                               ,"Security settings validation error!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);        
1383   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
1384   1              return HTTP_POST_ERR;
1385   1              
1386   1              
1387   1      HTTPAP_POST_SECURITY_OK:        
1388   1              // Store configuration to flash ROM //
1389   1              GCONFIG_WriteConfigData();
1390   1      
1391   1              pHttpap_buf = HTTP_TmpBuf;
1392   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1393   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
1394   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
1395   1                                                                                               ,"Security settings validation ok!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);   
1396   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);                                                                                
1397   1              return HTTP_POST_ERR;
1398   1      
1399   1      } /* End of httpap_PostSecurityPage() */
*** WARNING C280 IN LINE 1281 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
1400          
1401          /*
1402           * ----------------------------------------------------------------------------
1403           * Function Name: httpap_GetWiFiPage()
1404           * Purpose:
1405           * Params:
1406           * Returns:
1407           * Note:
1408           * ----------------------------------------------------------------------------
1409           */
1410          U8_T httpap_GetWiFiPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
1411          {
1412   1              U8_T i, *pbuf1, *pbuf2;
1413   1              
1414   1              /* Network mode */
1415   1              httpap_tmp8 = GCONFIG_GetWifiNetworkMode() ? 1:0;
1416   1              httpap_SetElementValue(RECORD_SELECT_network_mode, &httpap_tmp8, 1);
1417   1              
1418   1              /* Channel */
1419   1              httpap_tmp8 = GCONFIG_GetChannel();
1420   1              httpap_SetElementValue(RECORD_SELECT_channel, &httpap_tmp8, 1);
1421   1              
1422   1              /* Service Area Name/SSID */
1423   1              httpap_tmp8 = GCONFIG_GetSsid(HTTP_TmpBuf);
1424   1              httpap_SetElementValue(RECORD_TEXT_ssid, HTTP_TmpBuf, httpap_tmp8);
1425   1                              
1426   1              /* Secirity Mode */
1427   1              httpap_tmp8 = GCONFIG_GetWifiEncryptMode();// % 5;
1428   1              httpap_SetElementValue(RECORD_SELECT_security_mode, &httpap_tmp8, 1);
1429   1              
1430   1              /* Key Length */        
1431   1              httpap_tmp8 = GCONFIG_GetWifiWepKeyLength() ? 1:0;
1432   1              httpap_SetElementValue(RECORD_SELECT_key_length, &httpap_tmp8, 1);
1433   1              
1434   1              /* Key Index Select */
1435   1              httpap_tmp8 = GCONFIG_GetWifiWepKeyIndex();// % 4;
1436   1              httpap_SetElementValue(RECORD_SELECT_key_index, &httpap_tmp8, 1);
1437   1      
1438   1              /* AES/TKIP Passphrase */       
1439   1              httpap_tmp8 = GCONFIG_GetWifiPreShareKey(HTTP_TmpBuf);  
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 25  

1440   1              httpap_SetElementValue(RECORD_TEXT_aes_passphrase, HTTP_TmpBuf, httpap_tmp8);
1441   1              
1442   1              /* TX Data Rate */      
1443   1              httpap_tmp8 = GCONFIG_GetWifiTxRate();//%sizof(IO_WiFiSupportTxRate);
1444   1              httpap_SetElementValue(RECORD_SELECT_tx_data_rate, &httpap_tmp8, 1);
1445   1              
1446   1              /* Transmission Power */        
1447   1              httpap_tmp8 = GCONFIG_GetWifiTxPowerLevel();
1448   1              httpap_SetElementValue(RECORD_SELECT_tx_power, &httpap_tmp8, 1);
1449   1              
1450   1              /* Preamble */  
1451   1              httpap_tmp8 = GCONFIG_GetWifiPreambleMode();
1452   1              httpap_SetElementValue(RECORD_SELECT_preamble, &httpap_tmp8, 1);
1453   1              
1454   1              /* Beacon Interval */   
1455   1              httpap_tmp16 = GCONFIG_GetWifiBcnInterval();
1456   1              httpap_tmp8 = HTTPAPI_Short2Str(httpap_tmp16, HTTP_TmpBuf);
1457   1              httpap_SetElementValue(RECORD_TEXT_beacon_intv, HTTP_TmpBuf, httpap_tmp8);
1458   1              
1459   1              /* RTS Threshold */
1460   1              httpap_tmp16 = GCONFIG_GetWifiRtsThreshold();
1461   1              httpap_tmp8 = HTTPAPI_Short2Str(httpap_tmp16, HTTP_TmpBuf);
1462   1              httpap_SetElementValue(RECORD_TEXT_rts_threshold, HTTP_TmpBuf, httpap_tmp8);
1463   1              
1464   1              /* Auto Power Control */
1465   1              httpap_tmp8 = GCONFIG_GetWifiAutoPowerCtrl();
1466   1              httpap_SetElementValue(RECORD_SELECT_auto_pwr_ctrl, &httpap_tmp8, 1);
1467   1      
1468   1              /* for WEP64bits and WEP128bit dynamic option */
1469   1              pbuf1 = HTTP_TmpBuf + 400;
1470   1              pbuf2 = HTTP_TmpBuf + 450;      
1471   1              pHttpap_buf = HTTP_TmpBuf;
1472   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1473   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "<input type=\"hidden
             -\" id=\"wep64_info\" value=\"");// Build hidden element start //              
1474   1              for (i = 0; i < 4; i ++)
1475   1              {       
1476   2                      GCONFIG_GetWifiWep64Key(i, pbuf1);
1477   2                      HTTPAPI_Num2HexText(pbuf2, pbuf1, 5);
1478   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%s&", pbuf2);      
1479   2              }
1480   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "\"/>");/* Build hidd
             -en element end */                     
1481   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "<input type=\"hidden
             -\" id=\"wep128_info\" value=\"");// Build hidden element start //                     
1482   1              for (i = 0; i < 4; i ++)
1483   1              {       
1484   2                      GCONFIG_GetWifiWep128Key(i, pbuf1);
1485   2                      HTTPAPI_Num2HexText(pbuf2, pbuf1, 13);
1486   2                      httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%s&", pbuf2);
1487   2              }
1488   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "\"/>");/* Build hidd
             -en element end */     
1489   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, pConn->FileId, pConn);                                                                              
1490   1              return HTTP_POST_ERR;
1491   1      } /* End of httpap_GetWiFiPage() */
*** WARNING C280 IN LINE 1410 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
1492          
1493          /*
1494           * ----------------------------------------------------------------------------
1495           * Function Name: httpap_PostWiFiPage()
1496           * Purpose:
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 26  

1497           * Params:
1498           * Returns:
1499           * Note:
1500           * ----------------------------------------------------------------------------
1501           */
1502          U8_T httpap_PostWiFiPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
1503          {
1504   1              U8_T i, j;
1505   1              
1506   1              if (httpap_CheckElementUpdate(RECORD_SELECT_network_mode) != HTTPAPI_ERR && 
1507   1                      httpap_CheckElementUpdate(RECORD_SELECT_security_mode) != HTTPAPI_ERR)  
1508   1              {
1509   2                      // Network mode //
1510   2                      httpap_GetElementValue(RECORD_SELECT_network_mode, &pHttpap_buf);
1511   2                      GCONFIG_SetWifiNetworkMode(*pHttpap_buf);
1512   2                                      
1513   2                      // Channel //
1514   2                      httpap_GetElementValue(RECORD_SELECT_channel, &pHttpap_buf);            
1515   2                      GCONFIG_SetChannel(*pHttpap_buf);
1516   2              
1517   2                      // Service Area Name/SSID //
1518   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_ssid, &pHttpap_buf);           
1519   2                      GCONFIG_SetSsid(pHttpap_buf, httpap_tmp8);
1520   2                                      
1521   2                      // Secirity Mode //
1522   2                      httpap_GetElementValue(RECORD_SELECT_security_mode, &pHttpap_buf);
1523   2                      GCONFIG_SetWifiEncryptMode(*pHttpap_buf);
1524   2                      
1525   2                      goto HTTPAP_POST_WIFI_OK;
1526   2              }
1527   1              else if (httpap_CheckElementUpdate(RECORD_SELECT_key_length) != HTTPAPI_ERR && 
1528   1                       httpap_CheckElementUpdate(RECORD_TEXT_key_index_3) != HTTPAPI_ERR)                      
1529   1              {
1530   2                      // Key Length //        
1531   2                      httpap_GetElementValue(RECORD_SELECT_key_length, &pHttpap_buf);
1532   2                      GCONFIG_SetWifiWepKeyLength(*pHttpap_buf);
1533   2                      i = *pHttpap_buf;
1534   2                                      
1535   2                      // Key Index Select //
1536   2                      httpap_GetElementValue(RECORD_SELECT_key_index, &pHttpap_buf);          
1537   2                      GCONFIG_SetWifiWepKeyIndex(*pHttpap_buf);
1538   2      
1539   2                      // WEP 64/128 bits key 1~4 //   
1540   2                      for (j = 0; j < 4; j ++)
1541   2                      {
1542   3                              switch (j)
1543   3                              {
1544   4                              case 0:
1545   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_key_index_0, &pHttpap_buf); break;
1546   4                              case 1:
1547   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_key_index_1, &pHttpap_buf); break;
1548   4                              case 2:
1549   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_key_index_2, &pHttpap_buf); break;
1550   4                              case 3:
1551   4                                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_key_index_3, &pHttpap_buf); break;
1552   4                              }
1553   3      
1554   3                              if (httpap_tmp8)
1555   3                              {
1556   4                                      if (httpap_tmp8 != 10 && httpap_tmp8 != 26)
1557   4                                              goto HTTPAP_POST_WIFI_ERR;
1558   4                                      if (!HTTPAPI_HexText2Num(HTTP_TmpBuf, pHttpap_buf, httpap_tmp8))
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 27  

1559   4                                              goto HTTPAP_POST_WIFI_ERR;
1560   4                                      if (i)
1561   4                                              GCONFIG_SetWifiWep128Key(j, HTTP_TmpBuf);
1562   4                                      else
1563   4                                              GCONFIG_SetWifiWep64Key(j, HTTP_TmpBuf);
1564   4                              }
1565   3                      }
1566   2                      goto HTTPAP_POST_WIFI_OK;       
1567   2              }
1568   1              else if (httpap_CheckElementUpdate(RECORD_TEXT_aes_passphrase) != HTTPAPI_ERR)
1569   1              {
1570   2                      // AES/TKIP Passphrase //       
1571   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_aes_passphrase, &pHttpap_buf);
1572   2                      if (httpap_tmp8 < 8 || httpap_tmp8 > 63)
1573   2                              goto HTTPAP_POST_WIFI_ERR;                      
1574   2                      GCONFIG_SetWifiPreShareKey(pHttpap_buf, httpap_tmp8);
1575   2                      goto HTTPAP_POST_WIFI_OK;
1576   2              }
1577   1              else if (httpap_CheckElementUpdate(RECORD_SELECT_tx_data_rate) != HTTPAPI_ERR && 
1578   1                       httpap_CheckElementUpdate(RECORD_SELECT_auto_pwr_ctrl) != HTTPAPI_ERR)                  
1579   1              {
1580   2                      // TX Data Rate //      
1581   2                      httpap_GetElementValue(RECORD_SELECT_tx_data_rate, &pHttpap_buf);               
1582   2                      GCONFIG_SetWifiTxRate(*pHttpap_buf);
1583   2                      
1584   2                      // Transmission Power //        
1585   2                      httpap_GetElementValue(RECORD_SELECT_tx_power, &pHttpap_buf);           
1586   2                      GCONFIG_SetWifiTxPowerLevel(*pHttpap_buf);
1587   2                      
1588   2                      // Preamble //  
1589   2                      httpap_GetElementValue(RECORD_SELECT_preamble, &pHttpap_buf);           
1590   2                      GCONFIG_SetWifiPreambleMode(*pHttpap_buf);              
1591   2                                      
1592   2                      // Beacon Interval //   
1593   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_beacon_intv, &pHttpap_buf);            
1594   2                      httpap_tmp16 = HTTPAPI_Str2Short(pHttpap_buf, httpap_tmp8);             
1595   2                      GCONFIG_SetWifiBcnInterval(httpap_tmp16);               
1596   2                      
1597   2                      // RTS Threshold //                                             
1598   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_TEXT_rts_threshold, &pHttpap_buf);          
1599   2                      httpap_tmp16 = HTTPAPI_Str2Short(pHttpap_buf, httpap_tmp8);             
1600   2                      GCONFIG_SetWifiRtsThreshold(httpap_tmp16);      
1601   2                                      
1602   2                      // Auto Power Control //                                                
1603   2                      httpap_tmp8 = httpap_GetElementValue(RECORD_SELECT_auto_pwr_ctrl, &pHttpap_buf);                
1604   2                      GCONFIG_SetWifiAutoPowerCtrl(*pHttpap_buf);             
1605   2      
1606   2                      goto HTTPAP_POST_WIFI_OK;               
1607   2              }       
1608   1              
1609   1      HTTPAP_POST_WIFI_ERR:   
1610   1              pHttpap_buf = HTTP_TmpBuf;
1611   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1612   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
1613   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
1614   1                                                                                               ,"WiFi settings validation error!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);    
1615   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);
1616   1              
1617   1              return HTTP_POST_ERR;
1618   1              
1619   1      HTTPAP_POST_WIFI_OK:    
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 28  

1620   1              // Store configuration to flash ROM //
1621   1              GCONFIG_WriteConfigData();
1622   1                                      
1623   1              pHttpap_buf = HTTP_TmpBuf;
1624   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1625   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_Hidden, NULL, "sysmsg_setting" ,"%s&%bu&%s
             -&%s&%s"
1626   1                                                                                              // warning message, delay time, delay time unit, delay time visible, redirect URL //
1627   1                                                                                               ,"WiFi settings validation ok!",2,"sec","off",FSYS_Manage[pConn->FileId].FName);
1628   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, FILE_SYSMSG, pConn);
1629   1              
1630   1              return HTTP_POST_ERR;
1631   1      } /* End of httpap_PostWiFiPage() */
*** WARNING C280 IN LINE 1502 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
1632          
1633          /*
1634           * ----------------------------------------------------------------------------
1635           * Function Name: httpap_GetSysMonitPage()
1636           * Purpose:
1637           * Params:
1638           * Returns:
1639           * Note:
1640           * ----------------------------------------------------------------------------
1641           */
1642          U8_T httpap_GetSysMonitPage(HTTP_SERVER_CONN *pConn, HTTP_SERVER_INFO *pInfo)
1643          {
1644   1              U8_T *pTmp;
1645   1              U8_T *pbuf1 = HTTP_TmpBuf + 200;        
1646   1              
1647   1              pHttpap_buf = (U8_T *)(GCONFIG_GetDeviceName());
1648   1              httpap_tmp8 = strlen(pHttpap_buf);
1649   1              if (httpap_tmp8 > 16)
1650   1                      httpap_tmp8 = 16;
1651   1              memcpy(pbuf1, pHttpap_buf, httpap_tmp8);
1652   1              pbuf1[httpap_tmp8] = '\0';
1653   1              
1654   1              pHttpap_buf = HTTP_TmpBuf;
1655   1              httpap_tmp16 = HTTPAPI_BuildGenericHeaders(&pHttpap_buf, FILE_SYSMSG);
1656   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "<input type=\"hidden
             -\" id=\"device_all_status\" value=\"");// Build hidden element start //       
1657   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%s&", pbuf1);// Buil
             -d device name //
1658   1              pTmp = (U8_T*)&(STOE_GetIPAddr());      
1659   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%bu.%bu.%bu.%bu&"// 
             -Build local IP address //
1660   1                                                                                               ,pTmp[0],pTmp[1],pTmp[2],pTmp[3]);             
1661   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%s&", GCONFIG_VERSIO
             -N_STRING);// Build mcpu firmware version //
1662   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%s&", MWIFAPP_WiFiIn
             -fo.WcpuFwVersion);// Build wcpu firmware version //
1663   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "0x%08lx%02bx%02bx&"/
             -/ Build wcpu mac address //
1664   1                                                                                               ,*(U32_T*)(MWIFAPP_WiFiInfo.WcpuMAC), MWIFAPP_WiFiInfo.WcpuMAC[4], MWIFAPP_WiFiInfo.WcpuMAC[5]
             -);        
1665   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%bx&", HSUR2_GetMode
             -mStatus(1));// Build modem status //                                                                                   
1666   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%s&"// Build protoco
             -l type //        
1667   1                                                                                               ,(GCONFIG_GetNetwork() & GCONFIG_NETWORK_PROTO_TCP)?"TCP":"UDP");                                                                      
1668   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%s&"// Build connect
             -ion type //                        
1669   1                                                                                               ,(GS2W_GetTaskState() == GS2W_STATE_IDLE)?"Idle":"Connected");                                                                                                                                 
C51 COMPILER V9.01   HTTPDAP                                                               03/08/2012 11:01:06 PAGE 29  

1670   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%lu&"// Build HUART 
             -TX byte counter //
1671   1                                                                                               ,(GS2W_CONN_UDP == GS2W_GetConnType())? GUDPDAT_GetTxBytes(0) : GTCPDAT_GetTxBytes(0));
1672   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "%lu"// Build HUART R
             -X byte counter //
1673   1                                                                                               ,(GS2W_CONN_UDP == GS2W_GetConnType())? GUDPDAT_GetRxBytes(0) : GTCPDAT_GetRxBytes(0));
1674   1              httpap_tmp16 += HTTPAPI_BuildMessageBody(&pHttpap_buf, HTTPAPI_FmtOnly, NULL, NULL, "\"/>");// Build hidd
             -en element end //     
1675   1              HTTPAPI_ResponseResource(HTTP_TmpBuf, httpap_tmp16, pConn->FileId, pConn);      
1676   1              return HTTP_POST_ERR;
1677   1      } /* End of httpap_GetSysMonitPage() */
*** WARNING C280 IN LINE 1642 OF ..\SRC\WEB_PAGE\HTTPDAP.C: 'pInfo': unreferenced local variable
1678          
1679          /* Add to support customers' application, end */
1680          
1681          /* End of httpdap.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  13465    ----
   CONSTANT SIZE    =    937    ----
   XDATA SIZE       =     62     175
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  23 WARNING(S),  0 ERROR(S)
