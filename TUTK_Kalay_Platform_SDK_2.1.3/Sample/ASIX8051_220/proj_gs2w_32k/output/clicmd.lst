C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE CLICMD
OBJECT MODULE PLACED IN .\clicmd.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe ..\src\mconsole\clicmd.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X8020) INCD
                    -IR(..\src\main;..\src\mcpu;..\src\mswdma;..\src\uart0;..\src\mmstimer;..\src\mwif;..\src\madapter;..\src\mtcpip;..\src\m
                    -ping;..\src\mpppoe;..\src\si2c;..\src\mdnsc;..\src\mconsole;..\src\mtelnet;..\src\meeprom;..\src\mmac;..\src\mdhcpc;..\s
                    -rc\mhttp;..\src\mgs2wifi;..\src\mhsuart;..\src\msmtpc;..\src\web_page;..\src\mdhcps;..\src\mdebug;..\..\..\Include;..\..
                    -\..\Build\ASIX8051_220\) DEFINE(RuntimeCodeAt32KH) VARBANKING DEBUG PRINT(.\output\clicmd.lst) OBJECT(.\clicmd.obj)

line level    source

   1          /*
   2           ******************************************************************************
   3           *     Copyright (c) 2006       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           ******************************************************************************
  10           */
  11          /*=============================================================================
  12           * Module Name: CLICMD
  13           * Purpose: The purpose of this package provides the services to CLICMD
  14           * Author:
  15           * Date:
  16           * Notes:
  17           * $Log$
  18          *=============================================================================
  19          */
  20          /* INCLUDE FILE DECLARATIONS */
  21          #include <absacc.h>
  22          #include <stdio.h>
  23          #include <stdarg.h>
  24          #include <stdlib.h>
  25          #include <string.h>
  26          #include "types.h"
  27          #include "main.h"
  28          #include "printd.h"
  29          #include "gconfig.h"
  30          #include "gs2w.h"
  31          #include "tcpip.h"
  32          #include "gtcpdat.h"
  33          #include "ax22000.h"
  34          #include "hsuart.h"
  35          #include "stoe.h"
  36          #include "stoe_cfg.h"
  37          #include "console.h"
  38          #include "clicmd.h"
  39          #include "at24c02.h"
  40          #include "mcpu.h"
  41          #include "mwioctl.h"
  42          #include "mwifapp.h"
  43          #include "ping.h"
  44          #include "delay.h"
  45          /* NAMING CONSTANT DECLARATIONS */
  46          
  47          /* MACRO DECLARATIONS */
  48          #define IsDigit(x) ((x < 0x3a && x > 0x2f) ? 1 : 0)
  49           
  50          /* GLOBAL VARIABLES DECLARATIONS */
  51          static S16_T clicmd_SetIp(CONSOLE_Inst *pInst);
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 2   

  52          static S16_T clicmd_SetIpHelp(CONSOLE_Inst *pInst);
  53          
  54          static S16_T clicmd_SetMask(CONSOLE_Inst *pInst);
  55          static S16_T clicmd_SetMaskHelp(CONSOLE_Inst *pInst);
  56          
  57          static S16_T clicmd_SetGateway(CONSOLE_Inst *pInst);
  58          static S16_T clicmd_SetGatewayHelp(CONSOLE_Inst *pInst);
  59          
  60          static S16_T clicmd_SetDnsIp(CONSOLE_Inst *pInst);
  61          static S16_T clicmd_SetDnsIpHelp(CONSOLE_Inst *pInst);
  62          
  63          static S16_T clicmd_SetSerialPort(CONSOLE_Inst *pInst);
  64          static S16_T clicmd_SetSerialPortHelp(CONSOLE_Inst *pInst);
  65          
  66          static S16_T clicmd_SetDeviceMode(CONSOLE_Inst *pInst);
  67          static S16_T clicmd_SetDeviceModeHelp(CONSOLE_Inst *pInst);
  68          
  69          static S16_T clicmd_SetServerPort(CONSOLE_Inst *pInst);
  70          static S16_T clicmd_SetServerPortHelp(CONSOLE_Inst *pInst);
  71          
  72          static S16_T clicmd_SetRemotePort(CONSOLE_Inst *pInst);
  73          static S16_T clicmd_SetRemotePortHelp(CONSOLE_Inst *pInst);
  74          
  75          static S16_T clicmd_SetDhcpClient(CONSOLE_Inst *pInst);
  76          static S16_T clicmd_SetDhcpClientHelp(CONSOLE_Inst *pInst);
  77          
  78          static S16_T clicmd_SetConnectType(CONSOLE_Inst *pInst);
  79          static S16_T clicmd_SetConnectTypeHelp(CONSOLE_Inst *pInst);
  80          
  81          static S16_T clicmd_SaveConfig(CONSOLE_Inst *pInst);
  82          static S16_T clicmd_SaveConfigHelp(CONSOLE_Inst *pInst);
  83          
  84          static S16_T clicmd_SetEtherTimer(CONSOLE_Inst *pInst);
  85          static S16_T clicmd_SetEtherTimerHelp(CONSOLE_Inst *pInst);
  86          
  87          static S16_T clicmd_SetUsername(CONSOLE_Inst *pInst);
  88          static S16_T clicmd_SetUsernameHelp(CONSOLE_Inst *pInst);
  89          
  90          static S16_T clicmd_GetIpConfig(CONSOLE_Inst *pInst);
  91          static S16_T clicmd_GetIpConfigHelp(CONSOLE_Inst *pInst);
  92          
  93          static S16_T clicmd_SetAccessibleIP(CONSOLE_Inst *pInst);
  94          static S16_T clicmd_SetAccessibleIPHelp(CONSOLE_Inst *pInst);
  95          
  96          static S16_T clicmd_ConfigAccessibleIP(CONSOLE_Inst *pInst);
  97          static S16_T clicmd_ConfigAccessibleIPHelp(CONSOLE_Inst *pInst);
  98          
  99          static S16_T clicmd_SetEmailServerAddr(CONSOLE_Inst *pInst);
 100          static S16_T clicmd_SetEmailServerAddrHelp(CONSOLE_Inst *pInst);
 101          
 102          static S16_T clicmd_SetEmailFromAddr(CONSOLE_Inst *pInst);
 103          static S16_T clicmd_SetEmailFromAddrHelp(CONSOLE_Inst *pInst);
 104          
 105          static S16_T clicmd_SetEmailTo1Addr(CONSOLE_Inst *pInst);
 106          static S16_T clicmd_SetEmailTo1AddrHelp(CONSOLE_Inst *pInst);
 107          
 108          static S16_T clicmd_SetEmailTo2Addr(CONSOLE_Inst *pInst);
 109          static S16_T clicmd_SetEmailTo2AddrHelp(CONSOLE_Inst *pInst);
 110          
 111          static S16_T clicmd_SetEmailTo3Addr(CONSOLE_Inst *pInst);
 112          static S16_T clicmd_SetEmailTo3AddrHelp(CONSOLE_Inst *pInst);
 113          
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 3   

 114          static S16_T clicmd_GetEmailConfig(CONSOLE_Inst *pInst);
 115          static S16_T clicmd_GetEmailConfigHelp(CONSOLE_Inst *pInst);
 116          
 117          static S16_T clicmd_SetAWConfig(CONSOLE_Inst *pInst);
 118          static S16_T clicmd_SetAWConfigHelp(CONSOLE_Inst *pInst);
 119          
 120          static S16_T clicmd_SetRs485Mode(CONSOLE_Inst *pInst);
 121          static S16_T clicmd_SetRs485ModeHelp(CONSOLE_Inst *pInst);
 122          
 123          static S16_T clicmd_SetDestHostName(CONSOLE_Inst *pInst);
 124          static S16_T clicmd_SetDestHostNameHelp(CONSOLE_Inst *pInst);
 125          
 126          static S16_T clicmd_SetTftpServerIp(CONSOLE_Inst *pInst);
 127          static S16_T clicmd_SetTftpServerIpHelp(CONSOLE_Inst *pInst);
 128          
 129          static S16_T clicmd_SetFilename(CONSOLE_Inst *pInst);
 130          static S16_T clicmd_SetFilenameHelp(CONSOLE_Inst *pInst);
 131          
 132          static S16_T clicmd_UpdateFirmware(CONSOLE_Inst *pInst);
 133          static S16_T clicmd_UpdateFirmwareHelp(CONSOLE_Inst *pInst);
 134          
 135          static S16_T clicmd_SetEEP(CONSOLE_Inst *pInst);
 136          static S16_T clicmd_SetEEPHelp(CONSOLE_Inst *pInst);
 137          
 138          static S16_T clicmd_DebugMsg(CONSOLE_Inst *pInst);
 139          static S16_T clicmd_DebugMsgHelp(CONSOLE_Inst *pInst);
 140          
 141          static S16_T clicmd_ConnectStatus(CONSOLE_Inst *pInst);
 142          static S16_T clicmd_ConnectStatusHelp(CONSOLE_Inst *pInst);
 143          
 144          static S16_T clicmd_Ping(CONSOLE_Inst *pInst);
 145          static S16_T clicmd_PingHelp(CONSOLE_Inst *pInst);
 146          
 147          static S16_T clicmd_SetDefault(CONSOLE_Inst *pInst);
 148          static S16_T clicmd_SetDefaultHelp(CONSOLE_Inst *pInst);
 149          
 150          static S16_T clicmd_SetBMCast(CONSOLE_Inst *pInst);
 151          static S16_T clicmd_SetBMCastHelp(CONSOLE_Inst *pInst);
 152          
 153          #if (MAC_ARBIT_MODE & MAC_ARBIT_WIFI)
 154          static S16_T clicmd_SetSSID(CONSOLE_Inst *pInst);
 155          static S16_T clicmd_SetSSIDHelp(CONSOLE_Inst *pInst);
 156          
 157          static S16_T clicmd_SetNetworkType(CONSOLE_Inst *pInst);
 158          static S16_T clicmd_SetNetworkTypeHelp(CONSOLE_Inst *pInst);
 159          
 160          static S16_T clicmd_SetChannel(CONSOLE_Inst *pInst);
 161          static S16_T clicmd_SetChannelHelp(CONSOLE_Inst *pInst);
 162          
 163          static S16_T clicmd_SetWep64Key(CONSOLE_Inst *pInst);
 164          static S16_T clicmd_SetWep64KeyHelp(CONSOLE_Inst *pInst);
 165          
 166          static S16_T clicmd_SetWep128Key(CONSOLE_Inst *pInst);
 167          static S16_T clicmd_SetWep128KeyHelp(CONSOLE_Inst *pInst);
 168          
 169          static S16_T clicmd_SetWepKeyIndex(CONSOLE_Inst *pInst);
 170          static S16_T clicmd_SetWepKeyIndexHelp(CONSOLE_Inst *pInst);
 171          
 172          static S16_T clicmd_SetWPAPassphrase(CONSOLE_Inst *pInst);
 173          static S16_T clicmd_SetWPAPassphraseHelp(CONSOLE_Inst *pInst);
 174          
 175          static S16_T clicmd_SetEncryptionType(CONSOLE_Inst *pInst);
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 4   

 176          static S16_T clicmd_SetEncryptionTypeHelp(CONSOLE_Inst *pInst);
 177          
 178          static S16_T clicmd_SiteSurvey(CONSOLE_Inst *pInst);
 179          static S16_T clicmd_SiteSurveyHelp(CONSOLE_Inst *pInst);
 180          
 181          static S16_T clicmd_JoinBSS(CONSOLE_Inst *pInst);
 182          static S16_T clicmd_JoinBSSHelp(CONSOLE_Inst *pInst);
 183          
 184          static S16_T clicmd_SetWepKeyLength(CONSOLE_Inst *pInst);
 185          static S16_T clicmd_SetWepKeyLengthHelp(CONSOLE_Inst *pInst);
 186          
 187          static S16_T clicmd_SetPreamble(CONSOLE_Inst *pInst);
 188          static S16_T clicmd_SetPreambleHelp(CONSOLE_Inst *pInst);
 189          
 190          static S16_T clicmd_SetRTSThreshold(CONSOLE_Inst *pInst);
 191          static S16_T clicmd_SetRTSThresholdHelp(CONSOLE_Inst *pInst);
 192          
 193          //static S16_T clicmd_SetOperationMode(CONSOLE_Inst *pInst);
 194          //static S16_T clicmd_SetOperationModeHelp(CONSOLE_Inst *pInst);
 195          
 196          static S16_T clicmd_SetTxPowerLevel(CONSOLE_Inst *pInst);
 197          static S16_T clicmd_SetTxPowerLevelHelp(CONSOLE_Inst *pInst);
 198          
 199          static S16_T clicmd_SetDataRate(CONSOLE_Inst *pInst);
 200          static S16_T clicmd_SetDataRateHelp(CONSOLE_Inst *pInst);
 201          
 202          static S16_T clicmd_SetAutoPowerControl(CONSOLE_Inst *pInst);
 203          static S16_T clicmd_SetAutoPowerControlHelp(CONSOLE_Inst *pInst);
 204          
 205          static S16_T clicmd_SetBeaconInterval(CONSOLE_Inst *pInst);
 206          static S16_T clicmd_SetBeaconIntervalHelp(CONSOLE_Inst *pInst);
 207          
 208          static S16_T clicmd_GetWifiConfig(CONSOLE_Inst *pInst);
 209          static S16_T clicmd_GetWifiConfigHelp(CONSOLE_Inst *pInst);
 210          #endif /* (MAC_ARBIT_MODE & MAC_ARBIT_WIFI) */
 211          
 212          static S16_T clicmd_SetDhcpServer(CONSOLE_Inst *pInst);
 213          static S16_T clicmd_SetDhcpServerHelp(CONSOLE_Inst *pInst);
 214          static S16_T clicmd_EnableDhcpServer(CONSOLE_Inst *pInst);
 215          static S16_T clicmd_EnableDhcpServerHelp(CONSOLE_Inst *pInst);
 216          
 217          
 218          CONSOLE_CmdEntry const FAR CLICMD_userCmdTable[]=
 219          {
 220              {"username", clicmd_SetUsername, clicmd_SetUsernameHelp, 5},
 221              {"ipconfig", clicmd_GetIpConfig, clicmd_GetIpConfigHelp, 5},
 222              {"setip", clicmd_SetIp, clicmd_SetIpHelp, 5},
 223              {"setmask", clicmd_SetMask, clicmd_SetMaskHelp, 5},
 224              {"setgateway", clicmd_SetGateway, clicmd_SetGatewayHelp, 5},
 225              {"setdns", clicmd_SetDnsIp, clicmd_SetDnsIpHelp, 5},
 226              {"serialport", clicmd_SetSerialPort, clicmd_SetSerialPortHelp, 5},
 227              {"setmode", clicmd_SetDeviceMode, clicmd_SetDeviceModeHelp, 5},
 228              {"setsrvport", clicmd_SetServerPort, clicmd_SetServerPortHelp, 5},
 229              {"setdstport", clicmd_SetRemotePort, clicmd_SetRemotePortHelp, 5},
 230              {"dhcpclient", clicmd_SetDhcpClient, clicmd_SetDhcpClientHelp, 5},
 231              {"connectype", clicmd_SetConnectType, clicmd_SetConnectTypeHelp, 5},
 232              {"transmitimer", clicmd_SetEtherTimer, clicmd_SetEtherTimerHelp, 5},
 233              {"saveconfig", clicmd_SaveConfig, clicmd_SaveConfigHelp, 5},
 234              {"accessip", clicmd_SetAccessibleIP, clicmd_SetAccessibleIPHelp, 5},
 235              {"setaccip", clicmd_ConfigAccessibleIP, clicmd_ConfigAccessibleIPHelp, 5},
 236                  
 237              {"setems", clicmd_SetEmailServerAddr, clicmd_SetEmailServerAddrHelp, 5},
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 5   

 238              {"setemf", clicmd_SetEmailFromAddr, clicmd_SetEmailFromAddrHelp, 5},
 239              {"setemt1", clicmd_SetEmailTo1Addr, clicmd_SetEmailTo1AddrHelp, 5},
 240              {"setemt2", clicmd_SetEmailTo2Addr, clicmd_SetEmailTo2AddrHelp, 5},
 241              {"setemt3", clicmd_SetEmailTo3Addr, clicmd_SetEmailTo3AddrHelp, 5},                         
 242              {"emconfig", clicmd_GetEmailConfig, clicmd_GetEmailConfigHelp, 5},
 243              {"setaw", clicmd_SetAWConfig, clicmd_SetAWConfigHelp, 5},
 244              {"rs485", clicmd_SetRs485Mode, clicmd_SetRs485ModeHelp, 5}, 
 245                  
 246              {"setdsthn", clicmd_SetDestHostName, clicmd_SetDestHostNameHelp, 5},
 247              {"tftpsrv", clicmd_SetTftpServerIp, clicmd_SetTftpServerIpHelp, 5},
 248              {"filename", clicmd_SetFilename, clicmd_SetFilenameHelp, 5},
 249              {"dlfirmware", clicmd_UpdateFirmware, clicmd_UpdateFirmwareHelp, 5},
 250              {"seteep", clicmd_SetEEP, clicmd_SetEEPHelp, 5},
 251              {"dbgmsg", clicmd_DebugMsg, clicmd_DebugMsgHelp, 5},
 252              {"connstatus", clicmd_ConnectStatus, clicmd_ConnectStatusHelp, 5},
 253              {"ping", clicmd_Ping, clicmd_PingHelp, 5},  
 254              {"setdef", clicmd_SetDefault, clicmd_SetDefaultHelp, 5},
 255              {"bmcast", clicmd_SetBMCast, clicmd_SetBMCastHelp, 5},      
 256          #if (MAC_ARBIT_MODE & MAC_ARBIT_WIFI)
 257                  {"setssid", clicmd_SetSSID, clicmd_SetSSIDHelp, 5},
 258                  {"setnt", clicmd_SetNetworkType, clicmd_SetNetworkTypeHelp, 5},
 259              {"setch", clicmd_SetChannel, clicmd_SetChannelHelp, 5},
 260              {"wepklen", clicmd_SetWepKeyLength, clicmd_SetWepKeyLengthHelp, 5},
 261                  {"setw64k", clicmd_SetWep64Key, clicmd_SetWep64KeyHelp, 5},
 262                  {"setw128k", clicmd_SetWep128Key, clicmd_SetWep128KeyHelp, 5},
 263                  {"setwki", clicmd_SetWepKeyIndex, clicmd_SetWepKeyIndexHelp, 5},
 264                  {"setwp", clicmd_SetWPAPassphrase, clicmd_SetWPAPassphraseHelp, 5},
 265                  {"setet", clicmd_SetEncryptionType, clicmd_SetEncryptionTypeHelp, 5},
 266                  {"sisrvy", clicmd_SiteSurvey, clicmd_SiteSurveyHelp, 5},
 267                  {"jbss", clicmd_JoinBSS, clicmd_JoinBSSHelp, 5},
 268          //      {"setopm", clicmd_SetOperationMode, clicmd_SetOperationModeHelp, 5},
 269                  {"setpmb", clicmd_SetPreamble, clicmd_SetPreambleHelp, 5},
 270                  {"setrts", clicmd_SetRTSThreshold, clicmd_SetRTSThresholdHelp, 5},
 271                  {"settpl", clicmd_SetTxPowerLevel, clicmd_SetTxPowerLevelHelp, 5},
 272                  {"setdr", clicmd_SetDataRate, clicmd_SetDataRateHelp, 5},
 273                  {"setapc", clicmd_SetAutoPowerControl, clicmd_SetAutoPowerControlHelp, 5},
 274                  {"setbi", clicmd_SetBeaconInterval, clicmd_SetBeaconIntervalHelp, 5},
 275                  {"wificonfig", clicmd_GetWifiConfig, clicmd_GetWifiConfigHelp, 5},      
 276          #endif
 277              {"dhcpsrv", clicmd_SetDhcpServer, clicmd_SetDhcpServerHelp, 5},
 278              {"setdhcpsrv", clicmd_EnableDhcpServer, clicmd_EnableDhcpServerHelp, 5},
 279          };
 280          
 281          CONSOLE_Account far CLICMD_userTable[MAX_USER_ACCOUNT];
 282          
 283          /* LOCAL VARIABLES DECLARATIONS */
 284          U8_T far StrBuf[128], StrLen;
 285          S16_T argc;
 286          S8_T **argv;
 287          
 288          /* LOCAL SUBPROGRAM DECLARATIONS */
 289          static U8_T clicmd_DecText2Char(U8_T *pbuf, U8_T *pValue, U8_T len);
 290          static U8_T clicmd_HexText2Char(U8_T *pbuf, U8_T *pValue, U8_T len);
 291          static U8_T clicmd_DecText2Short(U8_T *pbuf, U16_T *pValue, U8_T len);
 292          static U8_T clicmd_HexText2Short(U8_T *pbuf, U16_T *pValue, U8_T len);
 293          static U8_T clicmd_HexText2Long(U8_T *pbuf, U32_T *pValue, U8_T len);
 294          static S16_T clicmd_GetIp2Ulong(U8_T *pBuf, U8_T len, U32_T *ipAddr);
 295          static S16_T clicmd_CheckIpInput(U8_T *pBuf);
 296          static U8_T clicmd_ValidIp(U32_T ipAddr);
 297          
 298          /* LOCAL SUBPROGRAM BODIES */
 299          /*
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 6   

 300           * ----------------------------------------------------------------------------
 301           * Function Name: clicmd_DecText2Char
 302           * Purpose:
 303           * Params:
 304           * Returns:
 305           * Note:
 306           * ----------------------------------------------------------------------------
 307           */
 308          static U8_T clicmd_DecText2Char(U8_T *pbuf, U8_T *pValue, U8_T len)
 309          {
 310   1              *pValue = 0;
 311   1      
 312   1              if ((len == 0) || (len > 3))
 313   1              {
 314   2                      return 0xFF;
 315   2              }
 316   1      
 317   1              while (len--)
 318   1              {
 319   2                      *pValue *= 10;
 320   2       
 321   2                      if ((*pbuf < 0x3A) && (*pbuf > 0x2F))
 322   2                      {
 323   3                              *pValue += (*pbuf - 0x30);
 324   3                      }
 325   2                      else
 326   2                      {
 327   3                              return 0xFF;
 328   3                      }
 329   2      
 330   2                      pbuf++;
 331   2              }
 332   1      
 333   1              if (*pValue > 255)
 334   1              {
 335   2                      return 0xFF;
 336   2              }
 337   1      
 338   1              return 0;
 339   1      
 340   1      } /* End of  clicmd_DecText2Char() */
 341          
 342          /*
 343           * ----------------------------------------------------------------------------
 344           * Function Name: clicmd_HexText2Char
 345           * Purpose:
 346           * Params:
 347           * Returns:
 348           * Note:
 349           * ----------------------------------------------------------------------------
 350           */
 351          static U8_T clicmd_HexText2Char(U8_T *pbuf, U8_T *pValue, U8_T len)
 352          {
 353   1              *pValue = 0;
 354   1      
 355   1              if ((len == 0) || (len > 2))
 356   1              {
 357   2                      return 0xFF;
 358   2              }
 359   1      
 360   1              while (len--)
 361   1              {
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 7   

 362   2                      *pValue *= 16;
 363   2       
 364   2                      if ((*pbuf < 0x3A) && (*pbuf > 0x2F))
 365   2                              *pValue += (*pbuf - 0x30);
 366   2                      else if ((*pbuf < 0x47) && (*pbuf > 0x40))
 367   2                              *pValue += (*pbuf - 0x37);
 368   2                      else if ((*pbuf < 0x67) && (*pbuf > 0x60))
 369   2                              *pValue += (*pbuf - 0x57);
 370   2                      else
 371   2                              return 0xFF;
 372   2      
 373   2                      pbuf++;
 374   2              }
 375   1      
 376   1              return 0;
 377   1      
 378   1      } /* End of  clicmd_HexText2Char() */
 379          
 380          /*
 381           * ----------------------------------------------------------------------------
 382           * Function Name: clicmd_DecText2Short
 383           * Purpose:
 384           * Params:
 385           * Returns:
 386           * Note:
 387           * ----------------------------------------------------------------------------
 388           */
 389          static U8_T clicmd_DecText2Short(U8_T *pbuf, U16_T *pValue, U8_T len)
 390          {
 391   1              *pValue = 0;
 392   1      
 393   1              if ((len == 0) || (len > 5))
 394   1                      return 0xff;
 395   1      
 396   1              while (len--)
 397   1              {
 398   2                      *pValue *= 10;
 399   2       
 400   2                      if ((*pbuf < 0x3a) && (*pbuf > 0x2f))
 401   2                              *pValue += (*pbuf - 0x30);
 402   2                      else
 403   2                              return 0xff;
 404   2      
 405   2                      pbuf++;
 406   2              }
 407   1      
 408   1              if (*pValue > 65535)
 409   1                      return 0xff;
 410   1      
 411   1              return 0;
 412   1      
 413   1      } /* End of  clicmd_DecText2Short() */
 414          
 415          /*
 416           * ----------------------------------------------------------------------------
 417           * Function Name: dbg_HexaText2Short
 418           * Purpose:
 419           * Params:
 420           * Returns:
 421           * Note:
 422           * ----------------------------------------------------------------------------
 423           */
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 8   

 424          static U8_T clicmd_HexText2Short(U8_T *pbuf, U16_T *pValue, U8_T len)
 425          {
 426   1              *pValue = 0;
 427   1      
 428   1              if ((len == 0) || (len > 4))
 429   1                      return 0xff;
 430   1      
 431   1              while (len--)
 432   1              {
 433   2                      *pValue *= 16;
 434   2       
 435   2                      if ((*pbuf < 0x3a) && (*pbuf > 0x2f))
 436   2                              *pValue += (*pbuf - 0x30);
 437   2                      else if ((*pbuf < 0x47) && (*pbuf > 0x40))
 438   2                              *pValue += (*pbuf - 0x37);
 439   2                      else if ((*pbuf < 0x67) && (*pbuf > 0x60))
 440   2                              *pValue += (*pbuf - 0x57);
 441   2                      else
 442   2                              return 0xff;
 443   2      
 444   2                      pbuf++;
 445   2              }
 446   1      
 447   1              return 0;
 448   1      
 449   1      } /* End of  clicmd_HexaText2Short() */
 450          
 451          /*
 452           * ----------------------------------------------------------------------------
 453           * Function Name: clicmd_HexText2Long
 454           * Purpose:
 455           * Params:
 456           * Returns:
 457           * Note:
 458           * ----------------------------------------------------------------------------
 459           */
 460          static U8_T clicmd_HexText2Long(U8_T *pbuf, U32_T *pValue, U8_T len)
 461          {
 462   1              *pValue = 0;
 463   1      
 464   1              if ((len == 0) || (len > 8))
 465   1                      return 0xff;
 466   1      
 467   1              while (len--)
 468   1              {
 469   2                      *pValue *= 16;
 470   2       
 471   2                      if ((*pbuf < 0x3a) && (*pbuf > 0x2f))
 472   2                              *pValue += (*pbuf - 0x30);
 473   2                      else if ((*pbuf < 0x47) && (*pbuf > 0x40))
 474   2                              *pValue += (*pbuf - 0x37);
 475   2                      else if ((*pbuf < 0x67) && (*pbuf > 0x60))
 476   2                              *pValue += (*pbuf - 0x57);
 477   2                      else
 478   2                              return 0xff;
 479   2      
 480   2                      pbuf++;
 481   2              }
 482   1      
 483   1              return 0;
 484   1      
 485   1      } /* End of  clicmd_HexText2Long() */
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 9   

 486          
 487          /*
 488           * ----------------------------------------------------------------------------
 489           * Function Name: clicmd_GetIp2Ulong
 490           * Purpose: Transfer a ip address string to ulong number. exp: 0xc0a80003
 491           * Params:
 492           * Returns:
 493           * Note:
 494           * ----------------------------------------------------------------------------
 495           */
 496          static S16_T clicmd_GetIp2Ulong(U8_T *pBuf, U8_T len, U32_T *ipAddr)
 497          {
 498   1              U8_T *point = (U8_T *)ipAddr;
 499   1              U8_T count = 0, digits;
 500   1          U16_T value;
 501   1      
 502   1              while (len > 0)
 503   1              {
 504   2                      digits = 0;
 505   2              value = 0;
 506   2                      while ((*pBuf != '.') && len > 0)
 507   2                      {
 508   3                              digits++;
 509   3                              if (digits > 3)
 510   3                                      return -1;
 511   3      
 512   3                  value *= 10;
 513   3        
 514   3                  if (IsDigit(*pBuf))
 515   3                      value += (*pBuf - 0x30);
 516   3                              else
 517   3                                      return -1;
 518   3      
 519   3                              pBuf++; len--;
 520   3                      }
 521   2      
 522   2              if (value > 255)
 523   2                  return -1;
 524   2      
 525   2              *point = (U8_T)(value & 0xFF);
 526   2      
 527   2                      if (len == 0)
 528   2                              break;
 529   2      
 530   2                      pBuf++; len--;
 531   2                      count++;
 532   2                      point++;
 533   2      
 534   2                      if (count > 3)
 535   2                              return -1;
 536   2              }
 537   1      
 538   1              if (count != 3)
 539   1                      return -1;
 540   1      
 541   1              return 1;
 542   1      } /* End of clicmd_GetIp2Ulong */
 543          
 544          /*
 545           * ----------------------------------------------------------------------------
 546           * Function Name: clicmd_ValidIp
 547           * Purpose: Check the IP validation
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 10  

 548           * Params:
 549           * Returns:
 550           * Note:
 551           * ----------------------------------------------------------------------------
 552           */
 553          static U8_T clicmd_ValidIp(U32_T ipAddr)
 554          {
 555   1          U8_T *point = (U8_T *)&ipAddr;
 556   1          
 557   1          /* class D/E */
 558   1          if ((point[0] & 0xF0) >= 0xE0)
 559   1              return 0;
 560   1      
 561   1          if (point[3] == 0xFF || point[3] == 0)
 562   1              return 0;
 563   1      
 564   1          /* Class C */
 565   1          if ((point[0] & 0xC0) && point[2] == 0xFF)
 566   1              return 0;
 567   1      
 568   1          return 1;
 569   1      } /* End of clicmd_ValidIp() */
 570          
 571          /*
 572           * ----------------------------------------------------------------------------
 573           * Function Name: clicmd_CheckIpInput
 574           * Purpose: Check the input data whether is IP format xxx.xxx.xxx.xxx
 575           * Params:
 576           * Returns:
 577           * Note:
 578           * ----------------------------------------------------------------------------
 579           */
 580          static S16_T clicmd_CheckIpInput(U8_T *pBuf)
 581          {
 582   1              U8_T *point = pBuf;
 583   1              U8_T len = 0;
 584   1      
 585   1          if (!pBuf || (len=strlen(pBuf)) == 0)
 586   1              return 0;
 587   1        
 588   1              while (len > 0)
 589   1              {
 590   2                      if (IsDigit(*point) || *point == '.')
 591   2              {
 592   3                  point++;
 593   3                  len --;
 594   3              }
 595   2              else
 596   2                  return 0;
 597   2          }
 598   1      
 599   1              return 1;
 600   1      } /* End of clicmd_CheckIpInput */
 601          
 602          
 603          /* EXPORTED SUBPROGRAM BODIES */
 604          
 605          /*
 606           * ----------------------------------------------------------------------------
 607           * Function Name: CLICMD_GetCmdTableSize()
 608           * Purpose:
 609           * Params:
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 11  

 610           * Returns:
 611           * Note:
 612           * ----------------------------------------------------------------------------
 613           */
 614          U16_T CLICMD_GetCmdTableSize(void)
 615          {
 616   1          return sizeof(CLICMD_userCmdTable)/sizeof(CONSOLE_CmdEntry);
 617   1      } /* End of CLICMD_GetCmdTableSize() */
 618          
 619          /*
 620           * ----------------------------------------------------------------------------
 621           * Function Name: clicmd_SetIp()
 622           * Purpose:
 623           * Params:
 624           * Returns:
 625           * Note:
 626           * ----------------------------------------------------------------------------
 627           */
 628          static S16_T clicmd_SetIp(CONSOLE_Inst *pInst)
 629          {
 630   1          U32_T addr;
 631   1          
 632   1          argc = pInst->Argc;
 633   1          argv = pInst->Argv;
 634   1          
 635   1          if (argc == 0) /* current setting */
 636   1          {
 637   2              addr = GCONFIG_GetServerStaticIP();
 638   2              CONSOLE_PutMessage(pInst, "IP address: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
 639   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
 640   2              return 1;
 641   2          }
 642   1          else if (argc > 1)
 643   1              return -1;
 644   1      
 645   1          if (clicmd_GetIp2Ulong(argv[0], strlen(argv[0]), &addr) > 0)
 646   1          {
 647   2              if (clicmd_ValidIp(addr))
 648   2                  GCONFIG_SetServerStaticIP(addr);
 649   2              else
 650   2                  return -1;
 651   2          }
 652   1          else
 653   1              return -1;
 654   1      
 655   1          return 1;
 656   1      } /* End of clicmd_SetIp() */
 657          
 658          /*
 659           * ----------------------------------------------------------------------------
 660           * Function Name: clicmd_SetIpHelp()
 661           * Purpose:
 662           * Params:
 663           * Returns:
 664           * Note:
 665           * ----------------------------------------------------------------------------
 666           */
 667          static S16_T clicmd_SetIpHelp(CONSOLE_Inst *pInst)
 668          {
 669   1          CONSOLE_PutMessage(pInst, "Usage: setip <ip addr>\r\n");
 670   1          return 1;
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 12  

 671   1      } /* End of clicmd_SetIpHelp() */
 672          
 673          /*
 674           * ----------------------------------------------------------------------------
 675           * Function Name: clicmd_SetMask()
 676           * Purpose:
 677           * Params:
 678           * Returns:
 679           * Note:
 680           * ----------------------------------------------------------------------------
 681           */
 682          static S16_T clicmd_SetMask(CONSOLE_Inst *pInst)
 683          {
 684   1          U32_T addr;
 685   1      
 686   1          argc = pInst->Argc;
 687   1          argv = pInst->Argv;
 688   1      
 689   1          if (argc == 0) /* current setting */
 690   1          {
 691   2              addr = GCONFIG_GetNetmask();
 692   2              CONSOLE_PutMessage(pInst, "Netmask: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
 693   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
 694   2              return 1;
 695   2          }
 696   1          else if (argc > 1)
 697   1              return -1;
 698   1      
 699   1          if (clicmd_GetIp2Ulong(argv[0], strlen(argv[0]), &addr) > 0)
 700   1              GCONFIG_SetNetmask(addr);
 701   1          else
 702   1              return -1;
 703   1      
 704   1          return 1;
 705   1      } /* End of clicmd_SetMask() */
 706          
 707          /*
 708           * ----------------------------------------------------------------------------
 709           * Function Name: clicmd_SetMaskHelp()
 710           * Purpose:
 711           * Params:
 712           * Returns:
 713           * Note:
 714           * ----------------------------------------------------------------------------
 715           */
 716          static S16_T clicmd_SetMaskHelp(CONSOLE_Inst *pInst)
 717          {
 718   1          CONSOLE_PutMessage(pInst, "Usage: setmask <netmask>\r\n");
 719   1          return 1;
 720   1      } /* End of clicmd_SetMaskHelp() */
 721          
 722          /*
 723           * ----------------------------------------------------------------------------
 724           * Function Name: clicmd_SetGateway()
 725           * Purpose:
 726           * Params:
 727           * Returns:
 728           * Note:
 729           * ----------------------------------------------------------------------------
 730           */
 731          static S16_T clicmd_SetGateway(CONSOLE_Inst *pInst)
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 13  

 732          {
 733   1          U32_T addr;
 734   1      
 735   1          argc = pInst->Argc;
 736   1          argv = pInst->Argv;
 737   1      
 738   1          if (argc == 0) /* current setting */
 739   1          {
 740   2              addr = GCONFIG_GetGateway();
 741   2              CONSOLE_PutMessage(pInst, "Gateway: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
 742   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
 743   2              return 1;
 744   2          }
 745   1          else if (argc > 1)
 746   1              return -1;
 747   1      
 748   1          if (clicmd_GetIp2Ulong(argv[0], strlen(argv[0]), &addr) > 0)
 749   1          {
 750   2              if (clicmd_ValidIp(addr))
 751   2              GCONFIG_SetGateway(addr);
 752   2              else
 753   2                  return -1;
 754   2          }
 755   1          else
 756   1              return -1;
 757   1      
 758   1          return 1;
 759   1      } /* End of clicmd_SetGateway() */
 760          
 761          /*
 762           * ----------------------------------------------------------------------------
 763           * Function Name: clicmd_SetGatewayHelp()
 764           * Purpose:
 765           * Params:
 766           * Returns:
 767           * Note:
 768           * ----------------------------------------------------------------------------
 769           */
 770          static S16_T clicmd_SetGatewayHelp(CONSOLE_Inst *pInst)
 771          {
 772   1          CONSOLE_PutMessage(pInst, "Usage: setgateway <ip addr>\r\n");
 773   1          return 1;
 774   1      } /* End of clicmd_SetGatewayHelp() */
 775          
 776          /*
 777           * ----------------------------------------------------------------------------
 778           * Function Name: clicmd_SetDnsIp()
 779           * Purpose:
 780           * Params:
 781           * Returns:
 782           * Note:
 783           * ----------------------------------------------------------------------------
 784           */
 785          static S16_T clicmd_SetDnsIp(CONSOLE_Inst *pInst)
 786          {
 787   1          U32_T addr;
 788   1      
 789   1          argc = pInst->Argc;
 790   1          argv = pInst->Argv;
 791   1      
 792   1          if (argc == 0) /* current setting */
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 14  

 793   1          {
 794   2              addr = GCONFIG_GetDNS();
 795   2              CONSOLE_PutMessage(pInst, "DNS IP: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
 796   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
 797   2              return 1;
 798   2          }
 799   1          else if (argc > 1)
 800   1              return -1;
 801   1      
 802   1          if (clicmd_GetIp2Ulong(argv[0], strlen(argv[0]), &addr) > 0)
 803   1          {
 804   2              if (clicmd_ValidIp(addr))
 805   2              GCONFIG_SetDNS(addr);
 806   2              else
 807   2                  return -1;
 808   2          }
 809   1          else
 810   1              return -1;
 811   1      
 812   1          return 1;
 813   1      } /* End of clicmd_SetDnsIp() */
 814          
 815          /*
 816           * ----------------------------------------------------------------------------
 817           * Function Name: clicmd_SetDnsIpHelp()
 818           * Purpose:
 819           * Params:
 820           * Returns:
 821           * Note:
 822           * ----------------------------------------------------------------------------
 823           */
 824          static S16_T clicmd_SetDnsIpHelp(CONSOLE_Inst *pInst)
 825          {
 826   1          CONSOLE_PutMessage(pInst, "Usage: setdns <ip addr>\r\n");
 827   1          return 1;
 828   1      } /* End of clicmd_SetDnsIpHelp() */
 829          
 830          /*
 831           * ----------------------------------------------------------------------------
 832           * Function Name: clicmd_SetSerialPort()
 833           * Purpose:
 834           * Params:
 835           * Returns:
 836           * Note:
 837           * ----------------------------------------------------------------------------
 838           */
 839          static S16_T clicmd_SetSerialPort(CONSOLE_Inst *pInst)
 840          {
 841   1          S16_T temp16;
 842   1          U8_T temp8, *argP;
 843   1         
 844   1          argc = pInst->Argc;
 845   1          argv = pInst->Argv;
 846   1      
 847   1          temp16 = GCONFIG_GetSerialPort();
 848   1          if (argc == 0) /* current setting */
 849   1          {
 850   2              CONSOLE_PutMessage(pInst, "Serial Port Settings:\r\n");
 851   2              CONSOLE_PutMessage(pInst, "    <baud rate>: ");
 852   2              temp8 = ((temp16>>11) & 0x1f);
 853   2              switch (temp8)
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 15  

 854   2              {
 855   3                  case 0:
 856   3                      CONSOLE_PutMessage(pInst, "921600\r\n");
 857   3                      break;
 858   3                  case 1:
 859   3                      CONSOLE_PutMessage(pInst, "115200\r\n");
 860   3                      break;
 861   3                  case 2:
 862   3                      CONSOLE_PutMessage(pInst, "57600\r\n");
 863   3                      break;
 864   3                  case 3:
 865   3                      CONSOLE_PutMessage(pInst, "38400\r\n");
 866   3                      break;
 867   3                  case 4:
 868   3                      CONSOLE_PutMessage(pInst, "19200\r\n");
 869   3                      break;
 870   3                  case 5:
 871   3                      CONSOLE_PutMessage(pInst, "9600\r\n");
 872   3                      break;
 873   3                  case 6:
 874   3                      CONSOLE_PutMessage(pInst, "4800\r\n");
 875   3                      break;
 876   3                  case 7:
 877   3                      CONSOLE_PutMessage(pInst, "2400\r\n");
 878   3                      break;
 879   3                  case 8:
 880   3                      CONSOLE_PutMessage(pInst, "1200\r\n");
 881   3                      break;
 882   3                  default:
 883   3                      CONSOLE_PutMessage(pInst, "\r\n");
 884   3                      break;
 885   3              }
 886   2      
 887   2              CONSOLE_PutMessage(pInst, "    <data bits>: ");
 888   2              temp8 = ((temp16>>8) & 0x7);
 889   2              switch (temp8)
 890   2              {
 891   3                  case 0: 
 892   3                      CONSOLE_PutMessage(pInst, "5 bits\r\n");
 893   3                      break;
 894   3                  case 1: 
 895   3                      CONSOLE_PutMessage(pInst, "6 bits\r\n");
 896   3                      break;
 897   3                  case 2: 
 898   3                      CONSOLE_PutMessage(pInst, "7 bits\r\n");
 899   3                      break;
 900   3                  default: 
 901   3                      CONSOLE_PutMessage(pInst, "8 bits\r\n");
 902   3                      break;
 903   3              }
 904   2              
 905   2              CONSOLE_PutMessage(pInst, "    <parity>: ");
 906   2              temp8 = ((temp16>>5) & 0x7);
 907   2                  if (temp8 == 2) CONSOLE_PutMessage(pInst, "None\r\n");
 908   2                  else if (temp8 == 1) CONSOLE_PutMessage(pInst, "Even\r\n");
 909   2              else if (temp8 == 0) CONSOLE_PutMessage(pInst, "Odd\r\n");
 910   2      
 911   2              CONSOLE_PutMessage(pInst, "    <stop bits>: ");
 912   2              temp8 = (temp16 & 0x3);
 913   2              if (temp8 == 0) 
 914   2                  CONSOLE_PutMessage(pInst, "1\r\n");
 915   2              else if (temp8 == 1)
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 16  

 916   2                  CONSOLE_PutMessage(pInst, "1.5\r\n");
 917   2              else if (temp8 == 2)
 918   2                  CONSOLE_PutMessage(pInst, "2\r\n");
 919   2      
 920   2              CONSOLE_PutMessage(pInst, "    <flow ctrl>: ");
 921   2              temp8 = ((temp16>>2) & 0x7);
 922   2              if (temp8 == 0) 
 923   2                  CONSOLE_PutMessage(pInst, "Xon/Xoff\r\n");
 924   2              else if (temp8 == 1)
 925   2                  CONSOLE_PutMessage(pInst, "Hardware\r\n");
 926   2              else if(temp8 == 2)
 927   2                  CONSOLE_PutMessage(pInst, "None\r\n");
 928   2      
 929   2              return 1;
 930   2          }
 931   1          else if (argc != 5)
 932   1              return -1;
 933   1      
 934   1          /* baud rate */
 935   1          argP = argv[0];
 936   1          if ((strlen(argP) == 1) && IsDigit(*argP))
 937   1          {
 938   2              temp8 = *argP - 0x30;
 939   2              temp16 &= 0x7FF;
 940   2              temp16 |= (temp8 << 11);
 941   2          }
 942   1          /* data bits */
 943   1          argP = argv[1];
 944   1          if ((strlen(argP) == 1) && IsDigit(*argP))
 945   1          {
 946   2              temp8 = *argP - 0x30;
 947   2              temp16 &= 0xF8FF;
 948   2              temp16 |= (temp8 << 8);
 949   2          }
 950   1          /* parity */
 951   1          argP = argv[2];
 952   1          if ((strlen(argP) == 1) && IsDigit(*argP))
 953   1          {
 954   2              temp8 = *argP - 0x30;
 955   2              temp16 &= 0xFF1F;
 956   2              temp16 |= (temp8 << 5);
 957   2          }
 958   1      
 959   1          /* stop bits */
 960   1          argP = argv[3];
 961   1          if ((strlen(argP) == 1) && IsDigit(*argP))
 962   1          {
 963   2              temp8 = *argP - 0x30;
 964   2              temp16 &= 0xFFFC;
 965   2              temp16 |= temp8;
 966   2          }
 967   1          
 968   1          /* flow ctrl */
 969   1          argP = argv[4];
 970   1          if ((strlen(argP) == 1) && IsDigit(*argP))
 971   1          {
 972   2              temp8 = *argP - 0x30;
 973   2              temp16 &= 0xFFE3;
 974   2              temp16 |= (temp8<<2);
 975   2          }
 976   1      
 977   1          GCONFIG_SetSerialPort(temp16);
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 17  

 978   1      
 979   1          return 1;
 980   1      } /* End of clicmd_SetSerialPort() */
 981          
 982          /*
 983           * ----------------------------------------------------------------------------
 984           * Function Name: clicmd_SetSerialPortHelp()
 985           * Purpose:
 986           * Params:
 987           * Returns:
 988           * Note:
 989           * ----------------------------------------------------------------------------
 990           */
 991          static S16_T clicmd_SetSerialPortHelp(CONSOLE_Inst *pInst)
 992          {
 993   1          CONSOLE_PutMessage(pInst, "Usage: serialport <baud rate> <data bits> <parity> <stop bits> <flow ctrl>\
             -r\n");
 994   1          CONSOLE_PutMessage(pInst, "       <baud rate>: 0: 921600     5: 9600\r\n");
 995   1          CONSOLE_PutMessage(pInst, "                    1: 115200     6: 4800\r\n");
 996   1          CONSOLE_PutMessage(pInst, "                    2: 57600      7: 2400\r\n");
 997   1          CONSOLE_PutMessage(pInst, "                    3: 38400      8: 1200\r\n");
 998   1          CONSOLE_PutMessage(pInst, "                    4: 19200\r\n");
 999   1          CONSOLE_PutMessage(pInst, "       <data bits>: 0: 5      2: 7\r\n");
1000   1          CONSOLE_PutMessage(pInst, "                    1: 6      3: 8\r\n");
1001   1          CONSOLE_PutMessage(pInst, "       <parity>:    0: Odd    2: None\r\n");
1002   1          CONSOLE_PutMessage(pInst, "                    1: Even\r\n");
1003   1          CONSOLE_PutMessage(pInst, "       <stop bits>: 0: 1      1: 1.5      2: 2\r\n");
1004   1          CONSOLE_PutMessage(pInst, "       <flow ctrl>: 0: Xon/Xoff     2: None\r\n");
1005   1          CONSOLE_PutMessage(pInst, "                    1: Hardware\r\n");
1006   1          return 1;
1007   1      } /* End of clicmd_SetBaudRateHelp() */
1008          
1009          /*
1010           * ----------------------------------------------------------------------------
1011           * Function Name: clicmd_SetDeviceMode()
1012           * Purpose:
1013           * Params:
1014           * Returns:
1015           * Note:
1016           * ----------------------------------------------------------------------------
1017           */
1018          static S16_T clicmd_SetDeviceMode(CONSOLE_Inst *pInst)
1019          {
1020   1          U16_T temp16;
1021   1          U8_T temp8, *argP;
1022   1      
1023   1          argc = pInst->Argc;
1024   1          argv = pInst->Argv;
1025   1      
1026   1          temp16 = GCONFIG_GetNetwork();
1027   1          if (argc == 0) /* current setting */
1028   1          {
1029   2              temp16 &= GCONFIG_NETWORK_CLIENT;
1030   2              if (temp16)
1031   2                  CONSOLE_PutMessage(pInst, "Device Mode: CLIENT mode\r\n");
1032   2              else
1033   2                  CONSOLE_PutMessage(pInst, "Device Mode: SERVER mode\r\n");
1034   2              return 1;
1035   2          }
1036   1          else if (argc > 1)
1037   1              return -1;
1038   1          
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 18  

1039   1          argP = argv[0];
1040   1          if ((strlen(argP) == 1) && IsDigit(*argP))
1041   1              temp8 = *argP - 0x30;
1042   1          else
1043   1              return -1;
1044   1      
1045   1          temp16 &= ~GCONFIG_NETWORK_CLIENT;
1046   1          if (temp8)
1047   1              temp16 |= GCONFIG_NETWORK_CLIENT;
1048   1      
1049   1          GCONFIG_SetNetwork(temp16);
1050   1      
1051   1          return 1;
1052   1      
1053   1      } /* End of clicmd_SetDeviceMode() */
1054          
1055          /*
1056           * ----------------------------------------------------------------------------
1057           * Function Name: clicmd_SetDeviceModeHelp()
1058           * Purpose:
1059           * Params:
1060           * Returns:
1061           * Note:
1062           * ----------------------------------------------------------------------------
1063           */
1064          static S16_T clicmd_SetDeviceModeHelp(CONSOLE_Inst *pInst)
1065          {
1066   1          CONSOLE_PutMessage(pInst, "Usage: setmode <mode>\r\n");
1067   1          CONSOLE_PutMessage(pInst, "       <mode>: 0: SERVER     1: CLIENT\r\n");
1068   1      
1069   1          return 1;
1070   1      
1071   1      } /* End of clicmd_SetDeviceModeHelp() */
1072          
1073          /*
1074           * ----------------------------------------------------------------------------
1075           * Function Name: clicmd_SetServerPort()
1076           * Purpose:
1077           * Params:
1078           * Returns:
1079           * Note:
1080           * ----------------------------------------------------------------------------
1081           */
1082          static S16_T clicmd_SetServerPort(CONSOLE_Inst *pInst)
1083          {
1084   1          U16_T temp16;
1085   1          U8_T *argP;
1086   1          
1087   1          argc = pInst->Argc;
1088   1          argv = pInst->Argv;
1089   1          
1090   1          if (argc == 0) /* current setting */
1091   1          {
1092   2              temp16 = GCONFIG_GetServerDataPktListenPort();
1093   2              CONSOLE_PutMessage(pInst, "Server Port: %u\r\n", temp16);
1094   2      
1095   2              return 1;
1096   2          }
1097   1          else if (argc > 1)
1098   1              return -1;
1099   1          
1100   1          argP = argv[0];
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 19  

1101   1          if (strlen(argP) <= 4)
1102   1              temp16 = atoi(argP);
1103   1          else
1104   1              return -1;
1105   1      
1106   1          if (temp16 < 1024)
1107   1              return -1;
1108   1          
1109   1          GCONFIG_SetServerDataPktListenPort(temp16);
1110   1      
1111   1          return 1;
1112   1      
1113   1      } /* End of clicmd_SetServerPort() */
1114          
1115          /*
1116           * ----------------------------------------------------------------------------
1117           * Function Name: clicmd_SetServerPortHelp()
1118           * Purpose:
1119           * Params:
1120           * Returns:
1121           * Note:
1122           * ----------------------------------------------------------------------------
1123           */
1124          static S16_T clicmd_SetServerPortHelp(CONSOLE_Inst *pInst)
1125          {
1126   1          CONSOLE_PutMessage(pInst, "Usage: setsrvport <port>\r\n");
1127   1      
1128   1          return 1;
1129   1      } /* End of clicmd_SetServerPortHelp() */
1130          
1131          /*
1132           * ----------------------------------------------------------------------------
1133           * Function Name: clicmd_SetEtherTimer()
1134           * Purpose:
1135           * Params:
1136           * Returns:
1137           * Note:
1138           * ----------------------------------------------------------------------------
1139           */
1140          static S16_T clicmd_SetEtherTimer(CONSOLE_Inst *pInst)
1141          {
1142   1          U16_T temp16;
1143   1          U8_T *argP;
1144   1      
1145   1          argc = pInst->Argc;
1146   1          argv = pInst->Argv;
1147   1      
1148   1          if (argc == 0) /* current setting */
1149   1          {
1150   2              temp16 = GCONFIG_GetEthernetTxTimer();
1151   2              CONSOLE_PutMessage(pInst, "Transmit Timer: %u\r\n", temp16);
1152   2      
1153   2              return 1;
1154   2          }
1155   1          else if (argc > 1)
1156   1              return -1;
1157   1          
1158   1          argP = argv[0];
1159   1          if (strlen(argP) <= 4)
1160   1              temp16 = atoi(argP);
1161   1          else
1162   1              return -1;
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 20  

1163   1      
1164   1          if (temp16 < 10)
1165   1              return -1;
1166   1      
1167   1          GCONFIG_SetEthernetTxTimer(temp16);
1168   1      
1169   1          return 1;
1170   1      } /* End of clicmd_SetEtherTimer() */
1171          
1172          /*
1173           * ----------------------------------------------------------------------------
1174           * Function Name: clicmd_SetEtherTimerHelp()
1175           * Purpose:
1176           * Params:
1177           * Returns:
1178           * Note:
1179           * ----------------------------------------------------------------------------
1180           */
1181          static S16_T clicmd_SetEtherTimerHelp(CONSOLE_Inst *pInst)
1182          {
1183   1          CONSOLE_PutMessage(pInst, "Usage: transmitimer <time>\r\n");
1184   1          CONSOLE_PutMessage(pInst, "       <time>: time in ms\r\n");
1185   1      
1186   1          return 1;
1187   1      } /* End of clicmd_SetEtherTimerHelp() */
1188          
1189          /*
1190           * ----------------------------------------------------------------------------
1191           * Function Name: clicmd_SetRemotPort()
1192           * Purpose:
1193           * Params:
1194           * Returns:
1195           * Note:
1196           * ----------------------------------------------------------------------------
1197           */
1198          static S16_T clicmd_SetRemotePort(CONSOLE_Inst *pInst)
1199          {
1200   1          U16_T temp16;
1201   1          U8_T *argP;
1202   1      
1203   1          argc = pInst->Argc;
1204   1          argv = pInst->Argv;
1205   1      
1206   1          if (argc == 0) /* current setting */
1207   1          {
1208   2              temp16 = GCONFIG_GetClientDestPort();
1209   2              CONSOLE_PutMessage(pInst, "Destination Port: %u\r\n", temp16);
1210   2      
1211   2              return 1;
1212   2          }
1213   1          else if (argc > 1)
1214   1              return -1;
1215   1          
1216   1          argP = argv[0];
1217   1          if (strlen(argP) <= 4)
1218   1              temp16 = atoi(argP);
1219   1          else
1220   1              return -1;
1221   1      
1222   1          GCONFIG_SetClientDestPort(temp16);
1223   1      
1224   1          return 1;
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 21  

1225   1      
1226   1      } /* End of clicmd_SetRemotPort() */
1227          
1228          /*
1229           * ----------------------------------------------------------------------------
1230           * Function Name: clicmd_SetRemotePortHelp()
1231           * Purpose:
1232           * Params:
1233           * Returns:
1234           * Note:
1235           * ----------------------------------------------------------------------------
1236           */
1237          static S16_T clicmd_SetRemotePortHelp(CONSOLE_Inst *pInst)
1238          {
1239   1          CONSOLE_PutMessage(pInst, "Usage: setdstport <port>\r\n");
1240   1      
1241   1          return 1;
1242   1      } /* End of clicmd_SetRemotePortHelp() */
1243          
1244          /*
1245           * ----------------------------------------------------------------------------
1246           * Function Name: clicmd_SetDhcpClient()
1247           * Purpose:
1248           * Params:
1249           * Returns:
1250           * Note:
1251           * ----------------------------------------------------------------------------
1252           */
1253          static S16_T clicmd_SetDhcpClient(CONSOLE_Inst *pInst)
1254          {
1255   1          U16_T temp16;
1256   1          U8_T temp8, *argP;
1257   1      
1258   1          argc = pInst->Argc;
1259   1          argv = pInst->Argv;
1260   1      
1261   1          temp16 = GCONFIG_GetNetwork();
1262   1          if (argc == 0) /* current setting */
1263   1          {
1264   2              temp16 &= GCONFIG_NETWORK_DHCP_ENABLE;
1265   2              if (temp16)
1266   2                  CONSOLE_PutMessage(pInst, "DHCP Client: enable\r\n");
1267   2              else
1268   2                  CONSOLE_PutMessage(pInst, "DHCP Client: disable\r\n");
1269   2              return 1;
1270   2          }
1271   1          else if (argc > 1)
1272   1              return -1;
1273   1          
1274   1          argP = argv[0];
1275   1          if ((strlen(argP) == 1) && IsDigit(*argP))
1276   1              temp8 = *argP - 0x30;
1277   1          else
1278   1              return -1;
1279   1      
1280   1          temp16 &= ~GCONFIG_NETWORK_DHCP_ENABLE;
1281   1          if (temp8)
1282   1              temp16 |= GCONFIG_NETWORK_DHCP_ENABLE;
1283   1      
1284   1          GCONFIG_SetNetwork(temp16);
1285   1      
1286   1          return 1;
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 22  

1287   1      
1288   1      } /* End of clicmd_SetDhcpClient() */
1289          
1290          /*
1291           * ----------------------------------------------------------------------------
1292           * Function Name: clicmd_SetDhcpClientHelp()
1293           * Purpose:
1294           * Params:
1295           * Returns:
1296           * Note:
1297           * ----------------------------------------------------------------------------
1298           */
1299          static S16_T clicmd_SetDhcpClientHelp(CONSOLE_Inst *pInst)
1300          {
1301   1          CONSOLE_PutMessage(pInst, "Usage: dhcpclient <status>\r\n");
1302   1          CONSOLE_PutMessage(pInst, "       <status>: 0: disable     1: enable\r\n");
1303   1      
1304   1          return 1;
1305   1      
1306   1      } /* End of clicmd_SetDhcpClientHelp() */
1307          
1308          /*
1309           * ----------------------------------------------------------------------------
1310           * Function Name: clicmd_SetConnectType()
1311           * Purpose:
1312           * Params:
1313           * Returns:
1314           * Note:
1315           * ----------------------------------------------------------------------------
1316           */
1317          static S16_T clicmd_SetConnectType(CONSOLE_Inst *pInst)
1318          {
1319   1          U16_T temp16;
1320   1          U8_T temp8, *argP;
1321   1      
1322   1          argc = pInst->Argc;
1323   1          argv = pInst->Argv;
1324   1      
1325   1          temp16 = GCONFIG_GetNetwork();
1326   1          if (argc == 0) /* current setting */
1327   1          {
1328   2              temp16 &= (GCONFIG_NETWORK_PROTO_UDP | GCONFIG_NETWORK_PROTO_TCP);
1329   2              if (temp16 & GCONFIG_NETWORK_PROTO_UDP)
1330   2                  CONSOLE_PutMessage(pInst, "Connection Type: UDP\r\n");
1331   2              else if (temp16 & GCONFIG_NETWORK_PROTO_TCP)
1332   2                  CONSOLE_PutMessage(pInst, "Connection Type: TCP\r\n");
1333   2      
1334   2              return 1;
1335   2          }
1336   1          else if (argc > 1)
1337   1              return -1;
1338   1          
1339   1          argP = argv[0];
1340   1          if ((strlen(argP) == 1) && IsDigit(*argP))
1341   1              temp8 = *argP - 0x30;
1342   1          else
1343   1              return -1;
1344   1      
1345   1          temp16 &= ~(GCONFIG_NETWORK_PROTO_UDP | GCONFIG_NETWORK_PROTO_TCP);
1346   1          if (temp8)
1347   1              temp16 |= GCONFIG_NETWORK_PROTO_UDP;
1348   1          else
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 23  

1349   1              temp16 |= GCONFIG_NETWORK_PROTO_TCP;
1350   1      
1351   1          GCONFIG_SetNetwork(temp16);
1352   1      
1353   1          return 1;
1354   1      
1355   1      } /* End of clicmd_SetConnectType() */
1356          
1357          /*
1358           * ----------------------------------------------------------------------------
1359           * Function Name: clicmd_SetConnectTypeHelp()
1360           * Purpose:
1361           * Params:
1362           * Returns:
1363           * Note:
1364           * ----------------------------------------------------------------------------
1365           */
1366          static S16_T clicmd_SetConnectTypeHelp(CONSOLE_Inst *pInst)
1367          {
1368   1          CONSOLE_PutMessage(pInst, "Usage: connectype <protocol>\r\n");
1369   1          CONSOLE_PutMessage(pInst, "       <protocol>: 0: TCP     1: UDP\r\n");
1370   1      
1371   1          return 1;
1372   1      
1373   1      } /* End of clicmd_SetDhcpClientHelp() */
1374          
1375          /*
1376           * ----------------------------------------------------------------------------
1377           * Function Name: clicmd_SaveConfig()
1378           * Purpose:
1379           * Params:
1380           * Returns:
1381           * Note:
1382           * ----------------------------------------------------------------------------
1383           */
1384          static S16_T clicmd_SaveConfig(CONSOLE_Inst *pInst)
1385          {
1386   1          argc = pInst->Argc;
1387   1      
1388   1          if (argc == 0) /* current setting */
1389   1          {
1390   2              CONSOLE_PutMessage(pInst, "Saving Configuration to FLASH\r\n");
1391   2              GCONFIG_WriteConfigData();
1392   2              return 1;
1393   2          }
1394   1      
1395   1          return 1;
1396   1      } /* End of clicmd_SaveConfig() */
1397          
1398          /*
1399           * ----------------------------------------------------------------------------
1400           * Function Name: clicmd_SaveConfigHelp()
1401           * Purpose:
1402           * Params:
1403           * Returns:
1404           * Note:
1405           * ----------------------------------------------------------------------------
1406           */
1407          static S16_T clicmd_SaveConfigHelp(CONSOLE_Inst *pInst)
1408          {
1409   1          CONSOLE_PutMessage(pInst, "Usage: saveconfig\r\n");
1410   1          return 1;
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 24  

1411   1      } /* End of clicmd_SaveConfigHelp() */
1412          
1413          /*
1414           * ----------------------------------------------------------------------------
1415           * Function Name: clicmd_SetUsername()
1416           * Purpose:
1417           * Params:
1418           * Returns:
1419           * Note:
1420           * ----------------------------------------------------------------------------
1421           */
1422          static S16_T clicmd_SetUsername(CONSOLE_Inst *pInst)
1423          {
1424   1          argc = pInst->Argc;
1425   1          argv = pInst->Argv;
1426   1      
1427   1          if (argc == 1) /* current setting */
1428   1          {
1429   2              if (CONSOLE_ChangeUsername(pInst, argv[0]) < 0)
1430   2                  return -1;
1431   2          }
1432   1      
1433   1          return 1;
1434   1      } /* End of clicmd_SetUsername() */
1435          
1436          /*
1437           * ----------------------------------------------------------------------------
1438           * Function Name: clicmd_SetUsernameHelp()
1439           * Purpose:
1440           * Params:
1441           * Returns:
1442           * Note:
1443           * ----------------------------------------------------------------------------
1444           */
1445          static S16_T clicmd_SetUsernameHelp(CONSOLE_Inst *pInst)
1446          {
1447   1          CONSOLE_PutMessage(pInst, "Usage: username <user name>\r\n");
1448   1          return 1;
1449   1      } /* End of clicmd_SetUsernameHelp() */
1450          
1451          /*
1452           * ----------------------------------------------------------------------------
1453           * Function Name: clicmd_GetIpConfig()
1454           * Purpose:
1455           * Params:
1456           * Returns:
1457           * Note:
1458           * ----------------------------------------------------------------------------
1459           */
1460          static S16_T clicmd_GetIpConfig(CONSOLE_Inst *pInst)
1461          {
1462   1          U8_T addr[4];
1463   1      
1464   1          argc = pInst->Argc;
1465   1          argv = pInst->Argv;
1466   1      
1467   1          if (argc == 0)
1468   1          {
1469   2              *(U32_T *)&addr[0] = TCPIP_GetIPAddr();
1470   2              CONSOLE_PutMessage(pInst, "Current IP: %bu.%bu.%bu.%bu\r\n", addr[0], addr[1], addr[2], addr[3]);
1471   2              *(U32_T *)&addr[0] = TCPIP_GetSubnetMask();
1472   2              CONSOLE_PutMessage(pInst, "Current IP Mask: %bu.%bu.%bu.%bu\r\n", addr[0], addr[1], addr[2], addr[
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 25  

             -3]);
1473   2              *(U32_T *)&addr[0] = TCPIP_GetGateway();
1474   2              CONSOLE_PutMessage(pInst, "Current Gateway: %bu.%bu.%bu.%bu\r\n", addr[0], addr[1], addr[2], addr[
             -3]);
1475   2          }
1476   1      
1477   1          return 1;
1478   1      
1479   1      } /* End of clicmd_GetIpConfig() */
1480          
1481          /*
1482           * ----------------------------------------------------------------------------
1483           * Function Name: clicmd_GetIpConfigHelp()
1484           * Purpose:
1485           * Params:
1486           * Returns:
1487           * Note:
1488           * ----------------------------------------------------------------------------
1489           */
1490          static S16_T clicmd_GetIpConfigHelp(CONSOLE_Inst *pInst)
1491          {
1492   1          CONSOLE_PutMessage(pInst, "Usage: ipconfig\r\n");
1493   1      
1494   1          return 1;
1495   1      } /* End of clicmd_GetIpConfigHelp() */
1496          
1497          /*
1498           * ----------------------------------------------------------------------------
1499           * Function Name: clicmd_SetAccessibleIP()
1500           * Purpose:
1501           * Params:
1502           * Returns:
1503           * Note:
1504           * ----------------------------------------------------------------------------
1505           */
1506          static S16_T clicmd_SetAccessibleIP(CONSOLE_Inst *pInst)
1507          {
1508   1          U8_T temp8, *argP;
1509   1          U32_T addr;
1510   1      
1511   1          argc = pInst->Argc;
1512   1          argv = pInst->Argv;
1513   1      
1514   1          if (argc == 0)
1515   1          {
1516   2              CONSOLE_PutMessage(pInst, "Accessible IP List\r\n");
1517   2              for (temp8 = 0; temp8 < GCONFIG_ACCESSIBLE_IP_NUM; temp8++)
1518   2              {
1519   3                  GCONFIG_GetAccessibleIP(temp8, &addr);
1520   3                  CONSOLE_PutMessage(pInst, "IP(%bu): %bu.%bu.%bu.%bu\r\n", temp8, (U8_T)((addr>>24)&0x000000FF)
             -,
1521   3                                     (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x
             -000000FF));
1522   3              }
1523   2      
1524   2              return 1;
1525   2          }
1526   1          else if (argc < 2)
1527   1              return -1;
1528   1      
1529   1          argP = argv[0];
1530   1          if ((strlen(argP) == 1) && IsDigit(*argP))
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 26  

1531   1              temp8 = *argP - 0x30;
1532   1          else
1533   1              return -1;
1534   1      
1535   1          if (clicmd_GetIp2Ulong(argv[1], strlen(argv[1]), &addr) > 0)
1536   1          {
1537   2              if (clicmd_ValidIp(addr))
1538   2              {
1539   3                  if (GCONFIG_SetAccessibleIP(temp8, addr) < 0)
1540   3                      return -1;
1541   3              }
1542   2              else
1543   2                  return -1;
1544   2          }
1545   1          else
1546   1              return -1;
1547   1      
1548   1          return 1;
1549   1      
1550   1      } /* End of clicmd_SetAccessibleIP() */
1551          
1552          /*
1553           * ----------------------------------------------------------------------------
1554           * Function Name: clicmd_SetAccessibleIPHelp()
1555           * Purpose:
1556           * Params:
1557           * Returns:
1558           * Note:
1559           * ----------------------------------------------------------------------------
1560           */
1561          static S16_T clicmd_SetAccessibleIPHelp(CONSOLE_Inst *pInst)
1562          {
1563   1          CONSOLE_PutMessage(pInst, "Usage: accessip <index> <ip addr>\r\n");
1564   1          CONSOLE_PutMessage(pInst, "       <index>:   index of accessible IP\r\n");
1565   1          CONSOLE_PutMessage(pInst, "       <ip addr>: accessible IP address\r\n");
1566   1      
1567   1          return 1;
1568   1      } /* End of clicmd_SetAccessibleIPHelp() */
1569          
1570          /*
1571           * ----------------------------------------------------------------------------
1572           * Function Name: clicmd_ConfigAccessibleIP()
1573           * Purpose:
1574           * Params:
1575           * Returns:
1576           * Note:
1577           * ----------------------------------------------------------------------------
1578           */
1579          static S16_T clicmd_ConfigAccessibleIP(CONSOLE_Inst *pInst)
1580          {
1581   1          U16_T temp16;
1582   1          U8_T temp8, *argP;
1583   1      
1584   1          argc = pInst->Argc;
1585   1          argv = pInst->Argv;
1586   1      
1587   1          temp16 = GCONFIG_GetNetwork();
1588   1          if (argc == 0) /* current setting */
1589   1          {
1590   2              temp16 &= GCONFIG_NETWORK_ACC_IP_ENABLE;
1591   2              if (temp16)
1592   2                  CONSOLE_PutMessage(pInst, "Accessible IP Mode: Enable\r\n");
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 27  

1593   2              else
1594   2                  CONSOLE_PutMessage(pInst, "Accessible IP Mode: Disable\r\n");
1595   2      
1596   2              return 1;
1597   2          }
1598   1          else if (argc > 1)
1599   1              return -1;
1600   1          
1601   1          argP = argv[0];
1602   1          if ((strlen(argP) == 1) && IsDigit(*argP))
1603   1              temp8 = *argP - 0x30;
1604   1          else
1605   1              return -1;
1606   1      
1607   1          temp16 &= ~GCONFIG_NETWORK_ACC_IP_ENABLE;
1608   1          if (temp8)
1609   1              temp16 |= GCONFIG_NETWORK_ACC_IP_ENABLE;
1610   1      
1611   1          GCONFIG_SetNetwork(temp16);
1612   1      
1613   1          return 1;
1614   1      } /* End of clicmd_ConfigAccessibleIP() */
1615          
1616          /*
1617           * ----------------------------------------------------------------------------
1618           * Function Name: clicmd_ConfigAccessibleIPHelp()
1619           * Purpose:
1620           * Params:
1621           * Returns:
1622           * Note:
1623           * ----------------------------------------------------------------------------
1624           */
1625          static S16_T clicmd_ConfigAccessibleIPHelp(CONSOLE_Inst *pInst)
1626          {
1627   1          CONSOLE_PutMessage(pInst, "Usage: setaccip <mode>\r\n");
1628   1          CONSOLE_PutMessage(pInst, "       <mode>:  0: disable    1: enable\r\n");
1629   1          
1630   1          return 1;
1631   1      } /* End of clicmd_ConfigAccessibleIPHelp() */
1632          
1633          /*
1634           * ----------------------------------------------------------------------------
1635           * Function Name: clicmd_SetEmailServerAddr()
1636           * Purpose:
1637           * Params:
1638           * Returns:
1639           * Note:
1640           * ----------------------------------------------------------------------------
1641           */
1642          static S16_T clicmd_SetEmailServerAddr(CONSOLE_Inst *pInst)
1643          {
1644   1          argc = pInst->Argc;
1645   1          argv = pInst->Argv;
1646   1              
1647   1          if (argc == 0) /* current setting */
1648   1          {
1649   2                      GCONFIG_GetSMTPDomainName((U8_T*)StrBuf);
1650   2                      CONSOLE_PutMessage(pInst, "Current e-mail server address: %s\r\n", StrBuf);             
1651   2              return 1;
1652   2          }
1653   1          else if (argc > 1)
1654   1              return -1;
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 28  

1655   1                      GCONFIG_SetSMTPDomainName(argv[0], strlen(argv[0]));
1656   1          return 1;
1657   1      } /* End of clicmd_SetEmailServerAddr() */
1658          
1659          /*
1660           * ----------------------------------------------------------------------------
1661           * Function Name: clicmd_SetEmailServerAddrHelp()
1662           * Purpose:
1663           * Params:
1664           * Returns:
1665           * Note:
1666           * ----------------------------------------------------------------------------
1667           */
1668          static S16_T clicmd_SetEmailServerAddrHelp(CONSOLE_Inst *pInst)
1669          {
1670   1          CONSOLE_PutMessage(pInst, "Usage: setems <e-mail server domain name>\r\n");
1671   1          return 1;
1672   1      } /* End of clicmd_SetEmailServerAddrHelp() */
1673          
1674          /*
1675           * ----------------------------------------------------------------------------
1676           * Function Name: clicmd_SetEmailFromAddr()
1677           * Purpose:
1678           * Params:
1679           * Returns:
1680           * Note:
1681           * ----------------------------------------------------------------------------
1682           */
1683          static S16_T clicmd_SetEmailFromAddr(CONSOLE_Inst *pInst)
1684          {
1685   1          argc = pInst->Argc;
1686   1          argv = pInst->Argv;
1687   1              
1688   1          if (argc == 0) /* current setting */
1689   1          {
1690   2                      GCONFIG_GetSMTPFrom((U8_T*)StrBuf);
1691   2                      CONSOLE_PutMessage(pInst, "Current e-mail from address: %s\r\n", StrBuf);               
1692   2              return 1;
1693   2          }
1694   1          else if (argc > 1)
1695   1              return -1;
1696   1                      GCONFIG_SetSMTPFrom(argv[0], strlen(argv[0]));
1697   1          return 1;
1698   1      } /* End of clicmd_SetEmailFromAddr() */
1699          
1700          /*
1701           * ----------------------------------------------------------------------------
1702           * Function Name: clicmd_SetEmailFromAddrHelp()
1703           * Purpose:
1704           * Params:
1705           * Returns:
1706           * Note:
1707           * ----------------------------------------------------------------------------
1708           */
1709          static S16_T clicmd_SetEmailFromAddrHelp(CONSOLE_Inst *pInst)
1710          {
1711   1          CONSOLE_PutMessage(pInst, "Usage: setemf <e-mail address>\r\n");
1712   1          return 1;
1713   1      } /* End of clicmd_SetEmailFromAddrHelp() */
1714          
1715          /*
1716           * ----------------------------------------------------------------------------
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 29  

1717           * Function Name: clicmd_SetEmailTo1Addr()
1718           * Purpose:
1719           * Params:
1720           * Returns:
1721           * Note:
1722           * ----------------------------------------------------------------------------
1723           */
1724          static S16_T clicmd_SetEmailTo1Addr(CONSOLE_Inst *pInst)
1725          {
1726   1          argc = pInst->Argc;
1727   1          argv = pInst->Argv;
1728   1              
1729   1          if (argc == 0) /* current setting */
1730   1          {
1731   2                      GCONFIG_GetSMTPTo1((U8_T*)StrBuf);
1732   2                      CONSOLE_PutMessage(pInst, "Current e-mail to1 address: %s\r\n", StrBuf);                
1733   2              return 1;
1734   2          }
1735   1          else if (argc > 1)
1736   1              return -1;
1737   1                      GCONFIG_SetSMTPTo1(argv[0], strlen(argv[0]));
1738   1          return 1;
1739   1      } /* End of clicmd_SetEmailTo1Addr() */
1740          
1741          /*
1742           * ----------------------------------------------------------------------------
1743           * Function Name: clicmd_SetEmailTo1AddrHelp()
1744           * Purpose:
1745           * Params:
1746           * Returns:
1747           * Note:
1748           * ----------------------------------------------------------------------------
1749           */
1750          static S16_T clicmd_SetEmailTo1AddrHelp(CONSOLE_Inst *pInst)
1751          {
1752   1          CONSOLE_PutMessage(pInst, "Usage: setemt1 <e-mail address>\r\n");
1753   1          return 1;
1754   1      } /* End of clicmd_SetEmailTo1AddrHelp() */
1755          
1756          /*
1757           * ----------------------------------------------------------------------------
1758           * Function Name: clicmd_SetEmailTo2Addr()
1759           * Purpose:
1760           * Params:
1761           * Returns:
1762           * Note:
1763           * ----------------------------------------------------------------------------
1764           */
1765          static S16_T clicmd_SetEmailTo2Addr(CONSOLE_Inst *pInst)
1766          {
1767   1          argc = pInst->Argc;
1768   1          argv = pInst->Argv;
1769   1              
1770   1          if (argc == 0) /* current setting */
1771   1          {
1772   2                      GCONFIG_GetSMTPTo2((U8_T*)StrBuf);
1773   2                      CONSOLE_PutMessage(pInst, "Current e-mail to2 address: %s\r\n", StrBuf);                
1774   2              return 1;
1775   2          }
1776   1          else if (argc > 1)
1777   1              return -1;
1778   1                      GCONFIG_SetSMTPTo2(argv[0], strlen(argv[0]));
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 30  

1779   1          return 1;
1780   1      } /* End of clicmd_SetEmailTo2Addr() */
1781          
1782          /*
1783           * ----------------------------------------------------------------------------
1784           * Function Name: clicmd_SetEmailTo2AddrHelp()
1785           * Purpose:
1786           * Params:
1787           * Returns:
1788           * Note:
1789           * ----------------------------------------------------------------------------
1790           */
1791          static S16_T clicmd_SetEmailTo2AddrHelp(CONSOLE_Inst *pInst)
1792          {
1793   1          CONSOLE_PutMessage(pInst, "Usage: setemt2 <e-mail address>\r\n");
1794   1          return 1;
1795   1      } /* End of clicmd_SetEmailTo2AddrHelp() */
1796          
1797          /*
1798           * ----------------------------------------------------------------------------
1799           * Function Name: clicmd_SetEmailTo3Addr()
1800           * Purpose:
1801           * Params:
1802           * Returns:
1803           * Note:
1804           * ----------------------------------------------------------------------------
1805           */
1806          static S16_T clicmd_SetEmailTo3Addr(CONSOLE_Inst *pInst)
1807          {
1808   1          argc = pInst->Argc;
1809   1          argv = pInst->Argv;
1810   1              
1811   1          if (argc == 0) /* current setting */
1812   1          {
1813   2                      GCONFIG_GetSMTPTo3((U8_T*)StrBuf);
1814   2                      CONSOLE_PutMessage(pInst, "Current e-mail to3 address: %s\r\n", StrBuf);                
1815   2              return 1;
1816   2          }
1817   1          else if (argc > 1)
1818   1              return -1;
1819   1                      GCONFIG_SetSMTPTo3(argv[0], strlen(argv[0]));
1820   1          return 1;
1821   1      } /* End of clicmd_SetEmailTo3Addr() */
1822          
1823          /*
1824           * ----------------------------------------------------------------------------
1825           * Function Name: clicmd_SetEmailTo3AddrHelp()
1826           * Purpose:
1827           * Params:
1828           * Returns:
1829           * Note:
1830           * ----------------------------------------------------------------------------
1831           */
1832          static S16_T clicmd_SetEmailTo3AddrHelp(CONSOLE_Inst *pInst)
1833          {
1834   1          CONSOLE_PutMessage(pInst, "Usage: setemt3 <e-mail address>\r\n");
1835   1          return 1;
1836   1      } /* End of clicmd_SetEmailTo3AddrHelp() */
1837          
1838          /*
1839           * ----------------------------------------------------------------------------
1840           * Function Name: clicmd_GetEmailconfig()
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 31  

1841           * Purpose:
1842           * Params:
1843           * Returns:
1844           * Note:
1845           * ----------------------------------------------------------------------------
1846           */
1847          static S16_T clicmd_GetEmailConfig(CONSOLE_Inst *pInst)
1848          {
1849   1          argc = pInst->Argc;
1850   1          if (argc == 0)
1851   1          {
1852   2                      GCONFIG_GetSMTPDomainName((U8_T*)StrBuf);
1853   2                      CONSOLE_PutMessage(pInst, "Current e-mail server address: %s\r\n", StrBuf);
1854   2                      GCONFIG_GetSMTPFrom((U8_T*)StrBuf);             
1855   2                      CONSOLE_PutMessage(pInst, "Current e-mail from address: %s\r\n", StrBuf);
1856   2                      GCONFIG_GetSMTPTo1((U8_T*)StrBuf);              
1857   2                      CONSOLE_PutMessage(pInst, "Current e-mail To1 address: %s\r\n", StrBuf);
1858   2                      GCONFIG_GetSMTPTo2((U8_T*)StrBuf);              
1859   2                      CONSOLE_PutMessage(pInst, "Current e-mail To2 address: %s\r\n", StrBuf);
1860   2                      GCONFIG_GetSMTPTo3((U8_T*)StrBuf);
1861   2                      CONSOLE_PutMessage(pInst, "Current e-mail To3 address: %s\r\n", StrBuf);
1862   2          }
1863   1      
1864   1          return 1;
1865   1      
1866   1      } /* End of clicmd_GetEmailconfig() */
1867          
1868          /*
1869           * ----------------------------------------------------------------------------
1870           * Function Name: clicmd_GetEmailconfigHelp()
1871           * Purpose:
1872           * Params:
1873           * Returns:
1874           * Note:
1875           * ----------------------------------------------------------------------------
1876           */
1877          static S16_T clicmd_GetEmailConfigHelp(CONSOLE_Inst *pInst)
1878          {
1879   1          CONSOLE_PutMessage(pInst, "Usage: emconfig\r\n");
1880   1      
1881   1          return 1;
1882   1      } /* End of clicmd_GetEmailconfigHelp() */
1883          
1884          /*
1885           * ----------------------------------------------------------------------------
1886           * Function Name: clicmd_SetAWconfig()
1887           * Purpose:
1888           * Params:
1889           * Returns:
1890           * Note:
1891           * ----------------------------------------------------------------------------
1892           */
1893          static S16_T clicmd_SetAWConfig(CONSOLE_Inst *pInst)
1894          {
1895   1          S16_T temp16;
1896   1          U8_T temp8, *argP;
1897   1          
1898   1          argc = pInst->Argc;
1899   1          argv = pInst->Argv;
1900   1      
1901   1          temp16 = GCONFIG_GetAutoWarning();
1902   1          if (argc == 0) /* current setting */
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 32  

1903   1          {
1904   2                      CONSOLE_PutMessage(pInst,"  Auto Warning Settings:\r\n");
1905   2                      if (temp16 & GCONFIG_SMTP_EVENT_COLDSTART) 
1906   2                              CONSOLE_PutMessage(pInst,"  Cold start auto warning:           Enable\r\n");
1907   2                      else
1908   2                              CONSOLE_PutMessage(pInst,"  Cold start auto warning:           Disable\r\n");
1909   2                              
1910   2                      if (temp16 & GCONFIG_SMTP_EVENT_AUTH_FAIL) 
1911   2                              CONSOLE_PutMessage(pInst,"  Authentication fail auto warning:  Enable\r\n");
1912   2                      else
1913   2                              CONSOLE_PutMessage(pInst,"  Authentication fail auto warning:  Disable\r\n");
1914   2                              
1915   2                      if (temp16 & GCONFIG_SMTP_EVENT_IP_CHANGED) 
1916   2                              CONSOLE_PutMessage(pInst,"  Local IP changed auto warning:     Enable\r\n");
1917   2                      else
1918   2                              CONSOLE_PutMessage(pInst,"  Local IP changed auto warning:     Disable\r\n");
1919   2                              
1920   2                      if (temp16 & GCONFIG_SMTP_EVENT_PSW_CHANGED) 
1921   2                              CONSOLE_PutMessage(pInst,"  Password changed auto warning:     Enable\r\n");
1922   2                      else
1923   2                              CONSOLE_PutMessage(pInst,"  Password changed auto warning:     Disable\r\n");
1924   2      
1925   2              return 1;
1926   2          }
1927   1          else if (argc != 4)
1928   1              return -1;
1929   1      
1930   1          /* cold start */
1931   1          argP = argv[0];
1932   1          if ((strlen(argP) == 1) && IsDigit(*argP))
1933   1          {
1934   2              temp8 = *argP - 0x30;
1935   2              temp16 &= 0xFFFE;
1936   2              temp16 |= temp8;
1937   2          }
1938   1      
1939   1          /* authentication fail */
1940   1          argP = argv[1];
1941   1          if ((strlen(argP) == 1) && IsDigit(*argP))
1942   1          {
1943   2              temp8 = *argP - 0x30;
1944   2              temp16 &= 0xFFFB;
1945   2              temp16 |= (temp8 << 2);
1946   2          }
1947   1      
1948   1          /* IP changed */
1949   1          argP = argv[2];
1950   1          if ((strlen(argP) == 1) && IsDigit(*argP))
1951   1          {
1952   2              temp8 = *argP - 0x30;
1953   2              temp16 &= 0xFFF7;
1954   2              temp16 |= (temp8 << 3);
1955   2          }
1956   1          
1957   1          /* password changed */
1958   1          argP = argv[3];
1959   1          if ((strlen(argP) == 1) && IsDigit(*argP))
1960   1          {
1961   2              temp8 = *argP - 0x30;
1962   2              temp16 &= 0xFFEF;
1963   2              temp16 |= (temp8 << 4);
1964   2          }
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 33  

1965   1      
1966   1          GCONFIG_SetAutoWarning(temp16);
1967   1      
1968   1          return 1;
1969   1      
1970   1      } /* End of clicmd_SetAWConfig() */
1971          
1972          /*
1973           * ----------------------------------------------------------------------------
1974           * Function Name: clicmd_SetAWConfigHelp()
1975           * Purpose:
1976           * Params:
1977           * Returns:
1978           * Note:
1979           * ----------------------------------------------------------------------------
1980           */
1981          static S16_T clicmd_SetAWConfigHelp(CONSOLE_Inst *pInst)
1982          {
1983   1          CONSOLE_PutMessage(pInst, "Usage: setaw <cold start> <authentication fail> <ip changed> <password chan
             -ged>\r\n");
1984   1          CONSOLE_PutMessage(pInst, "       <cold start>:             0: Disable     1: Enable\r\n");
1985   1          CONSOLE_PutMessage(pInst, "       <authentication fail>:    0: Disable     1: Enable\r\n");
1986   1          CONSOLE_PutMessage(pInst, "       <ip changed>:             0: Disable     1: Enable\r\n");
1987   1          CONSOLE_PutMessage(pInst, "       <password changed>:       0: Disable     1: Enable\r\n");
1988   1          return 1;
1989   1      } /* End of clicmd_SetAWConfigHelp() */
1990          
1991          /*
1992           * ----------------------------------------------------------------------------
1993           * Function Name: clicmd_SetRs485Mode()
1994           * Purpose:
1995           * Params:
1996           * Returns:
1997           * Note:
1998           * ----------------------------------------------------------------------------
1999           */
2000          static S16_T clicmd_SetRs485Mode(CONSOLE_Inst *pInst)
2001          {
2002   1          U8_T temp8, *argP;
2003   1      
2004   1          argc = pInst->Argc;
2005   1          argv = pInst->Argv;
2006   1      
2007   1          temp8 = GCONFIG_GetRs485Mode();
2008   1          if (argc == 0) /* current setting */
2009   1          {
2010   2              CONSOLE_PutMessage(pInst, "RS 485 mode %bu \r\n", temp8);
2011   2              return 1;
2012   2          }
2013   1          else if (argc != 1)
2014   1              return -1;
2015   1          
2016   1          argP = argv[0];
2017   1          if ((strlen(argP) == 1) && IsDigit(*argP))
2018   1              temp8 = *argP - 0x30;
2019   1          else
2020   1              return -1;
2021   1      
2022   1          if (temp8 > 3)
2023   1              return -1;
2024   1      
2025   1          GCONFIG_SetRs485Mode(temp8);
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 34  

2026   1      
2027   1          return 1;
2028   1      
2029   1      } /* End of clicmd_SetRs485Mode() */
2030          
2031          /*
2032           * ----------------------------------------------------------------------------
2033           * Function Name: clicmd_SetRs485ModeHelp()
2034           * Purpose:
2035           * Params:
2036           * Returns:
2037           * Note:
2038           * ----------------------------------------------------------------------------
2039           */
2040          static S16_T clicmd_SetRs485ModeHelp(CONSOLE_Inst *pInst)
2041          {
2042   1          CONSOLE_PutMessage(pInst, "Usage: rs485 <mode>\r\n");
2043   1          CONSOLE_PutMessage(pInst, "       <mode>:   0: Sleep                    2: Double Twisted Pair FD (Sla
             -ve)\r\n");
2044   1          CONSOLE_PutMessage(pInst, "       <mode>:   1: Single Twisted Pair HD   3: Double Twisted Pair FD (Mas
             -ter)\r\n");
2045   1      
2046   1          return 1;
2047   1      } /* End of clicmd_SetRs485ModeHelp() */
2048          
2049          /*
2050           * ----------------------------------------------------------------------------
2051           * Function Name: clicmd_SetDestHostName()
2052           * Purpose:
2053           * Params:
2054           * Returns:
2055           * Note:
2056           * ----------------------------------------------------------------------------
2057           */
2058          static S16_T clicmd_SetDestHostName(CONSOLE_Inst *pInst)
2059          {
2060   1          U32_T addr;
2061   1      
2062   1          argc = pInst->Argc;
2063   1          argv = pInst->Argv;
2064   1      
2065   1          if (argc == 0) /* current setting */
2066   1          {
2067   2                      GCONFIG_GetDestHostName((U8_T*)StrBuf);
2068   2                      CONSOLE_PutMessage(pInst, "Current destination host name: %s\r\n", StrBuf);             
2069   2              return 1;
2070   2          }
2071   1          else if (argc > 1)
2072   1              return -1;
2073   1              
2074   1          if (clicmd_CheckIpInput(argv[0]))
2075   1          {
2076   2              if (clicmd_GetIp2Ulong(argv[0], strlen(argv[0]), &addr) < 0)
2077   2                  return -1;
2078   2      
2079   2              if (clicmd_ValidIp(addr) == 0)
2080   2                  return -1;
2081   2          }
2082   1      
2083   1          GCONFIG_SetDestHostName(argv[0], strlen(argv[0]));
2084   1      
2085   1          return 1;
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 35  

2086   1      } /* End of clicmd_SetDestHostName() */
2087          
2088          /*
2089           * ----------------------------------------------------------------------------
2090           * Function Name: clicmd_SetDestHostNameHelp()
2091           * Purpose:
2092           * Params:
2093           * Returns:
2094           * Note:
2095           * ----------------------------------------------------------------------------
2096           */
2097          static S16_T clicmd_SetDestHostNameHelp(CONSOLE_Inst *pInst)
2098          {
2099   1          CONSOLE_PutMessage(pInst, "Usage: setdsthn <Host name/IP>\r\n");
2100   1          return 1;
2101   1      } /* End of clicmd_SetDestHostNameHelp() */
2102          
2103          /*
2104           * ----------------------------------------------------------------------------
2105           * Function Name: clicmd_SetTftpServerIp()
2106           * Purpose:
2107           * Params:
2108           * Returns:
2109           * Note:
2110           * ----------------------------------------------------------------------------
2111           */
2112          static S16_T clicmd_SetTftpServerIp(CONSOLE_Inst *pInst)
2113          {
2114   1          U32_T addr;
2115   1      
2116   1          argc = pInst->Argc;
2117   1          argv = pInst->Argv;
2118   1          if (argc == 0) /* current setting */
2119   1          {
2120   2              addr = GCONFIG_GetTftpServerIp();
2121   2              CONSOLE_PutMessage(pInst, "TFTP Server IP address: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x00000
             -0FF),
2122   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
2123   2              return 1;
2124   2          }
2125   1          else if (argc > 1)
2126   1              return -1;
2127   1      
2128   1          if (clicmd_GetIp2Ulong(argv[0], strlen(argv[0]), &addr) > 0)
2129   1          {
2130   2              if (clicmd_ValidIp(addr))
2131   2                  GCONFIG_SetTftpServerIp(addr);
2132   2              else
2133   2                  return -1;
2134   2          }
2135   1          else
2136   1              return -1;
2137   1      
2138   1          return 1;
2139   1      } /* End of clicmd_SetTftpServerIp() */
2140          
2141          /*
2142           * ----------------------------------------------------------------------------
2143           * Function Name: clicmd_SetTftpServerIpHelp()
2144           * Purpose:
2145           * Params:
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 36  

2146           * Returns:
2147           * Note:
2148           * ----------------------------------------------------------------------------
2149           */
2150          static S16_T clicmd_SetTftpServerIpHelp(CONSOLE_Inst *pInst)
2151          {
2152   1          CONSOLE_PutMessage(pInst, "Usage: tftpsrv <ip addr>\r\n");
2153   1          return 1;
2154   1      } /* End of clicmd_SetTftpServerIpHelp() */
2155          
2156          /*
2157           * ----------------------------------------------------------------------------
2158           * Function Name: clicmd_SetFilename()
2159           * Purpose:
2160           * Params:
2161           * Returns:
2162           * Note:
2163           * ----------------------------------------------------------------------------
2164           */
2165          static S16_T clicmd_SetFilename(CONSOLE_Inst *pInst)
2166          {
2167   1          argc = pInst->Argc;
2168   1          argv = pInst->Argv;
2169   1              
2170   1          if (argc == 0) /* current setting */
2171   1          {
2172   2                      GCONFIG_GetFilename((U8_T*)StrBuf, 64);
2173   2                      CONSOLE_PutMessage(pInst, "Filename: %s\r\n", StrBuf);          
2174   2              return 1;
2175   2          }
2176   1          else if (argc > 1)
2177   1              return -1;
2178   1              
2179   1          GCONFIG_SetFilename(argv[0], strlen(argv[0]));
2180   1          return 1;
2181   1      
2182   1      } /* End of clicmd_SetFilename() */
2183          
2184          /*
2185           * ----------------------------------------------------------------------------
2186           * Function Name: clicmd_SetFilenameHelp()
2187           * Purpose:
2188           * Params:
2189           * Returns:
2190           * Note:
2191           * ----------------------------------------------------------------------------
2192           */
2193          static S16_T clicmd_SetFilenameHelp(CONSOLE_Inst *pInst)
2194          {
2195   1          CONSOLE_PutMessage(pInst, "Usage: filename <file name>\r\n");
2196   1          return 1;
2197   1      } /* End of clicmd_SetFilenameHelp() */
2198          
2199          /*
2200           * ----------------------------------------------------------------------------
2201           * Function Name: clicmd_UpdateFirmware()
2202           * Purpose:
2203           * Params:
2204           * Returns:
2205           * Note:
2206           * ----------------------------------------------------------------------------
2207           */
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 37  

2208          static S16_T clicmd_UpdateFirmware(CONSOLE_Inst *pInst)
2209          {
2210   1          argc = pInst->Argc;
2211   1      
2212   1          if (argc == 0) /* current setting */
2213   1          {
2214   2              CONSOLE_PutMessage(pInst, "Download Firmware\r\n");
2215   2              GCONFIG_EnableFirmwareUpgrade();
2216   2              GCONFIG_WriteConfigData();
2217   2              MCPU_SoftReboot();
2218   2              return 1;
2219   2          }
2220   1      
2221   1          return 1;
2222   1      } /* End of clicmd_UpdateFirmware() */
2223          
2224          /*
2225           * ----------------------------------------------------------------------------
2226           * Function Name: clicmd_UpdateFirmwareHelp()
2227           * Purpose:
2228           * Params:
2229           * Returns:
2230           * Note:
2231           * ----------------------------------------------------------------------------
2232           */
2233          static S16_T clicmd_UpdateFirmwareHelp(CONSOLE_Inst *pInst)
2234          {
2235   1          CONSOLE_PutMessage(pInst, "Usage: dlfirmware\r\n");
2236   1          return 1;
2237   1      } /* End of clicmd_UpdateFirmwareHelp() */
2238          
2239          
2240          /*
2241           * ----------------------------------------------------------------------------
2242           * Function Name: clicmd_SetEEP()
2243           * Purpose:
2244           * Params:
2245           * Returns:
2246           * Note:
2247           * ----------------------------------------------------------------------------
2248           */
2249          static S16_T clicmd_SetEEP(CONSOLE_Inst *pInst)
2250          {
2251   1              U8_T    CntGrp, Value, DigNum;
2252   1              U16_T   RegLen = 0;
2253   1      
2254   1          argc = pInst->Argc;
2255   1          argv = pInst->Argv;
2256   1      
2257   1          if (argc == 0) // current setting //
2258   1          {
2259   2                      CONSOLE_PutMessage(pInst,"Current EEPROM: \r\n");
2260   2                      CONSOLE_PutMessage(pInst,"     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");
2261   2                      for (RegLen = 0 ; RegLen <= 0x1FF ; RegLen ++)
2262   2                      {
2263   3                              if (!(RegLen & 0x0F))
2264   3                              {
2265   4                                      CONSOLE_PutMessage(pInst,"\r\n%03x: ", RegLen);
2266   4                              }
2267   3                              
2268   3                              EEPROM_Read(RegLen, 1, &DigNum);
2269   3                              CONSOLE_PutMessage(pInst,"%02bx ", DigNum);
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 38  

2270   3                      }
2271   2                      CONSOLE_PutMessage(pInst,"\r\n");
2272   2              return 1;
2273   2          }
2274   1          else if (argc < 2)
2275   1              return -1;
2276   1      
2277   1              for (CntGrp = 0; CntGrp < argc; CntGrp ++)
2278   1              {
2279   2                      Value = 0;
2280   2                      if (strlen(argv[CntGrp]) > 2)  return -1;// Check hex digit length //
2281   2                                      
2282   2                      for (DigNum = 0 ; DigNum < strlen(argv[CntGrp]) ; DigNum ++)
2283   2                      {
2284   3                              if ((argv[CntGrp][DigNum] < 0x3a && argv[CntGrp][DigNum] > 0x2f) ? 1 : 0)// Check Digit //
2285   3                                      Value = (Value << 4) + (argv[CntGrp][DigNum] - 0x30);
2286   3                              else if ((argv[CntGrp][DigNum] < 0x47 && argv[CntGrp][DigNum] > 0x40) ? 1 : 0)// Check upper case chara
             -cter //
2287   3                                      Value = (Value << 4) + (argv[CntGrp][DigNum] - 0x37);
2288   3                              else if ((argv[CntGrp][DigNum] < 0x67 && argv[CntGrp][DigNum] > 0x60) ? 1 : 0)// Check lower case chara
             -cter //
2289   3                                      Value = (Value << 4) + (argv[CntGrp][DigNum] - 0x57);
2290   3                              else
2291   3                                      return -1;
2292   3                      }
2293   2                      StrBuf[CntGrp] = Value;
2294   2                      if (CntGrp)
2295   2                      {
2296   3                              RegLen ++;
2297   3                              CONSOLE_PutMessage(pInst, "0x%02bx-", StrBuf[CntGrp]);
2298   3                      }
2299   2                      else
2300   2                              CONSOLE_PutMessage(pInst, "RegAddr:0x%02bx|RegBuf:", StrBuf[CntGrp]);
2301   2              }
2302   1              CONSOLE_PutMessage(pInst, "|RegLen:%04u\n\r", RegLen);
2303   1              EEPROM_BatchWrite(StrBuf[0], RegLen, (U8_T*)&(StrBuf[1]));
2304   1      
2305   1          return 1;
2306   1      } /* End of clicmd_SetEEP() */
2307          
2308          /*
2309           * ----------------------------------------------------------------------------
2310           * Function Name: clicmd_SetEEPHelp()
2311           * Purpose:
2312           * Params:
2313           * Returns:
2314           * Note:
2315           * ----------------------------------------------------------------------------
2316           */
2317          static S16_T clicmd_SetEEPHelp(CONSOLE_Inst *pInst)
2318          {
2319   1          CONSOLE_PutMessage(pInst, "Usage: seteep <HEX RegStartAddr> <HEX Byte 0> <HEX Byte 1>...<HEX Byte N>\r
             -\n");
2320   1          return 1;
2321   1      } /* End of clicmd_SetEEPHelp() */
2322          
2323          /*
2324           * ----------------------------------------------------------------------------
2325           * Function Name: clicmd_DebugMsg()
2326           * Purpose:
2327           * Params:
2328           * Returns:
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 39  

2329           * Note:
2330           * ----------------------------------------------------------------------------
2331           */
2332          static S16_T clicmd_DebugMsg(CONSOLE_Inst *pInst)
2333          {
2334   1          U8_T *argP, temp8;
2335   1          
2336   1          argc = pInst->Argc;
2337   1          argv = pInst->Argv;
2338   1      
2339   1          if (argc == 0) /* current setting */
2340   1          {
2341   2                      CONSOLE_PutMessage(pInst,"Display Debug Message: ");
2342   2              if (DEBUG_MsgEnable)
2343   2                          CONSOLE_PutMessage(pInst,"Enable\r\n");
2344   2              else
2345   2                  CONSOLE_PutMessage(pInst,"Disable\r\n");
2346   2      
2347   2              return 1;
2348   2          }
2349   1          else if (argc > 1)
2350   1              return -1;
2351   1      
2352   1         argP = argv[0];
2353   1         if ((strlen(argP) == 1) && IsDigit(*argP))
2354   1              temp8 = *argP - 0x30;
2355   1         else
2356   1              return -1;
2357   1      
2358   1          if (temp8 > 1)
2359   1              return -1;
2360   1      
2361   1          DEBUG_MsgEnable = temp8;
2362   1      
2363   1          return 1;   
2364   1      } /* End of clicmd_DebugMsg() */
2365          
2366          /*
2367           * ----------------------------------------------------------------------------
2368           * Function Name: clicmd_DebugMsgHelp()
2369           * Purpose:
2370           * Params:
2371           * Returns:
2372           * Note:
2373           * ----------------------------------------------------------------------------
2374           */
2375          static S16_T clicmd_DebugMsgHelp(CONSOLE_Inst *pInst)
2376          {
2377   1          CONSOLE_PutMessage(pInst, "Usage: dbgmsg <mode>\r\n");
2378   1          CONSOLE_PutMessage(pInst, "       <mode>: 0: Disable    1: Enable\r\n");
2379   1          return 1;
2380   1      } /* End of clicmd_DebugMsgHelp() */
2381          
2382          /*
2383           * ----------------------------------------------------------------------------
2384           * Function Name: clicmd_ConnectStatus()
2385           * Purpose:
2386           * Params:
2387           * Returns:
2388           * Note:
2389           * ----------------------------------------------------------------------------
2390           */
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 40  

2391          static S16_T clicmd_ConnectStatus(CONSOLE_Inst *pInst)
2392          {
2393   1          argc = pInst->Argc;
2394   1      
2395   1          if (argc != 0) /* current setting */
2396   1              return -1;
2397   1      
2398   1          CONSOLE_PutMessage(pInst,"Connect Status: ");
2399   1          if (GS2W_GetTaskState() == GS2W_STATE_IDLE)
2400   1                  CONSOLE_PutMessage(pInst,"Idle\r\n");
2401   1          else
2402   1              CONSOLE_PutMessage(pInst,"Connected\r\n");
2403   1      
2404   1          CONSOLE_PutMessage(pInst,"TCP Tx Flag: %bu\r\n", GTCPDAT_GetTcpTxReady(0));
2405   1          return 1;
2406   1      
2407   1      } /* End of clicmd_DebugMsg() */
2408          
2409          /*
2410           * ----------------------------------------------------------------------------
2411           * Function Name: clicmd_ConnectStatusHelp()
2412           * Purpose:
2413           * Params:
2414           * Returns:
2415           * Note:
2416           * ----------------------------------------------------------------------------
2417           */
2418          static S16_T clicmd_ConnectStatusHelp(CONSOLE_Inst *pInst)
2419          {
2420   1          CONSOLE_PutMessage(pInst, "Usage: connstatus\r\n");
2421   1          
2422   1          return 1;
2423   1      } /* End of clicmd_ConnectStatus() */
2424          
2425          
2426          /*
2427           * ----------------------------------------------------------------------------
2428           * Function Name: clicmd_Ping()
2429           * Purpose:
2430           * Params:
2431           * Returns:
2432           * Note:
2433           * ----------------------------------------------------------------------------
2434           */
2435          static S16_T clicmd_Ping(CONSOLE_Inst *pInst)
2436          {
2437   1          S16_T argc = pInst->Argc;
2438   1          S8_T **argv = pInst->Argv;
2439   1      
2440   1              tsPING_CONFIG_SET *pPing;
2441   1              pPing = (tsPING_CONFIG_SET*)&(pInst->Cmd.Buf);
2442   1              
2443   1              if (pInst->State == CLI_STATE_COMMAND)  
2444   1              {
2445   2                      if (argc != 1)
2446   2                      return -1;
2447   2              if (clicmd_GetIp2Ulong(argv[0], strlen(argv[0]), &(pPing->TargetIP)) < 0)
2448   2                      {
2449   3                              CONSOLE_PutMessage(pInst, "Invalid host address \n\r");
2450   3                              return -1;
2451   3                      }
2452   2                      pPing->PatternLen = 32;// Set test pattern length //
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 41  

2453   2                      pPing->TxCount = 0;
2454   2                      pPing->RxCount = 0;
2455   2                      CONSOLE_PutMessage(pInst, "Pinging from %bu.%bu.%bu.%bu: with %u bytes of data:\n\r\n\r",
2456   2                                                                              pInst->Cmd.Buf[0], pInst->Cmd.Buf[1], pInst->Cmd.Buf[2], pInst->Cmd.Buf[3],
2457   2                                                                              pPing->PatternLen);
2458   2                      PING_CmdEnQueue((tsPING_LINK*)&(pInst->Cmd));                                                                   
2459   2                      pInst->State = CLI_STATE_COMMAND_WAIT;
2460   2              }
2461   1              else if (pInst->State == CLI_STATE_COMMAND_WAIT)
2462   1              {
2463   2                      if (pInst->Cmd.WaitTime)
2464   2                              return 1;
2465   2                      if (pInst->Cmd.ReplyLen)
2466   2                      {
2467   3                              CONSOLE_PutMessage(pInst, "Reply from %bu.%bu.%bu.%bu: bytes=%u time<%u0ms TTL=%bu\n\r",
2468   3                                                                                      pInst->Cmd.Buf[0], pInst->Cmd.Buf[1], pInst->Cmd.Buf[2], pInst->Cmd.Buf[3],
2469   3                                                                                      pPing->PatternLen, pPing->EchoTime+1, pPing->TTL);
2470   3                      }
2471   2                      else
2472   2                              CONSOLE_PutMessage(pInst, "Request timed out\n\r");
2473   2                              
2474   2                      PING_CmdDeQueue((tsPING_LINK*)&(pInst->Cmd));
2475   2                      
2476   2                      pPing->TxCount ++;
2477   2                      if (pPing->TxCount < 4)
2478   2                              PING_CmdEnQueue((tsPING_LINK*)&(pInst->Cmd));
2479   2                      else
2480   2                      {
2481   3                              CONSOLE_PutMessage(pInst, "\n\rPing statistics for %bu.%bu.%bu.%bu:\n\r",
2482   3                                                                                      pInst->Cmd.Buf[0], pInst->Cmd.Buf[1], pInst->Cmd.Buf[2], pInst->Cmd.Buf[3]);
2483   3                              CONSOLE_PutMessage(pInst, "     Packets:Sent=%bu, Received=%bu, lost=%bu\n\r\n\r", 
2484   3                                                                                      pPing->TxCount, pPing->RxCount, pPing->TxCount - pPing->RxCount);
2485   3                              pInst->State = CLI_STATE_COMMAND;
2486   3                      }
2487   2              }
2488   1              return 1;       
2489   1      } /* End of clicmd_Ping() */
2490          
2491          /*
2492           * ----------------------------------------------------------------------------
2493           * Function Name: clicmd_PingHelp()
2494           * Purpose:
2495           * Params:
2496           * Returns:
2497           * Note:
2498           * ----------------------------------------------------------------------------
2499           */
2500          static S16_T clicmd_PingHelp(CONSOLE_Inst *pInst)
2501          {
2502   1          CONSOLE_PutMessage(pInst, "Usage: ping xxx.xxx.xxx.xxx \r\n");
2503   1          return 1;
2504   1      } /* End of clicmd_PingHelp() */
2505          
2506          /*
2507           * ----------------------------------------------------------------------------
2508           * Function Name: clicmd_SetDefault()
2509           * Purpose:
2510           * Params:
2511           * Returns:
2512           * Note:
2513           * ----------------------------------------------------------------------------
2514           */
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 42  

2515          static S16_T clicmd_SetDefault(CONSOLE_Inst *pInst)
2516          {
2517   1          argc = pInst->Argc;
2518   1      
2519   1          if (argc == 0)
2520   1          {
2521   2                      GCONFIG_ReadDefaultConfigData();
2522   2                      GCONFIG_WriteConfigData();
2523   2                      DELAY_Ms(500);
2524   2                      MCPU_SoftReboot();      
2525   2                      return 1;
2526   2          }
2527   1          return -1;
2528   1      
2529   1      } /* End of clicmd_SetDefault() */
2530          
2531          /*
2532           * ----------------------------------------------------------------------------
2533           * Function Name: clicmd_SetDefaultHelp()
2534           * Purpose:
2535           * Params:
2536           * Returns:
2537           * Note:
2538           * ----------------------------------------------------------------------------
2539           */
2540          static S16_T clicmd_SetDefaultHelp(CONSOLE_Inst *pInst)
2541          {
2542   1          CONSOLE_PutMessage(pInst, "Usage: setdef\r\n");
2543   1          
2544   1          return 1;
2545   1      } /* End of clicmd_SetDefaultHelp() */
2546          
2547          /*
2548           * ----------------------------------------------------------------------------
2549           * Function Name: clicmd_SetBMCast()
2550           * Purpose:
2551           * Params:
2552           * Returns:
2553           * Note:
2554           * ----------------------------------------------------------------------------
2555           */
2556          static S16_T clicmd_SetBMCast(CONSOLE_Inst *pInst)
2557          {
2558   1          U16_T temp16;
2559   1          U8_T temp8, *argP;
2560   1      
2561   1          argc = pInst->Argc;
2562   1          argv = pInst->Argv;
2563   1      
2564   1          temp16 = GCONFIG_GetNetwork();
2565   1          if (argc == 0)
2566   1          {
2567   2              CONSOLE_PutMessage(pInst, "Bcast: ");
2568   2                      if (temp16 & GCONFIG_NETWORK_PROTO_UDP_BCAST)
2569   2                  CONSOLE_PutMessage(pInst, "On ");
2570   2                      else 
2571   2                  CONSOLE_PutMessage(pInst, "Off ");
2572   2      
2573   2              CONSOLE_PutMessage(pInst, "\r\nMcast: ");
2574   2                      if (temp16 & GCONFIG_NETWORK_PROTO_UDP_MCAST)
2575   2                  CONSOLE_PutMessage(pInst, "On\r\n");
2576   2                      else 
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 43  

2577   2                  CONSOLE_PutMessage(pInst, "Off\r\n");
2578   2      
2579   2                      return 1;
2580   2          }
2581   1          else if (argc != 2)
2582   1              return -1;
2583   1      
2584   1          argP = argv[0];
2585   1          if ((strlen(argP) == 1) && IsDigit(*argP))
2586   1          {
2587   2              temp8 = *argP - 0x30;
2588   2              if (temp8 > 1)
2589   2                  return -1;
2590   2          }
2591   1          else
2592   1              return -1;
2593   1      
2594   1          if (temp8)
2595   1              temp16 |= GCONFIG_NETWORK_PROTO_UDP_BCAST;
2596   1          else
2597   1              temp16 &= ~GCONFIG_NETWORK_PROTO_UDP_BCAST;
2598   1      
2599   1          argP = argv[1];
2600   1          if ((strlen(argP) == 1) && IsDigit(*argP))
2601   1          {
2602   2              temp8 = *argP - 0x30;
2603   2              if (temp8 > 1)
2604   2                  return -1;
2605   2          }
2606   1          else
2607   1              return -1;
2608   1      
2609   1         if (temp8)
2610   1              temp16 |= GCONFIG_NETWORK_PROTO_UDP_MCAST;
2611   1          else
2612   1              temp16 &= ~GCONFIG_NETWORK_PROTO_UDP_MCAST;
2613   1      
2614   1          GCONFIG_SetNetwork(temp16);
2615   1      
2616   1          return 1;
2617   1      
2618   1      } /* End of clicmd_SetBMCast() */
2619          
2620          /*
2621           * ----------------------------------------------------------------------------
2622           * Function Name: clicmd_SetBMCastHelp()
2623           * Purpose:
2624           * Params:
2625           * Returns:
2626           * Note:
2627           * ----------------------------------------------------------------------------
2628           */
2629          static S16_T clicmd_SetBMCastHelp(CONSOLE_Inst *pInst)
2630          {
2631   1          CONSOLE_PutMessage(pInst, "Usage: bmcast <bcast> <mcast>\r\n");
2632   1          CONSOLE_PutMessage(pInst, "      <bcast>: 0: Off    1: On\r\n");
2633   1          CONSOLE_PutMessage(pInst, "      <mcast>: 0: Off    1: On\r\n");
2634   1          
2635   1          return 1;
2636   1      } /* End of clicmd_SetBMCastHelp() */
2637          
2638          #if (MAC_ARBIT_MODE & MAC_ARBIT_WIFI)
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 44  

2639          /*
2640           * ----------------------------------------------------------------------------
2641           * Function Name: clicmd_SetSSID()
2642           * Purpose:
2643           * Params:
2644           * Returns:
2645           * Note:
2646           * ----------------------------------------------------------------------------
2647           */
2648          static S16_T clicmd_SetSSID(CONSOLE_Inst *pInst)
2649          {
2650   1              U8_T    RegLen;
2651   1      
2652   1              argc = pInst->Argc;
2653   1          argv = pInst->Argv;
2654   1      
2655   1              if (argc == 0) // current setting //
2656   1              {
2657   2              RegLen = GCONFIG_GetSsid(StrBuf);
2658   2              StrBuf[RegLen] = 0;
2659   2              CONSOLE_PutMessage(pInst, "SSID: %s\r\n", StrBuf);
2660   2                      return 1;
2661   2              }
2662   1              else if (argc > 1)
2663   1              {
2664   2                      return -1;
2665   2              }
2666   1      
2667   1              // Check maximum 32 characters //
2668   1              if ((RegLen = strlen(argv[0])) >= 32)
2669   1              {
2670   2                      return -1;
2671   2              }
2672   1      
2673   1              GCONFIG_SetSsid(argv[0], RegLen);
2674   1              IO_SsidRW(1, RegLen, (U8_T XDATA*)argv[0]);
2675   1              return 1;
2676   1              
2677   1      } /* End of clicmd_SetSSID() */
2678          
2679          /*
2680           * ----------------------------------------------------------------------------
2681           * Function Name: clicmd_SetSSIDHelp()
2682           * Purpose:
2683           * Params:
2684           * Returns:
2685           * Note:
2686           * ----------------------------------------------------------------------------
2687           */
2688          static S16_T clicmd_SetSSIDHelp(CONSOLE_Inst *pInst)
2689          {
2690   1          CONSOLE_PutMessage(pInst, "Usage: setssid <Maximum 32 characters>\r\n");
2691   1          return 1;
2692   1      
2693   1      } /* End of clicmd_SetSSIDHelp() */
2694          
2695          /*
2696           * ----------------------------------------------------------------------------
2697           * Function Name: clicmd_SetNetworkType()
2698           * Purpose:
2699           * Params:
2700           * Returns:
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 45  

2701           * Note:
2702           * ----------------------------------------------------------------------------
2703           */
2704          static S16_T clicmd_SetNetworkType(CONSOLE_Inst *pInst)
2705          {
2706   1              U8_T value;
2707   1      
2708   1              argc = pInst->Argc;
2709   1          argv = pInst->Argv;
2710   1      
2711   1              if (argc == 0) /* current setting */
2712   1          {
2713   2              value = GCONFIG_GetWifiNetworkMode();
2714   2              CONSOLE_PutMessage(pInst, "Network Type: ");
2715   2              if (value == 1)
2716   2                  CONSOLE_PutMessage(pInst, "Ad-hoc mode\r\n");
2717   2              else if (value == 0)
2718   2                  CONSOLE_PutMessage(pInst, "Infra mode\r\n");
2719   2      
2720   2                      return 1;
2721   2              }
2722   1              else if (argc > 1 || strlen(argv[0]) > 1)
2723   1              {
2724   2                      return -1;
2725   2              }
2726   1      
2727   1          value =  *argv[0] - 0x30;
2728   1          if (value < 2)
2729   1          {
2730   2              GCONFIG_SetWifiNetworkMode(value);
2731   2                      IO_NetworkModeRW(1, value ? 2:3);
2732   2              }
2733   1              else
2734   1                      return -1;
2735   1      
2736   1              return 1;
2737   1      
2738   1      } /* End of clicmd_SetNetworkType() */
2739          
2740          /*
2741           * ----------------------------------------------------------------------------
2742           * Function Name: clicmd_SetNetworkTypeHelp()
2743           * Purpose:
2744           * Params:
2745           * Returns:
2746           * Note:
2747           * ----------------------------------------------------------------------------
2748           */
2749          static S16_T clicmd_SetNetworkTypeHelp(CONSOLE_Inst *pInst)
2750          {
2751   1          CONSOLE_PutMessage(pInst, "Usage: setnt <0 = Infra mode, 1 = Ad-hoc mode>\r\n");
2752   1          return 1;
2753   1      
2754   1      } /* End of clicmd_SetNetworkTypeHelp() */
2755          
2756          /*
2757           * ----------------------------------------------------------------------------
2758           * Function Name: clicmd_SetChannel()
2759           * Purpose:
2760           * Params:
2761           * Returns:
2762           * Note:
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 46  

2763           * ----------------------------------------------------------------------------
2764           */
2765          static S16_T clicmd_SetChannel(CONSOLE_Inst *pInst)
2766          {
2767   1              U8_T RegLen, Value;
2768   1      
2769   1              argc = pInst->Argc;
2770   1          argv = pInst->Argv;
2771   1      
2772   1              if (argc == 0) /* current setting */
2773   1          {
2774   2              RegLen = GCONFIG_GetChannel();
2775   2              if (RegLen)
2776   2                 CONSOLE_PutMessage(pInst, "Channel(%bu): %bu\r\n", RegLen, IO_WiFiSupportedCh[RegLen]);
2777   2              else
2778   2                 CONSOLE_PutMessage(pInst, "Channel(%bu): auto\r\n", RegLen);
2779   2                      return 1;
2780   2              }
2781   1              else if (argc > 1 || (RegLen = strlen(argv[0])) > 3)
2782   1              {
2783   2                      return -1;
2784   2              }
2785   1      
2786   1              if (clicmd_DecText2Char((U8_T *)argv[0], &Value, RegLen) == 0xFF)
2787   1                      return -1;
2788   1          else if (Value > 11)
2789   1              return -1;
2790   1      
2791   1          GCONFIG_SetChannel(Value);
2792   1              IO_ChannelRW(1, IO_WiFiSupportedCh[Value]);
2793   1              return 1;
2794   1      
2795   1      } /* End of clicmd_SetChannel() */
2796          
2797          /*
2798           * ----------------------------------------------------------------------------
2799           * Function Name: clicmd_SetChannelHelp()
2800           * Purpose:
2801           * Params:
2802           * Returns:
2803           * Note:
2804           * ----------------------------------------------------------------------------
2805           */
2806          static S16_T clicmd_SetChannelHelp(CONSOLE_Inst *pInst)
2807          {
2808   1          CONSOLE_PutMessage(pInst, "Usage: setch <channel index>\r\n");
2809   1          CONSOLE_PutMessage(pInst, "     <channel index>\r\n");
2810   1          CONSOLE_PutMessage(pInst, "     0: Auto 1:  1   2:  2   3:  3   4:  4   5:  5   6:  6\r\n");
2811   1          CONSOLE_PutMessage(pInst, "     7:  7   8:  8   9:  9  10: 10  11: 11\r\n");
2812   1      // Support 802.11 b/g only
2813   1      //    CONSOLE_PutMessage(pInst, "     7:  7   8:  8   9:  9  10: 10  11: 11  12: 36  13: 40\r\n");
2814   1      //    CONSOLE_PutMessage(pInst, "    14: 44  15: 48  16:149  17:153  18:157  19:161  20:165\r\n");
2815   1      
2816   1          return 1;
2817   1      
2818   1      } /* End of clicmd_SetChannelHelp() */
2819          
2820          /*
2821           * ----------------------------------------------------------------------------
2822           * Function Name: clicmd_SetWep64Key()
2823           * Purpose:
2824           * Params:
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 47  

2825           * Returns:
2826           * Note:
2827           * ----------------------------------------------------------------------------
2828           */
2829          static S16_T clicmd_SetWep64Key(CONSOLE_Inst *pInst)
2830          {
2831   1              U8_T i, j, Value[5];
2832   1      
2833   1              argc = pInst->Argc;
2834   1          argv = pInst->Argv;
2835   1      
2836   1              if (argc == 1 && strlen(argv[0]) == 1) /* current setting */
2837   1          {
2838   2                      if (clicmd_DecText2Char(argv[0], &j, 1) == 0xFF ||      j > 3)
2839   2                      {
2840   3                              return -1;
2841   3                      }
2842   2      
2843   2              GCONFIG_GetWifiWep64Key(j, Value);
2844   2              CONSOLE_PutMessage(pInst, "WEP 64 Key %bu: ", j);
2845   2              for (i = 0; i < 5; i++)
2846   2              {
2847   3                  CONSOLE_PutMessage(pInst, "%bx ", Value[i]);
2848   3              }
2849   2              CONSOLE_PutMessage(pInst, "\r\n");
2850   2              return 1;
2851   2              }
2852   1              else if (argc != 6)
2853   1              {
2854   2                      return -1;
2855   2              }
2856   1      
2857   1              if (strlen(argv[0]) == 1)
2858   1              {
2859   2                      if (clicmd_DecText2Char(argv[0], &j, 1) == 0xFF ||      j > 3)
2860   2                      {
2861   3                              return -1;
2862   3                      }
2863   2      
2864   2                      for (i = 0; i < 5; i++)
2865   2                      {
2866   3                              if (clicmd_HexText2Char(argv[i+1], &Value[i], 2) == 0xFF)
2867   3                              {
2868   4                                      return -1;
2869   4                              }
2870   3                      }
2871   2              GCONFIG_SetWifiWep64Key(j, Value);
2872   2                      IO_Wep64KeyRW (1, j, Value);
2873   2              }
2874   1              else
2875   1              {
2876   2                      return -1;
2877   2              }
2878   1      
2879   1              return 1;
2880   1      
2881   1      } /* End of clicmd_SetWep64Key() */
2882          
2883          /*
2884           * ----------------------------------------------------------------------------
2885           * Function Name: clicmd_SetWep64KeyHelp()
2886           * Purpose:
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 48  

2887           * Params:
2888           * Returns:
2889           * Note:
2890           * ----------------------------------------------------------------------------
2891           */
2892          static S16_T clicmd_SetWep64KeyHelp(CONSOLE_Inst *pInst)
2893          {
2894   1          CONSOLE_PutMessage(pInst, "Usage: setw64k <index = 0 ~ 3> <HEX Byte 0> <HEX Byte 1> ... <HEX Byte 4>\r
             -\n");
2895   1          return 1;
2896   1      
2897   1      } /* End of clicmd_SetWep64KeyHelp() */
2898          
2899          /*
2900           * ----------------------------------------------------------------------------
2901           * Function Name: clicmd_SetWep128Key()
2902           * Purpose:
2903           * Params:
2904           * Returns:
2905           * Note:
2906           * ----------------------------------------------------------------------------
2907           */
2908          static S16_T clicmd_SetWep128Key(CONSOLE_Inst *pInst)
2909          {
2910   1              U8_T    i, j, Value[13];
2911   1      
2912   1              argc = pInst->Argc;
2913   1          argv = pInst->Argv;
2914   1      
2915   1              if (argc == 1 && strlen(argv[0]) == 1) /* current setting */
2916   1          {
2917   2                      if (clicmd_DecText2Char(argv[0], &j, 1) == 0xFF || j > 3)
2918   2                      {
2919   3                              return -1;
2920   3                      }
2921   2              GCONFIG_GetWifiWep128Key(j, Value);
2922   2              CONSOLE_PutMessage(pInst, "WEP 128 Key %bu: ", j);
2923   2              for (i = 0; i < 13; i++)
2924   2              {
2925   3                  CONSOLE_PutMessage(pInst, "%bx ", Value[i]);
2926   3              }
2927   2              CONSOLE_PutMessage(pInst, "\r\n");
2928   2      
2929   2              return 1;
2930   2              }
2931   1              else if (argc != 14)
2932   1              {
2933   2                      return -1;
2934   2              }
2935   1      
2936   1              if (strlen(argv[0]) == 1)
2937   1              {
2938   2                      if (clicmd_DecText2Char(argv[0], &j, 1) == 0xFF || j > 3)
2939   2                      {
2940   3                              return -1;
2941   3                      }
2942   2      
2943   2                      for (i = 0; i < 13; i++)
2944   2                      {
2945   3                              if (clicmd_HexText2Char(argv[i+1], &Value[i], 2) == 0xFF)
2946   3                              {
2947   4                                      return -1;
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 49  

2948   4                              }
2949   3                      }
2950   2      
2951   2              GCONFIG_SetWifiWep128Key(j, Value);
2952   2              IO_Wep128KeyRW (1, j, Value);   
2953   2              }
2954   1              else
2955   1              {
2956   2                      return -1;
2957   2              }
2958   1      
2959   1              return 1;
2960   1      
2961   1      } /* End of clicmd_SetWep128Key() */
2962          
2963          /*
2964           * ----------------------------------------------------------------------------
2965           * Function Name: clicmd_SetWep128KeyHelp()
2966           * Purpose:
2967           * Params:
2968           * Returns:
2969           * Note:
2970           * ----------------------------------------------------------------------------
2971           */
2972          static S16_T clicmd_SetWep128KeyHelp(CONSOLE_Inst *pInst)
2973          {
2974   1          CONSOLE_PutMessage(pInst, "Usage: setw128k <index = 0 ~ 3> <HEX Byte 0> <HEX Byte 1> ... <HEX Byte 12>
             -\r\n");
2975   1          return 1;
2976   1      
2977   1      } /* End of clicmd_SetWep128KeyHelp() */
2978          
2979          /*
2980           * ----------------------------------------------------------------------------
2981           * Function Name: clicmd_SetWepKeyIndex()
2982           * Purpose:
2983           * Params:
2984           * Returns:
2985           * Note:
2986           * ----------------------------------------------------------------------------
2987           */
2988          static S16_T clicmd_SetWepKeyIndex(CONSOLE_Inst *pInst)
2989          {
2990   1              U8_T    Value;
2991   1      
2992   1              argc = pInst->Argc;
2993   1          argv = pInst->Argv;
2994   1              if (argc == 0) /* Read current WEP key index */
2995   1          {
2996   2              CONSOLE_PutMessage(pInst, "WEP Key Index: %bu\r\n", GCONFIG_GetWifiWepKeyIndex());
2997   2              return 1;
2998   2              }
2999   1              else if (argc != 1 || strlen(argv[0]) != 1) /* Write user's WEP key index */
3000   1              return -1;
3001   1      
3002   1              if (clicmd_DecText2Char(argv[0], &Value, 1) == 0xFF)
3003   1              {
3004   2                      return -1;
3005   2              }
3006   1              if (Value < 4)
3007   1              {
3008   2              GCONFIG_SetWifiWepKeyIndex(Value);
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 50  

3009   2              IO_WepKeyIndexRW(1, Value);
3010   2              }
3011   1              else
3012   1              {
3013   2                      return -1;
3014   2              }
3015   1      
3016   1              return 1;
3017   1      
3018   1      } /* End of clicmd_SetWepKeyIndex() */
3019          
3020          /*
3021           * ----------------------------------------------------------------------------
3022           * Function Name: clicmd_SetWepKeyIndexHelp()
3023           * Purpose:
3024           * Params:
3025           * Returns:
3026           * Note:
3027           * ----------------------------------------------------------------------------
3028           */
3029          static S16_T clicmd_SetWepKeyIndexHelp(CONSOLE_Inst *pInst)
3030          {
3031   1          CONSOLE_PutMessage(pInst, "Usage: setwki <WEP key index = 0 ~ 3>\r\n");
3032   1          return 1;
3033   1      
3034   1      } /* End of clicmd_SetWepKeyIndexHelp() */
3035          
3036          /*
3037           * ----------------------------------------------------------------------------
3038           * Function Name: clicmd_SetWPAPassphrase()
3039           * Purpose:
3040           * Params:
3041           * Returns:
3042           * Note:
3043           * ----------------------------------------------------------------------------
3044           */
3045          static S16_T clicmd_SetWPAPassphrase(CONSOLE_Inst *pInst)
3046          {
3047   1              U8_T    RegLen;
3048   1      
3049   1              argc = pInst->Argc;
3050   1          argv = pInst->Argv;
3051   1      
3052   1              if (argc == 0) /* current setting */
3053   1          {
3054   2              RegLen = GCONFIG_GetWifiPreShareKey(StrBuf);
3055   2              StrBuf[RegLen] = 0;
3056   2              CONSOLE_PutMessage(pInst, "Pre-Shared Key: %s\r\n", StrBuf);
3057   2              return 1;
3058   2              }
3059   1              else if (argc != 1)
3060   1              {
3061   2                      return -1;
3062   2              }
3063   1      
3064   1              RegLen = strlen(argv[0]);
3065   1              if (RegLen >= 8 && RegLen <= 63)
3066   1              {
3067   2              GCONFIG_SetWifiPreShareKey(argv[0], RegLen);
3068   2              IO_TkipAesRW(1, RegLen, (U8_T *)argv[0]);
3069   2              }
3070   1              else
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 51  

3071   1              {
3072   2                      return -1;
3073   2              }
3074   1      
3075   1              return 1;
3076   1      
3077   1      } /* End of clicmd_SetWPAPassphrase() */
3078          
3079          /*
3080           * ----------------------------------------------------------------------------
3081           * Function Name: clicmd_SetWPAPassphraseHelp()
3082           * Purpose:
3083           * Params:
3084           * Returns:
3085           * Note:
3086           * ----------------------------------------------------------------------------
3087           */
3088          static S16_T clicmd_SetWPAPassphraseHelp(CONSOLE_Inst *pInst)
3089          {
3090   1          CONSOLE_PutMessage(pInst, "Usage: setwp <WPA Passphrase, 8 ~ 63 characters>\r\n");
3091   1          return 1;
3092   1      
3093   1      } /* End of clicmd_SetWPAPassphraseHelp() */
3094          
3095          /*
3096           * ----------------------------------------------------------------------------
3097           * Function Name: clicmd_SetEncryptionType()
3098           * Purpose:
3099           * Params:
3100           * Returns:
3101           * Note:
3102           * ----------------------------------------------------------------------------
3103           */
3104          static S16_T clicmd_SetEncryptionType(CONSOLE_Inst *pInst)
3105          {
3106   1              U8_T    Value;
3107   1      
3108   1              argc = pInst->Argc;
3109   1          argv = pInst->Argv;
3110   1      
3111   1              if (argc == 0) /* current setting */
3112   1          {
3113   2              Value = GCONFIG_GetWifiEncryptMode();
3114   2              CONSOLE_PutMessage(pInst, "Encryption Type: ");
3115   2              switch(Value)
3116   2              {
3117   3                  case 0:
3118   3                      CONSOLE_PutMessage(pInst, "No Secuirty");
3119   3                      break;
3120   3                  case 1:
3121   3                      CONSOLE_PutMessage(pInst, "WEP 64 bits");
3122   3                      break;
3123   3                  case 2:
3124   3                      CONSOLE_PutMessage(pInst, "WEP 128 bits");
3125   3                      break;
3126   3                  case 3:
3127   3                      CONSOLE_PutMessage(pInst, "TKIP");
3128   3                      break;
3129   3                  case 4:
3130   3                      CONSOLE_PutMessage(pInst, "AES");
3131   3                      break;
3132   3      
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 52  

3133   3              }
3134   2              CONSOLE_PutMessage(pInst, "\r\n");
3135   2              return 1;
3136   2              }
3137   1              else if (argc != 1 || strlen(argv[0]) != 1)
3138   1                      return -1;
3139   1      
3140   1              Value = *argv[0] - 0x30;
3141   1          if (Value > 4)
3142   1              return -1;
3143   1       
3144   1          GCONFIG_SetWifiEncryptMode(Value);
3145   1              if (Value == 2)
3146   1              {
3147   2                      IO_OpenSysRW(1, 0); /* open system */
3148   2                      IO_EncryptionRW(1, 5); /* wep128 */
3149   2              }
3150   1              else if (Value == 3)
3151   1              {
3152   2                      IO_OpenSysRW(1, 3); /* mixed mode */
3153   2                      IO_EncryptionRW(1, 2); /* tkip */
3154   2              }
3155   1              else if (Value == 1) /* do not know current encrypt mode */
3156   1              {
3157   2                      IO_OpenSysRW(1, 0); /* open system */
3158   2                      IO_EncryptionRW(1, 1); /* wep64 */
3159   2              }
3160   1              else if (Value == 4)
3161   1              {
3162   2                      IO_OpenSysRW(1, 3); /* mixed mode */
3163   2                      IO_EncryptionRW(1, 4);
3164   2              }
3165   1              else /* 0:disable, 1:wep64 */
3166   1              {
3167   2                      IO_OpenSysRW(1, 0); /* open system */
3168   2                      IO_EncryptionRW(1, Value);
3169   2              }
3170   1                              
3171   1              return 1;
3172   1      
3173   1      } /* End of clicmd_SetEncryptionType() */
3174          
3175          /*
3176           * ----------------------------------------------------------------------------
3177           * Function Name: clicmd_SetEncryptionTypeHelp()
3178           * Purpose:
3179           * Params:
3180           * Returns:
3181           * Note:
3182           * ----------------------------------------------------------------------------
3183           */
3184          static S16_T clicmd_SetEncryptionTypeHelp(CONSOLE_Inst *pInst)
3185          {
3186   1          CONSOLE_PutMessage(pInst, "Usage: setet <Encryption Type>\r\n");
3187   1              CONSOLE_PutMessage(pInst, "       <Encryption Type> 0: No Security    3: TKIP\r\n");
3188   1              CONSOLE_PutMessage(pInst, "                         1: WEP64          4: AES\r\n");
3189   1              CONSOLE_PutMessage(pInst, "                         2: WEP128\r\n");
3190   1      
3191   1          return 1;
3192   1      
3193   1      } /* End of clicmd_SetEncryptionTypeHelp() */
3194          
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 53  

3195          /*
3196           * ----------------------------------------------------------------------------
3197           * Function Name: clicmd_SiteSurvey()
3198           * Purpose:
3199           * Params:
3200           * Returns:
3201           * Note:
3202           * ----------------------------------------------------------------------------
3203           */
3204          static S16_T clicmd_SiteSurvey(CONSOLE_Inst *pInst)
3205          {
3206   1              MWIFAPP_SITE_SURVEY_REPORT XDATA *pMsg;
3207   1              U8_T i, j;
3208   1              
3209   1              argc = pInst->Argc;
3210   1      
3211   1              if (pInst->State == CLI_STATE_COMMAND)
3212   1              {
3213   2                      if (argc == 0) /* Do sitesurvey */
3214   2              {
3215   3                              pInst->CmdId = 0;                       
3216   3                              pInst->Cmd.Buf[0] = IO_SITE_SURVEY;
3217   3                              pInst->Cmd.Buf[1] = ~IO_SITE_SURVEY;                    
3218   3                              pInst->Cmd.Buf[2] = 0;                  
3219   3                              MWIFAPP_TaskCmdEnQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3220   3                              CONSOLE_PutMessage(pInst, "Please wait...\r\n");
3221   3                              pInst->State = CLI_STATE_COMMAND_WAIT;
3222   3                              return 1;
3223   3                      }
3224   2                      else
3225   2                              return -1;
3226   2              }
3227   1              else if (pInst->State == CLI_STATE_COMMAND_WAIT)
3228   1              {
3229   2                      if (pInst->Cmd.ReplyLen && (pInst->Cmd.Buf[0] + pInst->Cmd.Buf[1]) == 0xFF &&
3230   2                              pInst->Cmd.Buf[0] == IO_SITE_SURVEY_REPORT)             
3231   2                      {
3232   3                              if (!pInst->Cmd.Buf[2])
3233   3                              {
3234   4                                      CONSOLE_PutMessage(pInst, "Can not found any BSS\r\n");
3235   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3236   4                                      pInst->State = CLI_STATE_COMMAND;
3237   4                                      return 1;
3238   4                              }
3239   3                              if (!pInst->CmdId)
3240   3                              {
3241   4                                      CONSOLE_PutMessage(pInst, "INDEX "                                                      //6 digits //
3242   4                                                                                        "BSSID             "                          //18 digits //
3243   4                                                                                        "SSID                          "      //30 digits //
3244   4                                                                                        "TYPE "       //5 digits //
3245   4                                                                                        "CH  "        //4 digits //
3246   4                                                                                        "RSSI "       //5 digits //
3247   4                                                                                        "SECURITY"//8 digits //
3248   4                                                                                        "\r\n");                                              
3249   4                              }
3250   3                                                              
3251   3                              // Update site survey table //
3252   3                              if (pInst->CmdId >= MWIFAPP_MAX_SITESURVEY_TABLE_MEMBER)
3253   3                              {
3254   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));           
3255   4                                      pInst->State = CLI_STATE_COMMAND;
3256   4                                      if (pInst->CmdId)
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 54  

3257   4                                              CONSOLE_PutMessage(pInst, "Site survey table full!\r\n");
3258   4                                      return 1;                       
3259   4                              }
3260   3                                              
3261   3                              pMsg =  (MWIFAPP_SITE_SURVEY_REPORT XDATA*)&(pInst->Cmd.Buf[3]);
3262   3                              MWIFAPP_SiteSurveyTable[pInst->CmdId].Index = pMsg->Index;                              
3263   3                              memcpy(MWIFAPP_SiteSurveyTable[pInst->CmdId].BSSID, pMsg->BSSID, 6);
3264   3                              MWIFAPP_SiteSurveyTable[pInst->CmdId].Type = pMsg->Type;                                
3265   3                              MWIFAPP_SiteSurveyTable[pInst->CmdId].Channel = pMsg->Channel;
3266   3                              MWIFAPP_SiteSurveyTable[pInst->CmdId].RSSI = pMsg->RSSI;                                
3267   3                              MWIFAPP_SiteSurveyTable[pInst->CmdId].Security = pMsg->Security;
3268   3                              if ((pInst->Cmd.Buf[2] - 12) > (MWIFAPP_MAX_SSID_LENGTH - 1))
3269   3                                      i = MWIFAPP_MAX_SSID_LENGTH - 1;
3270   3                              else
3271   3                                      i = pInst->Cmd.Buf[2] - 12;
3272   3                              memcpy(MWIFAPP_SiteSurveyTable[pInst->CmdId].SSID, pMsg->SSID, i);
3273   3                              MWIFAPP_SiteSurveyTable[pInst->CmdId].SSID[i] = '\0';
3274   3                              
3275   3                              // Display site survey table //
3276   3                              CONSOLE_PutMessage(pInst, "%02bu    "   //6 digits //
3277   3                                                                                "%02bx-%02bx-%02bx-%02bx-%02bx-%02bx ",//18 digits //
3278   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].Index,
3279   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].BSSID[0],
3280   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].BSSID[1],
3281   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].BSSID[2], 
3282   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].BSSID[3], 
3283   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].BSSID[4], 
3284   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].BSSID[5]);
3285   3                              for (j = 0; j < 30; j ++)                                                 
3286   3                              {
3287   4                                      if (j < i)
3288   4                                              CONSOLE_PutMessage(pInst, "%c", MWIFAPP_SiteSurveyTable[pInst->CmdId].SSID[j]);//30 digits //
3289   4                                      else
3290   4                                              CONSOLE_PutMessage(pInst, " ");
3291   4                              }
3292   3                              CONSOLE_PutMessage(pInst, "%s  "                //5 digits //
3293   3                                                                                "%03bu "              //4 digits //
3294   3                                                                                "%02bx   "    //5 digits //
3295   3                                                                                "%bu|%s"              //8 digits //
3296   3                                                                                "\r\n",
3297   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].Type ? "ap ":"sta",
3298   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].Channel,
3299   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].RSSI,
3300   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].Security,
3301   3                                                                                 MWIFAPP_SiteSurveyTable[pInst->CmdId].Security ? "yes":"no ");
3302   3                              pInst->CmdId ++;
3303   3                  IO_SiteSurveyReportAck();
3304   3                              pInst->Cmd.WaitTime = 5;// Set packet timeout = 5x50(250) ms//
3305   3                              pInst->Cmd.ReplyLen = 0;                                                                                           
3306   3                              return 1;
3307   3                      }
3308   2                      else if (pInst->Cmd.WaitTime == 0)
3309   2                      {
3310   3                              MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));           
3311   3                              pInst->State = CLI_STATE_COMMAND;
3312   3                              if (pInst->CmdId)
3313   3                                      return 1;
3314   3                              else
3315   3                              {
3316   4                                      CONSOLE_PutMessage(pInst, "Command Time out\r\n");              
3317   4                                      return -1;              
3318   4                              }
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 55  

3319   3                      }
3320   2                      else
3321   2                              pInst->Cmd.ReplyLen = 0;
3322   2              }
3323   1              return 1;
3324   1      
3325   1      } /* End of clicmd_SiteSurvey() */
3326          
3327          /*
3328           * ----------------------------------------------------------------------------
3329           * Function Name: clicmd_SiteSurveyHelp()
3330           * Purpose:
3331           * Params:
3332           * Returns:
3333           * Note:
3334           * ----------------------------------------------------------------------------
3335           */
3336          static S16_T clicmd_SiteSurveyHelp(CONSOLE_Inst *pInst)
3337          {
3338   1          CONSOLE_PutMessage(pInst, "Usage: sisrvy\r\n");
3339   1          return 1;
3340   1      
3341   1      } /* End of clicmd_SiteSurveyHelp() */
3342          
3343          /*
3344           * ----------------------------------------------------------------------------
3345           * Function Name: clicmd_JoinBSS()
3346           * Purpose:
3347           * Params:
3348           * Returns:
3349           * Note:
3350           * ----------------------------------------------------------------------------
3351           */
3352          static S16_T clicmd_JoinBSS(CONSOLE_Inst *pInst)
3353          {
3354   1              U8_T    RegLen, Value, i;
3355   1      
3356   1              argc = pInst->Argc;
3357   1              argv = pInst->Argv;
3358   1      
3359   1              if (pInst->State == CLI_STATE_COMMAND)
3360   1              {
3361   2                      if (argc != 1 || (RegLen = strlen(argv[0])) > 2) // Join the selected BSS //
3362   2                      return -1;
3363   2       
3364   2                      if (clicmd_DecText2Char(argv[0], &Value, RegLen) == 0xFF)
3365   2                      {
3366   3                              return -1;
3367   3                      }
3368   2                      if (Value >= MWIFAPP_MAX_SITESURVEY_TABLE_MEMBER)
3369   2                              return -1;
3370   2                              
3371   2                      if (MWIFAPP_SiteSurveyTable[Value].Security == 2)
3372   2                              IO_OpenSysRW(1,3);
3373   2                      else
3374   2                              IO_OpenSysRW(1,0);
3375   2                      
3376   2                      if (MWIFAPP_SiteSurveyTable[Value].Security == 0)
3377   2                              IO_EncryptionRW(1,0);
3378   2                      else if (MWIFAPP_SiteSurveyTable[Value].Security == 1)
3379   2                              i = GCONFIG_GetWifiEncryptMode();
3380   2                              if (i == 2)
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 56  

3381   2                                      IO_EncryptionRW(1,5);
3382   2                              else if (i == 3)
3383   2                                      IO_EncryptionRW(1,2);                   
3384   2                              else
3385   2                                      IO_EncryptionRW(1,i);                                           
3386   2                              
3387   2                      IO_WepKeyIndexRW(1,GCONFIG_GetWifiWepKeyIndex());
3388   2              
3389   2                      pInst->Cmd.Buf[0] = IO_JOIN_BSS;
3390   2                      pInst->Cmd.Buf[1] = ~IO_JOIN_BSS;                       
3391   2                      pInst->Cmd.Buf[2] = 1;                  
3392   2                      pInst->Cmd.Buf[3] = Value;                                      
3393   2                      pInst->CmdId = IO_MCPU_WCPU_CONNECT;// save index value //
3394   2                      MWIFAPP_TaskCmdEnQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3395   2                      CONSOLE_PutMessage(pInst, "Please wait...\r\n");                
3396   2                      pInst->State = CLI_STATE_COMMAND_WAIT;
3397   2              }
3398   1              else if (pInst->State == CLI_STATE_COMMAND_WAIT)
3399   1              {
3400   2                      if (pInst->Cmd.ReplyLen && (pInst->Cmd.Buf[0] + pInst->Cmd.Buf[1]) == 0xFF)
3401   2                      {
3402   3                              if (pInst->CmdId == IO_MCPU_WCPU_CONNECT && pInst->Cmd.Buf[0] != IO_MCPU_WCPU_CONNECT)
3403   3                              {
3404   4                                      pInst->Cmd.ReplyLen     = 0;
3405   4                                      return 1;
3406   4                              }
3407   3                              
3408   3                              switch (pInst->Cmd.Buf[0])
3409   3                              {
3410   4                              case (IO_MCPU_WCPU_CONNECT):
3411   4                                      pInst->CmdId = 0;
3412   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3413   4                                      CONSOLE_PutMessage(pInst, "Join BSS successful!\r\n");
3414   4                                      pInst->Cmd.Buf[0] = IO_OPERATE_MODE;
3415   4                                      goto CLICMD_JBSS_BY_READ;
3416   4                                      break;
3417   4                              case IO_OPERATE_MODE_RESP:
3418   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3419   4                                      CONSOLE_PutMessage(pInst, "Update base band|%bu= ",pInst->Cmd.Buf[4]);
3420   4                                      if (pInst->Cmd.Buf[4] == 1)
3421   4                                      {
3422   5                                              GCONFIG_SetWifiBasebandMode(1);
3423   5                                              CONSOLE_PutMessage(pInst, "802.11b/g mode\r\n");
3424   5                                      }
3425   4                                      else if (pInst->Cmd.Buf[4] == 4)
3426   4                                      {
3427   5                                              GCONFIG_SetWifiBasebandMode(2);
3428   5                                              CONSOLE_PutMessage(pInst, "802.11a mode\r\n");
3429   5                                      }
3430   4                                      else if (pInst->Cmd.Buf[4] == 5)
3431   4                                      {
3432   5                                              CONSOLE_PutMessage(pInst, "802.11a/b/g mode\r\n");              
3433   5                                      }
3434   4                                      else
3435   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");                                                                                                     
3436   4                                      pInst->Cmd.Buf[0] = IO_NETWORK_MODE;
3437   4                                      goto CLICMD_JBSS_BY_READ;                               
3438   4                                      break;
3439   4                              case IO_NETWORK_MODE_RESP:
3440   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3441   4                                      CONSOLE_PutMessage(pInst, "Update network mode|%bu= ",pInst->Cmd.Buf[4]);
3442   4                                      if (pInst->Cmd.Buf[4] == 2)
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 57  

3443   4                                      {
3444   5                                              GCONFIG_SetWifiNetworkMode(1);
3445   5                                              CONSOLE_PutMessage(pInst, "Ad-hoc\r\n");
3446   5                                      }
3447   4                                      else if (pInst->Cmd.Buf[4] == 3)
3448   4                                      {
3449   5                                              GCONFIG_SetWifiNetworkMode(0);                          
3450   5                                              CONSOLE_PutMessage(pInst, "infrastructure\r\n");
3451   5                                      }
3452   4                                      else
3453   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");                                             
3454   4                                      pInst->Cmd.Buf[0] = IO_CHANNEL;
3455   4                                      goto CLICMD_JBSS_BY_READ;
3456   4                                      break;
3457   4                              case IO_CHANNEL_RESP:
3458   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3459   4                                      for (StrLen = 0; StrLen < IO_WiFiSupportedChBufSize; StrLen++)
3460   4                                      {
3461   5                                              if (IO_WiFiSupportedCh[StrLen] == pInst->Cmd.Buf[4])
3462   5                                                      break;
3463   5                                      }
3464   4                                      if (StrLen != IO_WiFiSupportedChBufSize)
3465   4                                      {       
3466   5                                      GCONFIG_SetChannel(StrLen);                             
3467   5                                              CONSOLE_PutMessage(pInst, "Update channel= %bu\r\n",pInst->Cmd.Buf[4]);
3468   5                                      }
3469   4                                      else
3470   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
3471   4                                      pInst->Cmd.Buf[0] = IO_SSID_READ;
3472   4                                      goto CLICMD_JBSS_NO_OPTION;
3473   4                                      break;
3474   4                              case IO_SSID_READ_RESP:
3475   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3476   4                                      CONSOLE_PutMessage(pInst, "Update ssid");                               
3477   4                                      if (pInst->Cmd.Buf[2] > 32)
3478   4                                              CONSOLE_PutMessage(pInst, " length error\r\n");
3479   4                                      else
3480   4                                      {
3481   5      #if (INCLUDE_DHCP_CLIENT)
3482   5                                              pInst->CmdId = 0xFF;
3483   5      #endif                                                                  
3484   5                                              GCONFIG_SetSsid((U8_T *)&(pInst->Cmd.Buf[3]), pInst->Cmd.Buf[2]);
3485   5                                              pInst->Cmd.Buf[3+pInst->Cmd.Buf[2]] = '\0';
3486   5                                              CONSOLE_PutMessage(pInst, "= %s\r\n", (U8_T *)&(pInst->Cmd.Buf[3]));
3487   5                                              
3488   5                                      }
3489   4                                      pInst->Cmd.Buf[0] = IO_OPEN_SYSTEM;
3490   4                                      goto CLICMD_JBSS_BY_READ;
3491   4                                      break;
3492   4                              case IO_OPEN_SYSTEM_RESP:
3493   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));   
3494   4                                      
3495   4                                      CONSOLE_PutMessage(pInst, "Authentication type|%bu: ",pInst->Cmd.Buf[4]);
3496   4                                      if (pInst->Cmd.Buf[4] == 0)
3497   4                                              CONSOLE_PutMessage(pInst, "open system\r\n");
3498   4                                      else if (pInst->Cmd.Buf[4] == 1)
3499   4                                              CONSOLE_PutMessage(pInst, "share key\r\n");
3500   4                                      else if (pInst->Cmd.Buf[4] == 2)
3501   4                                              CONSOLE_PutMessage(pInst, "WPA1_WPA2 only\r\n");
3502   4                                      else if (pInst->Cmd.Buf[4] == 3)
3503   4                                              CONSOLE_PutMessage(pInst, "WPA1_WPA2 mixed\r\n");
3504   4                                      else
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 58  

3505   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
3506   4                                                                      
3507   4                                      pInst->Cmd.Buf[0] = IO_ENCRYPTION_TYPE;                         
3508   4                                      goto CLICMD_JBSS_BY_READ;
3509   4                                      break;
3510   4                              case IO_ENCRYPTION_TYPE_RESP:
3511   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
3512   4                                      CONSOLE_PutMessage(pInst, "Update encryption type|%bu=",pInst->Cmd.Buf[4]);
3513   4                                      if (pInst->Cmd.Buf[4] == 0x00)
3514   4                                      {
3515   5                                              GCONFIG_SetWifiEncryptMode(0);
3516   5                                              CONSOLE_PutMessage(pInst, "no security\r\n");
3517   5                                      }
3518   4                                      else if (pInst->Cmd.Buf[4] == 0x01)
3519   4                                      {
3520   5                                              GCONFIG_SetWifiEncryptMode(1);                          
3521   5                                              CONSOLE_PutMessage(pInst, "WEP64 bits\r\n");
3522   5                                      }
3523   4                                      else if (pInst->Cmd.Buf[4] == 0x02)
3524   4                                      {
3525   5                                              GCONFIG_SetWifiEncryptMode(3);                          
3526   5                                              CONSOLE_PutMessage(pInst, "TKIP\r\n");                          
3527   5                                      }
3528   4                                      else if (pInst->Cmd.Buf[4] == 0x04)
3529   4                                      {
3530   5                                              GCONFIG_SetWifiEncryptMode(4);                          
3531   5                                              CONSOLE_PutMessage(pInst, "AES\r\n");                           
3532   5                                      }
3533   4                                      else if (pInst->Cmd.Buf[4] == 0x05)
3534   4                                      {
3535   5                                              GCONFIG_SetWifiEncryptMode(2);                          
3536   5                                              CONSOLE_PutMessage(pInst, "WEP128 bits\r\n");
3537   5                                      }
3538   4                                      else
3539   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");                                     
3540   4                                      pInst->Cmd.Buf[0] = IO_TX_DATA_RATE;
3541   4                                      goto CLICMD_JBSS_BY_READ;
3542   4                                      break;
3543   4                              case IO_TX_DATA_RATE_RESP:
3544   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3545   4                                      CONSOLE_PutMessage(pInst, "Update Tx Rate|%bu= ",pInst->Cmd.Buf[4]);
3546   4                                      if (pInst->Cmd.Buf[4] == 0x00)
3547   4                                      {
3548   5                                              GCONFIG_SetWifiTxRate(0);
3549   5                                              CONSOLE_PutMessage(pInst, "Auto\r\n");
3550   5                                      }
3551   4                                      else if (pInst->Cmd.Buf[4] == 0x02)
3552   4                                      {
3553   5                                              GCONFIG_SetWifiTxRate(1);
3554   5                                              CONSOLE_PutMessage(pInst, "1 Mbps\r\n");
3555   5                                      }
3556   4                                      else if (pInst->Cmd.Buf[4] == 0x04)
3557   4                                      {
3558   5                                              GCONFIG_SetWifiTxRate(2);                               
3559   5                                              CONSOLE_PutMessage(pInst, "2 Mbps\r\n");
3560   5                                      }
3561   4                                      else if (pInst->Cmd.Buf[4] == 0x0B)
3562   4                                      {
3563   5                                              GCONFIG_SetWifiTxRate(3);
3564   5                                              CONSOLE_PutMessage(pInst, "5.5 Mbps\r\n");
3565   5                                      }
3566   4                                      else if (pInst->Cmd.Buf[4] == 0x0C)
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 59  

3567   4                                      {
3568   5                                              GCONFIG_SetWifiTxRate(4);                               
3569   5                                              CONSOLE_PutMessage(pInst, "6 Mbps\r\n");
3570   5                                      }
3571   4                                      else if (pInst->Cmd.Buf[4] == 0x12)
3572   4                                      {
3573   5                                              GCONFIG_SetWifiTxRate(5);                               
3574   5                                              CONSOLE_PutMessage(pInst, "9 Mbps\r\n");
3575   5                                      }
3576   4                                      else if (pInst->Cmd.Buf[4] == 0x16)
3577   4                                      {
3578   5                                              GCONFIG_SetWifiTxRate(6);                               
3579   5                                              CONSOLE_PutMessage(pInst, "11 Mbps\r\n");
3580   5                                      }
3581   4                                      else if (pInst->Cmd.Buf[4] == 0x18)
3582   4                                      {
3583   5                                              GCONFIG_SetWifiTxRate(7);                               
3584   5                                              CONSOLE_PutMessage(pInst, "12 Mbps\r\n");
3585   5                                      }
3586   4                                      else if (pInst->Cmd.Buf[4] == 0x24)
3587   4                                      {
3588   5                                              GCONFIG_SetWifiTxRate(8);                               
3589   5                                              CONSOLE_PutMessage(pInst, "18 Mbps\r\n");
3590   5                                      }
3591   4                                      else if (pInst->Cmd.Buf[4] == 0x30)
3592   4                                      {
3593   5                                              GCONFIG_SetWifiTxRate(9);
3594   5                                              CONSOLE_PutMessage(pInst, "24 Mbps\r\n");
3595   5                                      }
3596   4                                      else if (pInst->Cmd.Buf[4] == 0x48)
3597   4                                      {
3598   5                                              GCONFIG_SetWifiTxRate(10);                              
3599   5                                              CONSOLE_PutMessage(pInst, "36 Mbps\r\n");
3600   5                                      }                                       
3601   4                                      else if (pInst->Cmd.Buf[4] == 0x60)
3602   4                                      {
3603   5                                              GCONFIG_SetWifiTxRate(11);                              
3604   5                                              CONSOLE_PutMessage(pInst, "48 Mbps\r\n");
3605   5                                      }
3606   4                                      else if (pInst->Cmd.Buf[4] == 0x6C)
3607   4                                      {
3608   5                                              GCONFIG_SetWifiTxRate(12);
3609   5                                              CONSOLE_PutMessage(pInst, "54 Mbps\r\n");
3610   5                                      }                                       
3611   4                                      else
3612   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
3613   4                                      
3614   4                                      GCONFIG_WriteConfigData();
3615   4                                      CONSOLE_PutMessage(pInst, "Save WiFi config to flash ROM\r\n");
3616   4                      pInst->State = CLI_STATE_COMMAND;
3617   4      #if (INCLUDE_DHCP_CLIENT)
3618   4                                      if (pInst->CmdId)       
3619   4                                              MAIN_RestartDhcpClient();
3620   4      #endif                          
3621   4                                      break;
3622   4                              default:
3623   4                                      pInst->Cmd.ReplyLen     = 0;                    
3624   4                                      break;
3625   4                              }
3626   3                              return 1;
3627   3                      }
3628   2                      else if (pInst->Cmd.WaitTime == 0)
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 60  

3629   2                      {
3630   3                              MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));           
3631   3                              pInst->State = CLI_STATE_COMMAND;
3632   3                              CONSOLE_PutMessage(pInst, "Join fail!\r\n");            
3633   3                              return -1;              
3634   3                      }
3635   2                      else
3636   2                              pInst->Cmd.ReplyLen = 0;        
3637   2              }
3638   1              return 1;
3639   1      
3640   1      CLICMD_JBSS_NO_OPTION:
3641   1              pInst->Cmd.Buf[1] = ~(pInst->Cmd.Buf[0]);
3642   1              pInst->Cmd.Buf[2] = 0;
3643   1              MWIFAPP_TaskCmdEnQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3644   1              return 1;
3645   1      CLICMD_JBSS_BY_READ:
3646   1              pInst->Cmd.Buf[1] = ~(pInst->Cmd.Buf[0]);
3647   1              pInst->Cmd.Buf[2] = 1;
3648   1              pInst->Cmd.Buf[3] = 0;  
3649   1              MWIFAPP_TaskCmdEnQueue((MWIFAPP_LINK*)&(pInst->Cmd));
3650   1              return 1;
3651   1      
3652   1      } /* End of clicmd_JoinBSS() */
3653          
3654          /*
3655           * ----------------------------------------------------------------------------
3656           * Function Name: clicmd_JoinBSSHelp()
3657           * Purpose:
3658           * Params:
3659           * Returns:
3660           * Note:
3661           * ----------------------------------------------------------------------------
3662           */
3663          static S16_T clicmd_JoinBSSHelp(CONSOLE_Inst *pInst)
3664          {
3665   1          CONSOLE_PutMessage(pInst, "Usage: jbss <ID in sitesurvey table>\r\n");
3666   1          return 1;
3667   1      
3668   1      } /* End of clicmd_JoinBSSHelp() */
3669          
3670          #if 0 /* Support 802.11 b/g only */
              /*
               * ----------------------------------------------------------------------------
               * Function Name: clicmd_SetOperationMode()
               * Purpose:
               * Params:
               * Returns:
               * Note:
               * ----------------------------------------------------------------------------
               */
              static S16_T clicmd_SetOperationMode(CONSOLE_Inst *pInst)
              {
                  U8_T value;
              
                      argc = pInst->Argc;
                      argv = pInst->Argv;
              
                      if (argc == 0) /* Read current operation mode */
                  {
                      value = GCONFIG_GetWifiBasebandMode();
                      CONSOLE_PutMessage(pInst, "Operation Mode: ");
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 61  

                      if (value == 1)
                          CONSOLE_PutMessage(pInst, "802.11 b/g\r\n");
                      else if (value == 2)
                          CONSOLE_PutMessage(pInst, "802.11 a\r\n");
                      return 1;
                      }
                      else if (argc != 1 || strlen(argv[0]) != 1)
                      return -1;
              
                  value = atoi(argv[0]);
                  if (value == 1 || value == 2)
                      {
                      GCONFIG_SetWifiBasebandMode(value);
                              IOCTLM2W_SendOperateMode(WIFI_WRITE, value);
                      }
                      else
                      {
                              return -1;
                      }
              
                      return 1;
              
              } /* End of clicmd_SetOperationMode() */
              
              /*
               * ----------------------------------------------------------------------------
               * Function Name: clicmd_SetOperationModeHelp()
               * Purpose:
               * Params:
               * Returns:
               * Note:
               * ----------------------------------------------------------------------------
               */
              static S16_T clicmd_SetOperationModeHelp(CONSOLE_Inst *pInst)
              {
                  CONSOLE_PutMessage(pInst, "Usage: setopm <1 = 802.11 b/g mixde mode, 2 = 802.11 a mode>\r\n");
                  return 1;
              
              } /* End of clicmd_SetOperationModeHelp() */
              #endif
3731          /*
3732           * ----------------------------------------------------------------------------
3733           * Function Name: clicmd_SetWepKeyLength()
3734           * Purpose:
3735           * Params:
3736           * Returns:
3737           * Note:
3738           * ----------------------------------------------------------------------------
3739           */
3740          static S16_T clicmd_SetWepKeyLength(CONSOLE_Inst *pInst)
3741          {
3742   1          U8_T value;
3743   1      
3744   1              argc = pInst->Argc;
3745   1              argv = pInst->Argv;
3746   1      
3747   1              if (argc == 0) /* Read current operation mode */
3748   1          {
3749   2              value = GCONFIG_GetWifiWepKeyLength();
3750   2              CONSOLE_PutMessage(pInst, "WEP key length: ");
3751   2              if (value == 0)
3752   2                  CONSOLE_PutMessage(pInst, "64 bits\r\n");
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 62  

3753   2              else if (value == 1)
3754   2                  CONSOLE_PutMessage(pInst, "128 bits\r\n");
3755   2              return 1;
3756   2              }
3757   1              else if (argc != 1 || strlen(argv[0]) != 1)
3758   1              return -1;
3759   1      
3760   1          value = atoi(argv[0]);
3761   1          if (value > 1)
3762   1              return -1;
3763   1      
3764   1          GCONFIG_SetWifiWepKeyLength(value);
3765   1      
3766   1              return 1;
3767   1      
3768   1      } /* End of clicmd_SetWepKeyLength() */
3769          
3770          /*
3771           * ----------------------------------------------------------------------------
3772           * Function Name: clicmd_SetWepKeyLengthHelp()
3773           * Purpose:
3774           * Params:
3775           * Returns:
3776           * Note:
3777           * ----------------------------------------------------------------------------
3778           */
3779          static S16_T clicmd_SetWepKeyLengthHelp(CONSOLE_Inst *pInst)
3780          {
3781   1          CONSOLE_PutMessage(pInst, "Usage: wepklen <0:64 bits, 1:128 bits>\r\n");
3782   1          return 1;
3783   1      
3784   1      } /* End of clicmd_SetWepKeyLengthHelp() */
3785          
3786          /*
3787           * ----------------------------------------------------------------------------
3788           * Function Name: clicmd_SetPreamble()
3789           * Purpose:
3790           * Params:
3791           * Returns:
3792           * Note:
3793           * ----------------------------------------------------------------------------
3794           */
3795          static S16_T clicmd_SetPreamble(CONSOLE_Inst *pInst)
3796          {
3797   1          U8_T value;
3798   1      
3799   1              argc = pInst->Argc;
3800   1              argv = pInst->Argv;
3801   1      
3802   1              if (argc == 0) /* Read current preamble */
3803   1          {
3804   2              value = GCONFIG_GetWifiPreambleMode();
3805   2              CONSOLE_PutMessage(pInst, "Preamble: ");
3806   2              if (value)
3807   2                  CONSOLE_PutMessage(pInst, "Auto\r\n");
3808   2              else
3809   2                  CONSOLE_PutMessage(pInst, "Long\r\n");
3810   2      
3811   2              return 1;
3812   2              }
3813   1              else if (argc != 1 || strlen(argv[0]) != 1)
3814   1              return -1;
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 63  

3815   1      
3816   1          value = atoi(argv[0]);
3817   1          if (value > 1)
3818   1              return -1;
3819   1      
3820   1          GCONFIG_SetWifiPreambleMode(value);
3821   1              IO_PreambleRW(1, value ? 20:0); /* 0/20: long/auto */
3822   1              return 1;
3823   1      
3824   1      } /* End of clicmd_SetPreamble() */
3825          
3826          /*
3827           * ----------------------------------------------------------------------------
3828           * Function Name: clicmd_SetPreambleHelp()
3829           * Purpose:
3830           * Params:
3831           * Returns:
3832           * Note:
3833           * ----------------------------------------------------------------------------
3834           */
3835          static S16_T clicmd_SetPreambleHelp(CONSOLE_Inst *pInst)
3836          {
3837   1          CONSOLE_PutMessage(pInst, "Usage: setpmb <0 = Long preamble, 1 = Auto>\r\n");
3838   1          return 1;
3839   1      
3840   1      } /* End of clicmd_SetPreambleHelp() */
3841          
3842          /*
3843           * ----------------------------------------------------------------------------
3844           * Function Name: clicmd_SetRTSThreshold()
3845           * Purpose:
3846           * Params:
3847           * Returns:
3848           * Note:
3849           * ----------------------------------------------------------------------------
3850           */
3851          static S16_T clicmd_SetRTSThreshold(CONSOLE_Inst *pInst)
3852          {
3853   1              U8_T    RegLen;
3854   1              U16_T   Value;
3855   1      
3856   1              argc = pInst->Argc;
3857   1              argv = pInst->Argv;
3858   1      
3859   1              if (argc == 0) /* Read current RTS threshold */
3860   1          {
3861   2              Value = GCONFIG_GetWifiRtsThreshold();
3862   2              CONSOLE_PutMessage(pInst, "RTS Threahold: %u\r\n", Value);
3863   2              return 1;
3864   2              }
3865   1              else if (argc != 1 || (RegLen = strlen(argv[0])) > 4)
3866   1              return -1;
3867   1      
3868   1              if (clicmd_DecText2Short(argv[0], &Value, RegLen) == 0xFF)
3869   1              {
3870   2                      return -1;
3871   2              }
3872   1              if (Value > 2432)
3873   1              {
3874   2                      return -1;
3875   2              }
3876   1      
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 64  

3877   1          GCONFIG_SetWifiRtsThreshold(Value);
3878   1              IO_RtsThresholdRW(1, (U8_T XDATA*)&Value);
3879   1              return 1;
3880   1      
3881   1      } /* End of clicmd_SetRTSThreshold() */
3882          
3883          /*
3884           * ----------------------------------------------------------------------------
3885           * Function Name: clicmd_SetRTSThresholdHelp()
3886           * Purpose:
3887           * Params:
3888           * Returns:
3889           * Note:
3890           * ----------------------------------------------------------------------------
3891           */
3892          static S16_T clicmd_SetRTSThresholdHelp(CONSOLE_Inst *pInst)
3893          {
3894   1          CONSOLE_PutMessage(pInst, "Usage: setrts <RTS threshold, 0 ~ 2432>\r\n");
3895   1          return 1;
3896   1      
3897   1      } /* End of clicmd_SetRTSThresholdHelp() */
3898          
3899          /*
3900           * ----------------------------------------------------------------------------
3901           * Function Name: clicmd_SetTxPowerLevel()
3902           * Purpose:
3903           * Params:
3904           * Returns:
3905           * Note:
3906           * ----------------------------------------------------------------------------
3907           */
3908          static S16_T clicmd_SetTxPowerLevel(CONSOLE_Inst *pInst)
3909          {
3910   1              U8_T    Value;
3911   1      
3912   1              argc = pInst->Argc;
3913   1              argv = pInst->Argv;
3914   1              if (argc == 0) /* Read current power level */
3915   1          {
3916   2              Value = GCONFIG_GetWifiTxPowerLevel();
3917   2              CONSOLE_PutMessage(pInst, "Transmit Power Level: ");
3918   2              switch(Value)
3919   2              {
3920   3                  case 0:
3921   3                      CONSOLE_PutMessage(pInst, "100%%");
3922   3                      break;
3923   3                  case 1:
3924   3                      CONSOLE_PutMessage(pInst, "50%%");
3925   3                      break;
3926   3                  case 2:
3927   3                      CONSOLE_PutMessage(pInst, "25%%");
3928   3                      break;
3929   3                  case 3:
3930   3                      CONSOLE_PutMessage(pInst, "12.5%%");
3931   3                      break;
3932   3                  case 4:
3933   3                      CONSOLE_PutMessage(pInst, "6.25%%");
3934   3                      break;
3935   3              }
3936   2              CONSOLE_PutMessage(pInst, "\r\n");
3937   2              return 1;
3938   2              }
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 65  

3939   1              else if (argc != 1 || strlen(argv[0]) != 1)
3940   1              return -1;
3941   1      
3942   1          /* Write user's power level */
3943   1              if (clicmd_DecText2Char(argv[0], &Value, 1) == 0xFF)
3944   1              {
3945   2                      return -1;
3946   2              }
3947   1              if (Value < 5)
3948   1              {
3949   2              GCONFIG_SetWifiTxPowerLevel(Value);
3950   2                      IO_TxDefaultPowerLevelRW(1, Value);
3951   2              }
3952   1              else
3953   1              {
3954   2                      return -1;
3955   2              }
3956   1      
3957   1              return 1;
3958   1      
3959   1      } /* End of clicmd_SetTxPowerLevel() */
3960          
3961          /*
3962           * ----------------------------------------------------------------------------
3963           * Function Name: clicmd_SetTxPowerLevelHelp()
3964           * Purpose:
3965           * Params:
3966           * Returns:
3967           * Note:
3968           * ----------------------------------------------------------------------------
3969           */
3970          static S16_T clicmd_SetTxPowerLevelHelp(CONSOLE_Inst *pInst)
3971          {
3972   1          CONSOLE_PutMessage(pInst, "Usage: settpl <Power level>\r\n");
3973   1              CONSOLE_PutMessage(pInst, "       <Power level> 0: 100%%     3: 12.5%%\r\n");
3974   1              CONSOLE_PutMessage(pInst, "                     1: 50%%      4: 6.25%%\r\n");
3975   1              CONSOLE_PutMessage(pInst, "                     2: 25%%\r\n");
3976   1      
3977   1          return 1;
3978   1      
3979   1      } /* End of clicmd_SetTxPowerLevelHelp() */
3980          
3981          /*
3982           * ----------------------------------------------------------------------------
3983           * Function Name: clicmd_SetDataRate()
3984           * Purpose:
3985           * Params:
3986           * Returns:
3987           * Note:
3988           * ----------------------------------------------------------------------------
3989           */
3990          static S16_T clicmd_SetDataRate(CONSOLE_Inst *pInst)
3991          {
3992   1              U8_T    RegLen, Value;
3993   1      
3994   1              argc = pInst->Argc;
3995   1              argv = pInst->Argv;
3996   1              if (argc == 0) /* Read current data rate */
3997   1              {
3998   2              Value = GCONFIG_GetWifiTxRate();
3999   2              CONSOLE_PutMessage(pInst, "Transmit Rate: ");
4000   2              switch(Value)
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 66  

4001   2              {
4002   3                  case 0:
4003   3                      CONSOLE_PutMessage(pInst, "Auto");
4004   3                      break;
4005   3                  case 1:
4006   3                      CONSOLE_PutMessage(pInst, "1 Mbps");
4007   3                      break;
4008   3                  case 2:
4009   3                      CONSOLE_PutMessage(pInst, "2 Mbps");
4010   3                      break;
4011   3                  case 3:
4012   3                      CONSOLE_PutMessage(pInst, "5.5 Mbps");
4013   3                      break;
4014   3                  case 4:
4015   3                      CONSOLE_PutMessage(pInst, "6 Mbps");
4016   3                      break;
4017   3                  case 5:
4018   3                      CONSOLE_PutMessage(pInst, "9 Mbps");
4019   3                      break;
4020   3                  case 6:
4021   3                      CONSOLE_PutMessage(pInst, "11 Mbps");
4022   3                      break;
4023   3                  case 7:
4024   3                      CONSOLE_PutMessage(pInst, "12 Mbps");
4025   3                      break;
4026   3                  case 8:
4027   3                      CONSOLE_PutMessage(pInst, "18 Mbps");
4028   3                      break;
4029   3                  case 9:
4030   3                      CONSOLE_PutMessage(pInst, "24 Mbps");
4031   3                      break;
4032   3                  case 10:
4033   3                      CONSOLE_PutMessage(pInst, "36 Mbps");
4034   3                      break;
4035   3                  case 11:
4036   3                      CONSOLE_PutMessage(pInst, "48 Mbps");
4037   3                      break;
4038   3                  case 12:
4039   3                      CONSOLE_PutMessage(pInst, "54 Mbps");
4040   3                      break;
4041   3              }
4042   2              CONSOLE_PutMessage(pInst, "\r\n");
4043   2      
4044   2              return 1;
4045   2              }
4046   1              else if (argc != 1 || ((RegLen = strlen(argv[0])) > 2)) /* Write user's data rate */
4047   1              return -1;
4048   1      
4049   1              if (clicmd_HexText2Char(argv[0], &Value, RegLen) == 0xFF)
4050   1              {
4051   2                      return -1;
4052   2              }
4053   1              if (IO_TxDataRateRW(1, Value))
4054   1              {
4055   2                      return -1;
4056   2              }
4057   1      
4058   1          GCONFIG_SetWifiTxRate(Value);
4059   1      
4060   1              return 1;
4061   1      
4062   1      } /* End of clicmd_SetDataRate() */
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 67  

4063          
4064          /*
4065           * ----------------------------------------------------------------------------
4066           * Function Name: clicmd_SetDataRateHelp()
4067           * Purpose:
4068           * Params:
4069           * Returns:
4070           * Note:
4071           * ----------------------------------------------------------------------------
4072           */
4073          static S16_T clicmd_SetDataRateHelp(CONSOLE_Inst *pInst)
4074          {
4075   1          CONSOLE_PutMessage(pInst, "Usage: setdr <Data rate>\r\n");
4076   1              CONSOLE_PutMessage(pInst, "       <Data rate> 0: Auto        7: 12Mbps\r\n");
4077   1              CONSOLE_PutMessage(pInst, "                   1: 1Mbps       8: 18Mbps\r\n");
4078   1              CONSOLE_PutMessage(pInst, "                   2: 2Mbps       9: 24Mbps\r\n");
4079   1              CONSOLE_PutMessage(pInst, "                   3: 5.5Mbps    10: 36Mbps\r\n");
4080   1              CONSOLE_PutMessage(pInst, "                   4: 6Mbps      11: 48Mbps\r\n");
4081   1              CONSOLE_PutMessage(pInst, "                   5: 9Mbps      12: 54Mbps\r\n");
4082   1              CONSOLE_PutMessage(pInst, "                   6: 11Mbps\r\n");
4083   1      
4084   1          return 1;
4085   1      
4086   1      } /* End of clicmd_SetDataRateHelp() */
4087          
4088          /*
4089           * ----------------------------------------------------------------------------
4090           * Function Name: clicmd_SetAutoPowerControl()
4091           * Purpose:
4092           * Params:
4093           * Returns:
4094           * Note:
4095           * ----------------------------------------------------------------------------
4096           */
4097          static S16_T clicmd_SetAutoPowerControl(CONSOLE_Inst *pInst)
4098          {
4099   1              U8_T    RegLen;
4100   1      
4101   1              argc = pInst->Argc;
4102   1              argv = pInst->Argv;
4103   1              if (argc == 0) /* Read current state of auto power control */
4104   1              {
4105   2              RegLen = GCONFIG_GetWifiAutoPowerCtrl();
4106   2              CONSOLE_PutMessage(pInst, "Auto Power Control: ");
4107   2              if (RegLen == 0)
4108   2                  CONSOLE_PutMessage(pInst, "Disable\r\n");
4109   2              else
4110   2                  CONSOLE_PutMessage(pInst, "Enable\r\n");
4111   2      
4112   2              return 1;
4113   2              }
4114   1              else if (argc != 1 || strlen(argv[0]) != 1) /* Write user's setting of auto power control */
4115   1              return -1;
4116   1      
4117   1          RegLen = atoi(argv[0]);
4118   1          if (RegLen < 2)
4119   1          {
4120   2              GCONFIG_SetWifiAutoPowerCtrl(RegLen);
4121   2              IO_AutoPowerCtrlRW(1, RegLen ? 1:0);
4122   2              }
4123   1          else
4124   1                      return -1;
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 68  

4125   1      
4126   1              return 1;
4127   1      
4128   1      } /* End of clicmd_SetAutoPowerControl() */
4129          
4130          /*
4131           * ----------------------------------------------------------------------------
4132           * Function Name: clicmd_SetAutoPowerControlHelp()
4133           * Purpose:
4134           * Params:
4135           * Returns:
4136           * Note:
4137           * ----------------------------------------------------------------------------
4138           */
4139          static S16_T clicmd_SetAutoPowerControlHelp(CONSOLE_Inst *pInst)
4140          {
4141   1          CONSOLE_PutMessage(pInst, "Usage: setapc <Auto power control>\r\n");
4142   1              CONSOLE_PutMessage(pInst, "       <Auto power control> 0: Disable   1: Enable\r\n");
4143   1      
4144   1          return 1;
4145   1      
4146   1      } /* End of clicmd_SetAutoPowerControlHelp() */
4147          
4148          /*
4149           * ----------------------------------------------------------------------------
4150           * Function Name: clicmd_SetBeaconInterval()
4151           * Purpose:
4152           * Params:
4153           * Returns:
4154           * Note:
4155           * ----------------------------------------------------------------------------
4156           */
4157          static S16_T clicmd_SetBeaconInterval(CONSOLE_Inst *pInst)
4158          {
4159   1              U16_T   Value;
4160   1      
4161   1              argc = pInst->Argc;
4162   1              argv = pInst->Argv;
4163   1              if (argc == 0) /* Read current beacon interval */
4164   1              {
4165   2              Value = GCONFIG_GetWifiBcnInterval();
4166   2              CONSOLE_PutMessage(pInst, "Beacon: %u ms\r\n", Value);
4167   2      
4168   2              return 1;
4169   2              }
4170   1              else if (argc != 1) /* Write user's beacon interval */
4171   1              return -1;
4172   1      
4173   1          Value = atoi(argv[0]);
4174   1              if (Value < 20 || Value > 1000)
4175   1                      return -1;
4176   1      
4177   1              GCONFIG_SetWifiBcnInterval(Value);
4178   1              IO_BeaconIntervalRW(1, (U8_T XDATA*)&Value);
4179   1              return 1;
4180   1      
4181   1      } /* End of clicmd_SetBeaconInterval() */
4182          
4183          /*
4184           * ----------------------------------------------------------------------------
4185           * Function Name: clicmd_SetBeaconIntervalHelp()
4186           * Purpose:
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 69  

4187           * Params:
4188           * Returns:
4189           * Note:
4190           * ----------------------------------------------------------------------------
4191           */
4192          static S16_T clicmd_SetBeaconIntervalHelp(CONSOLE_Inst *pInst)
4193          {
4194   1          CONSOLE_PutMessage(pInst, "Usage: setbi <Beacon interval(ms)>\r\n");
4195   1              CONSOLE_PutMessage(pInst, "       <Beacon interval(ms)> 20 ~ 1000\r\n");
4196   1          return 1;
4197   1      
4198   1      } /* End of clicmd_SetBeaconIntervalHelp() */
4199          
4200          /*
4201           * ----------------------------------------------------------------------------
4202           * Function Name: clicmd_GetWifiConfig()
4203           * Purpose:
4204           * Params:
4205           * Returns:
4206           * Note:
4207           * ----------------------------------------------------------------------------
4208           */
4209          static S16_T clicmd_GetWifiConfig(CONSOLE_Inst *pInst)
4210          {
4211   1          argc = pInst->Argc;
4212   1          argv = pInst->Argv;
4213   1      
4214   1              if (pInst->State == CLI_STATE_COMMAND)
4215   1              {
4216   2                  if (argc == 0)
4217   2                      {
4218   3                              CONSOLE_PutMessage(pInst, "Please wait...\r\n");                
4219   3                  CONSOLE_PutMessage(pInst, "Current WiFi Settings\r\n");
4220   3                              pInst->Cmd.Buf[0] = IO_MCPU_WCPU_READY;
4221   3                              pInst->State = CLI_STATE_COMMAND_WAIT;
4222   3                              goto CLICMD_GET_WIFI_CONFIG_NO_OPTION;
4223   3                      }
4224   2                      return -1;
4225   2          }
4226   1              else if (pInst->State == CLI_STATE_COMMAND_WAIT)
4227   1              {
4228   2                      if  (pInst->Cmd.ReplyLen && (pInst->Cmd.Buf[0] + pInst->Cmd.Buf[1]) == 0xFF)
4229   2                      {
4230   3                              switch (pInst->Cmd.Buf[0])
4231   3                              {
4232   4                              case IO_MCPU_WCPU_READY_ACK:                    
4233   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
4234   4                                      pInst->Cmd.Buf[0] = IO_WIFI_DRIVER_VER_READ;
4235   4                                      goto CLICMD_GET_WIFI_CONFIG_NO_OPTION;
4236   4                                      break;
4237   4                                      
4238   4                              case IO_WIFI_DRIVER_VER_READ_RESP:
4239   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
4240   4                                      if (pInst->Cmd.Buf[2] > 29)
4241   4                                              pInst->Cmd.Buf[2] = 29;
4242   4                                      pInst->Cmd.Buf[3+pInst->Cmd.Buf[2]] = '\0';                                     
4243   4                                      CONSOLE_PutMessage(pInst, "* WCPU F/W version: %s\r\n",&(pInst->Cmd.Buf[3]));
4244   4                                              
4245   4                                      pInst->Cmd.Buf[0] = IO_WIFI_MAC_ADDR_SET;
4246   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;
4247   4                                      break;
4248   4                                      
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 70  

4249   4                              case IO_WIFI_MAC_ADDR_SET_RESP:
4250   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
4251   4                                      CONSOLE_PutMessage(pInst, "* WiFi MAC address: 0x%02bx%02bx%02bx%02bx%02bx%02bx\r\n"
4252   4                                                                                              ,pInst->Cmd.Buf[4]
4253   4                                                                                              ,pInst->Cmd.Buf[5]
4254   4                                                                                              ,pInst->Cmd.Buf[6]
4255   4                                                                                              ,pInst->Cmd.Buf[7]
4256   4                                                                                              ,pInst->Cmd.Buf[8]
4257   4                                                                                              ,pInst->Cmd.Buf[9]);
4258   4                                              
4259   4                                      pInst->Cmd.Buf[0] = IO_OPERATE_MODE;
4260   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;
4261   4                                      break;
4262   4                              
4263   4                              case IO_OPERATE_MODE_RESP:
4264   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
4265   4                                      
4266   4                                      CONSOLE_PutMessage(pInst, "* Baseband|%bu: ",pInst->Cmd.Buf[4]);
4267   4                                      if (pInst->Cmd.Buf[4] == 1)
4268   4                                              CONSOLE_PutMessage(pInst, "802.11b/g mode\r\n");
4269   4                                      else if (pInst->Cmd.Buf[4] == 4)
4270   4                                              CONSOLE_PutMessage(pInst, "802.11a mode\r\n");
4271   4                                      else if (pInst->Cmd.Buf[4] == 5)
4272   4                                              CONSOLE_PutMessage(pInst, "802.11a/b/g mode\r\n");                                      
4273   4                                      else
4274   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
4275   4                                              
4276   4                                      pInst->Cmd.Buf[0] = IO_NETWORK_MODE;
4277   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;
4278   4                                      break;
4279   4                                      
4280   4                              case IO_NETWORK_MODE_RESP:
4281   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4282   4                                      
4283   4                                      CONSOLE_PutMessage(pInst, "* Network|%bu: ",pInst->Cmd.Buf[4]);
4284   4                                      if (pInst->Cmd.Buf[4] == 2)
4285   4                                              CONSOLE_PutMessage(pInst, "Ad-hoc\r\n");
4286   4                                      else if (pInst->Cmd.Buf[4] == 3)
4287   4                                              CONSOLE_PutMessage(pInst, "infrastructure\r\n");
4288   4                                      else
4289   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
4290   4                                                              
4291   4                                      pInst->Cmd.Buf[0] = IO_CHANNEL;
4292   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;
4293   4                                      break;
4294   4                                      
4295   4                              case IO_CHANNEL_RESP:
4296   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4297   4                                      
4298   4                                      CONSOLE_PutMessage(pInst, "* Channel: %bu\r\n",pInst->Cmd.Buf[4]);
4299   4                                              
4300   4                                      pInst->Cmd.Buf[0] = IO_SSID_READ;
4301   4                                      goto CLICMD_GET_WIFI_CONFIG_NO_OPTION;
4302   4                                      break;
4303   4                                      
4304   4                              case IO_SSID_READ_RESP:
4305   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4306   4                                      
4307   4                                      CONSOLE_PutMessage(pInst, "* SSID: ");
4308   4                                      if (pInst->Cmd.Buf[2] > 32)
4309   4                                              CONSOLE_PutMessage(pInst, "\r\nLength error\r\n");
4310   4                                      pInst->Cmd.Buf[3+pInst->Cmd.Buf[2]] = '\0';
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 71  

4311   4                                      CONSOLE_PutMessage(pInst, "%s\r\n", (U8_T *)&(pInst->Cmd.Buf[3]));
4312   4                                                                      
4313   4                                      pInst->Cmd.Buf[0] = IO_ENCRYPTION_TYPE;
4314   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;                    
4315   4                                      break;
4316   4                                      
4317   4                              case IO_ENCRYPTION_TYPE_RESP:
4318   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4319   4                                      
4320   4                                      CONSOLE_PutMessage(pInst, "* Security|%bu: ",pInst->Cmd.Buf[4]);
4321   4                                      if (pInst->Cmd.Buf[4] == 0)
4322   4                                              CONSOLE_PutMessage(pInst, "no security\r\n");
4323   4                                      else if (pInst->Cmd.Buf[4] == 1)
4324   4                                              CONSOLE_PutMessage(pInst, "WEP64 bits\r\n");
4325   4                                      else if (pInst->Cmd.Buf[4] == 5)
4326   4                                              CONSOLE_PutMessage(pInst, "WEP128 bits\r\n");
4327   4                                      else if (pInst->Cmd.Buf[4] == 2)
4328   4                                              CONSOLE_PutMessage(pInst, "TKIP\r\n");
4329   4                                      else if (pInst->Cmd.Buf[4] == 4)
4330   4                                              CONSOLE_PutMessage(pInst, "AES\r\n");
4331   4                                      else
4332   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
4333   4                                                                      
4334   4                                      pInst->Cmd.Buf[0] = IO_WEP_KEY_INDEX;
4335   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;                    
4336   4                                      break;
4337   4                                      
4338   4                              case IO_WEP_KEY_INDEX_RESP:
4339   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4340   4                                      
4341   4                                      CONSOLE_PutMessage(pInst, "* WEP Key Index: %bu\r\n", pInst->Cmd.Buf[4]);
4342   4                                      pInst->CmdId = 0;                               
4343   4                                      pInst->Cmd.Buf[0] = IO_WEP64_KEY_READ;
4344   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_INDEX_READ;                              
4345   4                                      break;
4346   4                                      
4347   4                              case IO_WEP64_KEY_READ_RESP:
4348   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4349   4                                      
4350   4                                      CONSOLE_PutMessage(pInst, "* WEP64 bits key index %bu: ", pInst->CmdId);
4351   4                                      for (StrLen = 0; StrLen < 5; StrLen ++)
4352   4                                      {
4353   5                                              CONSOLE_PutMessage(pInst, "%02bx", pInst->Cmd.Buf[3+StrLen]);
4354   5                                      }
4355   4                                      CONSOLE_PutMessage(pInst, "\r\n");
4356   4      
4357   4                                      if (pInst->CmdId < 3)
4358   4                                      {
4359   5                                              pInst->CmdId ++;
4360   5                                              pInst->Cmd.Buf[0] = IO_WEP64_KEY_READ;
4361   5                                      }
4362   4                                      else
4363   4                                      {
4364   5                                              pInst->CmdId = 0;
4365   5                                              pInst->Cmd.Buf[0] = IO_WEP128_KEY_READ;
4366   5                                      }
4367   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_INDEX_READ;
4368   4                                      break;
4369   4                                      
4370   4                              case IO_WEP128_KEY_READ_RESP:
4371   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4372   4                                      
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 72  

4373   4                                      CONSOLE_PutMessage(pInst, "* WEP128 bits key index %bu: ", pInst->CmdId);
4374   4                                      for (StrLen = 0; StrLen < 13; StrLen ++)
4375   4                                      {
4376   5                                              CONSOLE_PutMessage(pInst, "%02bx", pInst->Cmd.Buf[3+StrLen]);
4377   5                                      }
4378   4                                      CONSOLE_PutMessage(pInst, "\r\n");
4379   4      
4380   4                                      if (pInst->CmdId < 3)
4381   4                                      {
4382   5                                              pInst->CmdId ++;
4383   5                                              pInst->Cmd.Buf[0] = IO_WEP128_KEY_READ;
4384   5                                              goto CLICMD_GET_WIFI_CONFIG_BY_INDEX_READ;                                      
4385   5                                      }
4386   4                                      else
4387   4                                      {
4388   5                                              pInst->CmdId = 0;
4389   5                                              pInst->Cmd.Buf[0] = IO_TKIP_AES_PASSPHASE_STRING_READ;
4390   5                                              goto CLICMD_GET_WIFI_CONFIG_NO_OPTION;
4391   5                                      }                                                               
4392   4                                      break;
4393   4                                      
4394   4                              case IO_TKIP_AES_PASSPHASE_STRING_READ_RESP:
4395   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4396   4                                      
4397   4                                      CONSOLE_PutMessage(pInst, "* AES/TKIP Passphrase: ");
4398   4                                      for (StrLen = 0; StrLen < pInst->Cmd.Buf[2]; StrLen ++)
4399   4                                      {
4400   5                                              CONSOLE_PutMessage(pInst, "%c", pInst->Cmd.Buf[3+StrLen]);
4401   5                                      }
4402   4                                      CONSOLE_PutMessage(pInst, "\r\n");
4403   4                                                                      
4404   4                                      pInst->Cmd.Buf[0] = IO_TX_DATA_RATE;
4405   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;                                                    
4406   4                                      break;
4407   4                                      
4408   4                              case IO_TX_DATA_RATE_RESP:
4409   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4410   4                                      
4411   4                                      CONSOLE_PutMessage(pInst, "* Tx Rate|%bu: ",pInst->Cmd.Buf[4]);
4412   4                                      if (pInst->Cmd.Buf[4] == 0x00)
4413   4                                              CONSOLE_PutMessage(pInst, "Auto\r\n");
4414   4                                      else if (pInst->Cmd.Buf[4] == 0x02)
4415   4                                              CONSOLE_PutMessage(pInst, "1 Mbps\r\n");
4416   4                                      else if (pInst->Cmd.Buf[4] == 0x04)
4417   4                                              CONSOLE_PutMessage(pInst, "2 Mbps\r\n");
4418   4                                      else if (pInst->Cmd.Buf[4] == 0x0B)
4419   4                                              CONSOLE_PutMessage(pInst, "5.5 Mbps\r\n");
4420   4                                      else if (pInst->Cmd.Buf[4] == 0x0C)
4421   4                                              CONSOLE_PutMessage(pInst, "6 Mbps\r\n");
4422   4                                      else if (pInst->Cmd.Buf[4] == 0x12)
4423   4                                              CONSOLE_PutMessage(pInst, "9 Mbps\r\n");
4424   4                                      else if (pInst->Cmd.Buf[4] == 0x16)
4425   4                                              CONSOLE_PutMessage(pInst, "11 Mbps\r\n");
4426   4                                      else if (pInst->Cmd.Buf[4] == 0x18)
4427   4                                              CONSOLE_PutMessage(pInst, "12 Mbps\r\n");
4428   4                                      else if (pInst->Cmd.Buf[4] == 0x24)
4429   4                                              CONSOLE_PutMessage(pInst, "18 Mbps\r\n");
4430   4                                      else if (pInst->Cmd.Buf[4] == 0x30)
4431   4                                              CONSOLE_PutMessage(pInst, "24 Mbps\r\n");
4432   4                                      else if (pInst->Cmd.Buf[4] == 0x48)
4433   4                                              CONSOLE_PutMessage(pInst, "36 Mbps\r\n");
4434   4                                      else if (pInst->Cmd.Buf[4] == 0x60)
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 73  

4435   4                                              CONSOLE_PutMessage(pInst, "48 Mbps\r\n");
4436   4                                      else if (pInst->Cmd.Buf[4] == 0x6C)
4437   4                                              CONSOLE_PutMessage(pInst, "54 Mbps\r\n");                                                                                                                                                                                                                                                                                                                                                                       
4438   4                                      else
4439   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
4440   4                                                                      
4441   4                                      pInst->Cmd.Buf[0] = IO_TX_DEFAULT_POWER_LEVEL;
4442   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;                            
4443   4                                      break;
4444   4                                      
4445   4                              case IO_TX_DEFAULT_POWER_LEVEL_RESP:
4446   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4447   4                                      
4448   4                                      CONSOLE_PutMessage(pInst, "* Transmission Power Level|%bu: ",pInst->Cmd.Buf[4]);
4449   4                                      if (pInst->Cmd.Buf[4] == 0)
4450   4                                              CONSOLE_PutMessage(pInst, "100%%\r\n");
4451   4                                      else if (pInst->Cmd.Buf[4] == 1)
4452   4                                              CONSOLE_PutMessage(pInst, "50%%\r\n");
4453   4                                      else if (pInst->Cmd.Buf[4] == 2)
4454   4                                              CONSOLE_PutMessage(pInst, "25%%\r\n");
4455   4                                      else if (pInst->Cmd.Buf[4] == 3)
4456   4                                              CONSOLE_PutMessage(pInst, "12.5%%\r\n");
4457   4                                      else if (pInst->Cmd.Buf[4] == 4)
4458   4                                              CONSOLE_PutMessage(pInst, "6.25%%\r\n");
4459   4                                      else
4460   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
4461   4                                                                      
4462   4                                      pInst->Cmd.Buf[0] = IO_PREAMBLE;
4463   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;                                    
4464   4                                      break;
4465   4                                      
4466   4                              case IO_PREAMBLE_RESP:
4467   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4468   4                                      
4469   4                                      CONSOLE_PutMessage(pInst, "* Preamble Mode|%bu: ",pInst->Cmd.Buf[4]);
4470   4                                      if (pInst->Cmd.Buf[4] == 0)
4471   4                                              CONSOLE_PutMessage(pInst, "long\r\n");
4472   4                                      else if (pInst->Cmd.Buf[4] == 0x20)
4473   4                                              CONSOLE_PutMessage(pInst, "auto\r\n");
4474   4                                      else
4475   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
4476   4                                                                      
4477   4                                      pInst->Cmd.Buf[0] = IO_BEACON_INTERVAL_READ;
4478   4                                      goto CLICMD_GET_WIFI_CONFIG_NO_OPTION;                                  
4479   4                                      break;
4480   4                                      
4481   4                              case IO_BEACON_INTERVAL_READ_RESP:
4482   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4483   4                                      
4484   4                                      CONSOLE_PutMessage(pInst, "* Beacon Interval: %u ms\r\n", *((U16_T*)&(pInst->Cmd.Buf[3])));
4485   4                                                                      
4486   4                                      pInst->Cmd.Buf[0] = IO_RTS_THRESHOLD_READ;
4487   4                                      goto CLICMD_GET_WIFI_CONFIG_NO_OPTION;                                  
4488   4                                      break;
4489   4                                      
4490   4                              case IO_RTS_THRESHOLD_READ_RESP:
4491   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4492   4                                      
4493   4                                      CONSOLE_PutMessage(pInst, "* RTS Threshold: %u\r\n", *((U16_T*)&(pInst->Cmd.Buf[3])));
4494   4                                                                      
4495   4                                      pInst->Cmd.Buf[0] = IO_OPEN_SYSTEM;
4496   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;                                    
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 74  

4497   4                                      break;
4498   4      
4499   4                              case IO_OPEN_SYSTEM_RESP:
4500   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4501   4                                      
4502   4                                      CONSOLE_PutMessage(pInst, "* Authentication type|%bu: ",pInst->Cmd.Buf[4]);
4503   4                                      if (pInst->Cmd.Buf[4] == 0)
4504   4                                              CONSOLE_PutMessage(pInst, "open system\r\n");
4505   4                                      else if (pInst->Cmd.Buf[4] == 1)
4506   4                                              CONSOLE_PutMessage(pInst, "share key\r\n");
4507   4                                      else if (pInst->Cmd.Buf[4] == 2)
4508   4                                              CONSOLE_PutMessage(pInst, "WPA1_WPA2 only\r\n");
4509   4                                      else if (pInst->Cmd.Buf[4] == 3)
4510   4                                              CONSOLE_PutMessage(pInst, "WPA1_WPA2 mixed\r\n");
4511   4                                      else
4512   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
4513   4                                                                      
4514   4                                      pInst->Cmd.Buf[0] = IO_AUTO_POWER_CONTROL;
4515   4                                      goto CLICMD_GET_WIFI_CONFIG_BY_READ;                                    
4516   4                                      break;
4517   4                                      
4518   4                              case IO_AUTO_POWER_CONTROL_RESP:
4519   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));                   
4520   4                                      
4521   4                                      CONSOLE_PutMessage(pInst, "* Auto Power Control|%bu: ",pInst->Cmd.Buf[4]);
4522   4                                      if (pInst->Cmd.Buf[4] == 0)
4523   4                                              CONSOLE_PutMessage(pInst, "disable\r\n");
4524   4                                      else if (pInst->Cmd.Buf[4] == 1)
4525   4                                              CONSOLE_PutMessage(pInst, "enable\r\n");
4526   4                                      else
4527   4                                              CONSOLE_PutMessage(pInst, "Unsupport\r\n");
4528   4                                                              
4529   4                                      MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
4530   4                                      pInst->State = CLI_STATE_COMMAND;
4531   4                                      break;
4532   4                                      
4533   4                              default:
4534   4                                      pInst->Cmd.ReplyLen     = 0;
4535   4                                      break;
4536   4                              }
4537   3                              return 1;
4538   3                      }
4539   2                      else if (pInst->Cmd.WaitTime == 0)
4540   2                      {
4541   3                              CONSOLE_PutMessage(pInst, "Command Time out\r\n");              
4542   3                              MWIFAPP_TaskCmdDeQueue((MWIFAPP_LINK*)&(pInst->Cmd));
4543   3                              pInst->State = CLI_STATE_COMMAND;
4544   3                              return -1;              
4545   3                      }
4546   2                      else
4547   2                              pInst->Cmd.ReplyLen = 0;        
4548   2              }
4549   1              return 1;
4550   1              
4551   1      CLICMD_GET_WIFI_CONFIG_NO_OPTION:
4552   1              pInst->Cmd.Buf[1] = ~(pInst->Cmd.Buf[0]);
4553   1              pInst->Cmd.Buf[2] = 0;
4554   1              MWIFAPP_TaskCmdEnQueue((MWIFAPP_LINK*)&(pInst->Cmd));
4555   1              return 1;
4556   1      CLICMD_GET_WIFI_CONFIG_BY_READ:
4557   1              pInst->Cmd.Buf[1] = ~(pInst->Cmd.Buf[0]);
4558   1              pInst->Cmd.Buf[2] = 1;
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 75  

4559   1              pInst->Cmd.Buf[3] = 0;  
4560   1              MWIFAPP_TaskCmdEnQueue((MWIFAPP_LINK*)&(pInst->Cmd));
4561   1              return 1;
4562   1      CLICMD_GET_WIFI_CONFIG_BY_INDEX_READ:
4563   1              pInst->Cmd.Buf[1] = ~(pInst->Cmd.Buf[0]);
4564   1              pInst->Cmd.Buf[2] = 1;
4565   1              pInst->Cmd.Buf[3] = pInst->CmdId;       
4566   1              MWIFAPP_TaskCmdEnQueue((MWIFAPP_LINK*)&(pInst->Cmd));
4567   1              return 1;       
4568   1      } /* End of clicmd_GetWifiConfig() */
4569          
4570          /*
4571           * ----------------------------------------------------------------------------
4572           * Function Name: clicmd_GetWifiConfigHelp()
4573           * Purpose:
4574           * Params:
4575           * Returns:
4576           * Note:
4577           * ----------------------------------------------------------------------------
4578           */
4579          static S16_T clicmd_GetWifiConfigHelp(CONSOLE_Inst *pInst)
4580          {
4581   1          CONSOLE_PutMessage(pInst, "Usage: wificonfig\r\n");
4582   1      
4583   1          return 1;
4584   1      } /* End of clicmd_GetWifiConfigHelp() */
4585          #endif
4586          
4587          /*
4588           * ----------------------------------------------------------------------------
4589           * Function Name: clicmd_SetDhcpServer()
4590           * Purpose:
4591           * Params:
4592           * Returns:
4593           * Note:
4594           * ----------------------------------------------------------------------------
4595           */
4596          static S16_T clicmd_SetDhcpServer(CONSOLE_Inst *pInst)
4597          {
4598   1          U32_T addr, *pAddr;
4599   1      
4600   1          argc = pInst->Argc;
4601   1          argv = pInst->Argv;
4602   1          if (argc == 0) /* current setting */
4603   1          {
4604   2              addr = GCONFIG_GetDhcpSrvStartIp();
4605   2              CONSOLE_PutMessage(pInst, "Start IP address: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
4606   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
4607   2              addr = GCONFIG_GetDhcpSrvEndIp();
4608   2              CONSOLE_PutMessage(pInst, "End IP address: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
4609   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
4610   2              addr = GCONFIG_GetDhcpSrvNetmask();
4611   2              CONSOLE_PutMessage(pInst, "Netmask: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
4612   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
4613   2              addr = GCONFIG_GetDhcpSrvDefGateway();
4614   2              CONSOLE_PutMessage(pInst, "Gateway: %bu.%bu.%bu.%bu\r\n", (U8_T)((addr>>24)&0x000000FF),
4615   2                                 (U8_T)((addr>>16)&0x000000FF), (U8_T)((addr>>8)&0x000000FF), (U8_T)(addr&0x0000
             -00FF));
4616   2              return 1;
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 76  

4617   2          }
4618   1          else if (argc != 4)
4619   1              return -1;
4620   1      
4621   1          /* Check data validation */
4622   1          pAddr = (U32_T)StrBuf;
4623   1          if (clicmd_GetIp2Ulong(argv[0], strlen(argv[0]), &addr) < 0 || !clicmd_ValidIp(addr))
4624   1              return -1;
4625   1          pAddr[0] = addr;
4626   1      
4627   1          if (clicmd_GetIp2Ulong(argv[1], strlen(argv[1]), &addr) < 0 || !clicmd_ValidIp(addr))
4628   1              return -1;
4629   1          pAddr[1] = addr;
4630   1      
4631   1          if (clicmd_GetIp2Ulong(argv[2], strlen(argv[2]), &addr) < 0)
4632   1              return -1;
4633   1          pAddr[2] = addr;
4634   1      
4635   1          if (clicmd_GetIp2Ulong(argv[3], strlen(argv[3]), &addr) < 0 || !clicmd_ValidIp(addr))
4636   1              return -1;
4637   1          pAddr[3] = addr;
4638   1      
4639   1          GCONFIG_SetDhcpSrvStartIp(pAddr[0]);
4640   1          GCONFIG_SetDhcpSrvEndIp(pAddr[1]);
4641   1          GCONFIG_SetDhcpSrvNetmask(pAddr[2]);
4642   1          GCONFIG_SetDhcpSrvDefGateway(pAddr[3]);
4643   1      
4644   1          return 1;
4645   1      } /* End of clicmd_SetDhcpServer() */
4646          
4647          /*
4648           * ----------------------------------------------------------------------------
4649           * Function Name: clicmd_SetDhcpServerHelp()
4650           * Purpose:
4651           * Params:
4652           * Returns:
4653           * Note:
4654           * ----------------------------------------------------------------------------
4655           */
4656          static S16_T clicmd_SetDhcpServerHelp(CONSOLE_Inst *pInst)
4657          {
4658   1          CONSOLE_PutMessage(pInst, "Usage: dhcpsrv <start addr> <end addr> <netmask> <gateway>\r\n");
4659   1          return 1;
4660   1      } /* End of clicmd_SetDhcpServerHelp() */
4661          
4662          /*
4663           * ----------------------------------------------------------------------------
4664           * Function Name: clicmd_EnableDhcpServer()
4665           * Purpose:
4666           * Params:
4667           * Returns:
4668           * Note:
4669           * ----------------------------------------------------------------------------
4670           */
4671          static S16_T clicmd_EnableDhcpServer(CONSOLE_Inst *pInst)
4672          {
4673   1          U8_T temp8, *argP;
4674   1      
4675   1          argc = pInst->Argc;
4676   1          argv = pInst->Argv;
4677   1      
4678   1          if (argc == 0) /* current setting */
C51 COMPILER V9.01   CLICMD                                                                08/29/2011 15:27:57 PAGE 77  

4679   1          {
4680   2              temp8 = GCONFIG_GetDhcpSrvStatus();
4681   2              if (temp8)
4682   2                  CONSOLE_PutMessage(pInst, "DHCP Server: enable\r\n");
4683   2              else
4684   2                  CONSOLE_PutMessage(pInst, "DHCP Server: disable\r\n");
4685   2              return 1;
4686   2          }
4687   1          else if (argc > 1)
4688   1              return -1;
4689   1          
4690   1          argP = argv[0];
4691   1          if ((strlen(argP) == 1) && IsDigit(*argP))
4692   1              temp8 = *argP - 0x30;
4693   1          else
4694   1              return -1;
4695   1           
4696   1          if (temp8 > 1)
4697   1              return -1;
4698   1      
4699   1          GCONFIG_SetDhcpSrvStatus(temp8);
4700   1      
4701   1          return 1;
4702   1      
4703   1      } /* End of clicmd_EnableDhcpServer() */
4704          
4705          /*
4706           * ----------------------------------------------------------------------------
4707           * Function Name: clicmd_EnableDhcpServerHelp()
4708           * Purpose:
4709           * Params:
4710           * Returns:
4711           * Note:
4712           * ----------------------------------------------------------------------------
4713           */
4714          static S16_T clicmd_EnableDhcpServerHelp(CONSOLE_Inst *pInst)
4715          {
4716   1          CONSOLE_PutMessage(pInst, "Usage: setdhcpsrv <status>\r\n");
4717   1          CONSOLE_PutMessage(pInst, "       <status>: 0: disable     1: enable\r\n");
4718   1      
4719   1          return 1;
4720   1      
4721   1      } /* End of clicmd_EnableDhcpServerHelp() */
4722          
4723          /* End of clicmd.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  35495    ----
   CONSTANT SIZE    =   8164    ----
   XDATA SIZE       =      5     445
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =    162    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   1674    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
