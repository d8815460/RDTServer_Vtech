C51 COMPILER V9.01   MPSAVE                                                                03/08/2012 11:00:55 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MPSAVE
OBJECT MODULE PLACED IN .\mpsave.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\src\mwif\mpsave.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X8020) INCDIR(.
                    -.\src\main;..\src\mcpu;..\src\mswdma;..\src\uart0;..\src\mmstimer;..\src\mwif;..\src\madapter;..\src\mtcpip;..\src\mping
                    -;..\src\mpppoe;..\src\si2c;..\src\mdnsc;..\src\mconsole;..\src\mtelnet;..\src\meeprom;..\src\mmac;..\src\mdhcpc;..\src\m
                    -http;..\src\mgs2wifi;..\src\mhsuart;..\src\msmtpc;..\src\web_page;..\src\mdhcps;..\src\mdebug) DEFINE(RuntimeCodeAt32KH)
                    - VARBANKING DEBUG PRINT(.\mpsave.lst) OBJECT(.\mpsave.obj)

line level    source

   1          /*
   2           ******************************************************************************
   3           *     Copyright (c) 2010       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           ******************************************************************************
  10           */
  11          /*=============================================================================
  12           * Module Name: mpsave.c
  13           * Purpose: MCPU Power Saving module
  14           * Author:
  15           * Date:
  16           * Notes:
  17           * $Log: mpsave.c,v $
  18           * no message
  19           *
  20           *=============================================================================
  21           */
  22          
  23          /* INCLUDE FILE DECLARATIONS */
  24          #include "mpsave.h"
  25          #include "ax22000.h"
  26          #include "mwif.h"
  27          #include "uart0.h"
  28          #include "mcpu.h"
  29          #include "stoe.h"
  30          #include "delay.h"
  31          #include "mstimer.h"
  32          #include "interrupt.h"
  33          #include "ping.h"
  34          #include "printd.h"
  35          
  36          #if (POWER_SAVING && (MAC_ARBIT_MODE & MAC_ARBIT_WIFI))
  37          
  38          /* STATIC VARIABLE DECLARATIONS */
  39          
  40          /* GLOBAL VARIABLE DECLARATIONS */
  41          U8_T PS_State;
  42          U8_T PS_WaitToDisableFlag = 0;
  43          U8_T PS_StopDeepSleepTest = 0;
  44          U16_T PS_DeepSleepTestCounter = 0;
  45          U8_T PS_PingCounter = 0xFF;
  46          U8_T PS_Mode = 0; /* 0:disable, 1:fast 2:maximum */
  47          U16_T PS_SleepTime = 100; /* 100ms, for turn off 32K clock in normal/pmm mode */
  48          U16_T PS_SleepTimeOut = 0;
  49          
  50          
  51          /* STATIC VARIABLE DECLARATIONS */
C51 COMPILER V9.01   MPSAVE                                                                03/08/2012 11:00:55 PAGE 2   

  52          U16_T ps_WaitDeepSleepTimer;
  53          
  54          /* LOCAL SUBPROGRAM DECLARATIONS */
  55          
  56          
  57          /* GLOBAL SUBPROGRAM BODIES */
  58          /*
  59           * ----------------------------------------------------------------------------
  60           * Function Name: PS_Init
  61           * Purpose: To initiate MCPU Power Saving module
  62           * Params: none
  63           * Returns: none
  64           * Note: none
  65           * ----------------------------------------------------------------------------
  66           */
  67          void PS_Init(void)
  68          {
  69   1              PS_State = PS_STATE_DISABLE;
  70   1      
  71   1              OCGCR = PS_OFF_40M_AT_STOP_MODE;
  72   1      
  73   1      } /* End of PS_Init() */
  74          
  75          /*
  76           * ----------------------------------------------------------------------------
  77           * Function Name: PS_Start
  78           * Purpose:
  79           * Params:
  80           * Returns: none
  81           * Note: none
  82           * ----------------------------------------------------------------------------
  83           */
  84          void PS_Start(void)
  85          {
  86   1              CCTRL |= PS_INTR_MASK_DEFAULT;
  87   1              WKUPSR = BIT2;
  88   1      
  89   1              EXTINT6(ON);
  90   1      
  91   1      }       /* End of PS_Start() */
  92          
  93          /*
  94           * ----------------------------------------------------------------------------
  95           * Function Name: PS_Intr
  96           * Purpose:
  97           * Params:
  98           * Returns: none
  99           * Note: none
 100           * ----------------------------------------------------------------------------
 101           */
 102          void PS_Intr(U8_T flag)
 103          {
 104   1              U8_T    tmp;
 105   1      
 106   1              if (flag == PS_WCPU_CMD_WRITE)
 107   1              {
 108   2                      /* check the data register */
 109   2                      tmp = MPCDR;
 110   2                      switch (tmp)
 111   2                      {
 112   3                      case PS_DEEP_SLEEP_ACK_CMD:
 113   3                              PS_State = PS_STATE_DEEP_SLEEP_READY;
C51 COMPILER V9.01   MPSAVE                                                                03/08/2012 11:00:55 PAGE 3   

 114   3                              break;
 115   3                      case PS_EXIT_DEEP_SLEEP_ACK_CMD:
 116   3                              if (PS_StopDeepSleepTest == 1)
 117   3                              {
 118   4                                      PS_State = PS_STATE_DISABLE;
 119   4                                      PS_StopDeepSleepTest = 0;
 120   4                                      OCGCR = 0x81;
 121   4                              }
 122   3                              else
 123   3                              {
 124   4                                      PS_State = PS_STATE_WAIT_TO_NEXT_DEEP_SLEEP;
 125   4                                      ps_WaitDeepSleepTimer = (U16_T)SWTIMER_Tick();
 126   4                                      PS_DeepSleepTestCounter++;
 127   4                              }
 128   3                              break;
 129   3                      case PS_UNKNOW_CMD:
 130   3                              break;
 131   3                      default:
 132   3                              break;
 133   3                      }
 134   2              }
 135   1      
 136   1      }       /* End of PS_Intr() */
 137          
 138          /*
 139           * ----------------------------------------------------------------------------
 140           * Function Name: PS_NoticeWcpu
 141           * Purpose:
 142           * Params:
 143           * Returns: 0: success
 144           *                      1: fail
 145           * Note: none
 146           * ----------------------------------------------------------------------------
 147           */
 148          void PS_NoticeWcpu(U8_T cmd)
 149          {
 150   1              U8_T    tmp = 0;
 151   1      
 152   1              MPCDR = cmd;
 153   1      
 154   1              while (!(tmp & PS_WCPU_CMD_READ_POLL))
 155   1                      tmp = MPCCR;
 156   1      
 157   1              return;
 158   1      
 159   1      } /* End of PS_NoticeWcpu() */
 160          
 161          /*
 162           * ----------------------------------------------------------------------------
 163           * Function Name: PS_CheckState
 164           * Purpose:
 165           * Params:
 166           * Returns: none
 167           * Note: none
 168           * ----------------------------------------------------------------------------
 169           */
 170          void PS_CheckState(void)
 171          {
 172   1              U16_T   tmptimer;
 173   1              U8_T    printFlag = 0;
 174   1              U8_T    isr;
 175   1      
C51 COMPILER V9.01   MPSAVE                                                                03/08/2012 11:00:55 PAGE 4   

 176   1              isr = EA;
 177   1              EA = 0;
 178   1              switch (PS_State)
 179   1              {
 180   2              case PS_STATE_WAIT_TO_NEXT_DEEP_SLEEP:
 181   2                      if (PS_PingCounter != 0xFF)
 182   2                              PS_PingCounter = 0;
 183   2                      PS_State = PS_STATE_WAIT_TO_DEEP_SLEEP;
 184   2                      EA = isr;
 185   2                      printd ("Had completed %d timers deep sleep test.\n\r", PS_DeepSleepTestCounter);
 186   2                      break;
 187   2              case PS_STATE_WAIT_TO_DEEP_SLEEP:
 188   2                      tmptimer = (U16_T)SWTIMER_Tick();
 189   2                      if (!(STOE_ConnectState & STOE_WIRELESS_LINK))
 190   2                      {
 191   3                              EA = isr;
 192   3                              break;
 193   3                      }
 194   2                      if ((tmptimer - ps_WaitDeepSleepTimer) >= 300) /* 15 second */
 195   2                      {
 196   3                              MAC_WakeupEnable(MAC_EXTERNAL_PIN_WAKEUP);
 197   3                              EXTINT6(ON);
 198   3                              if ((PS_PingCounter != 0xFF) && (PS_PingCounter == 0))
 199   3                              {
 200   4                                      PS_State = 0xFF; /* for debug */
 201   4                                      EA = isr;
 202   4                                      PingFlag = 0; /*stop ping*/
 203   4                                      printd ("Do not receive ping response packet.\n\r");
 204   4                                      break;
 205   4                              }
 206   3                              PS_State = PS_STATE_DEEP_SLEEP_REQ;
 207   3                              PS_NoticeWcpu(PS_DEEP_SLEEP_CMD);
 208   3                              PS_State = PS_STATE_WAIT_DEEP_SLEEP_ACK;
 209   3                      }
 210   2      
 211   2                      EA = isr;
 212   2                      break;
 213   2              case PS_STATE_DEEP_SLEEP_READY:
 214   2                      PS_State = PS_STATE_IN_DEEP_SLEEP;
 215   2                      EA = isr;
 216   2                      MAC_PowerSavingSleep();
 217   2                      break;
 218   2              case PS_STATE_EXIT_DEEP_SLEEP_REQ:
 219   2                      PS_State = PS_STATE_WAIT_EXIT_DEEP_SLEEP_ACK;
 220   2                      PS_NoticeWcpu(PS_EXIT_DEEP_SLEEP_CMD);
 221   2                      EA = isr;
 222   2                      break;
 223   2              default:
 224   2                      EA = isr;
 225   2                      break;          
 226   2              }
 227   1      
 228   1      } /* End of PS_CheckState() */
 229          
 230          #endif /* End of #if (POWER_SAVING && (MAC_ARBIT_MODE & MAC_ARBIT_WIFI)) */
 231          
 232          /* End of mpsave.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    364    ----
   CONSTANT SIZE    =     82    ----
C51 COMPILER V9.01   MPSAVE                                                                03/08/2012 11:00:55 PAGE 5   

   XDATA SIZE       =     13       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
