C51 COMPILER V9.01   HTTPDAPI                                                              03/08/2012 11:01:04 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE HTTPDAPI
OBJECT MODULE PLACED IN .\httpdapi.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\src\mhttp\httpdapi.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X8020) INCDI
                    -R(..\src\main;..\src\mcpu;..\src\mswdma;..\src\uart0;..\src\mmstimer;..\src\mwif;..\src\madapter;..\src\mtcpip;..\src\mp
                    -ing;..\src\mpppoe;..\src\si2c;..\src\mdnsc;..\src\mconsole;..\src\mtelnet;..\src\meeprom;..\src\mmac;..\src\mdhcpc;..\sr
                    -c\mhttp;..\src\mgs2wifi;..\src\mhsuart;..\src\msmtpc;..\src\web_page;..\src\mdhcps;..\src\mdebug) DEFINE(RuntimeCodeAt32
                    -KH) VARBANKING DEBUG PRINT(.\httpdapi.lst) OBJECT(.\httpdapi.obj)

line level    source

   1          /*
   2           ******************************************************************************
   3           *     Copyright (c) 2010       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           ******************************************************************************
  10           */
  11           /*============================================================================
  12           * Module Name: httpapi.c
  13           * Purpose:
  14           * Author:
  15           * Date:
  16           * Notes:
  17           * $Log: httpapi.c,v $
  18           * no message
  19           *
  20           *=============================================================================
  21           */
  22          
  23          /* INCLUDE FILE DECLARATIONS */
  24          #include "httpdapi.h"
  25          #include <stdarg.h>
  26          #include <stdio.h>
  27          #include <string.h>
  28          #include <ctype.h>
  29          
  30          #include "tcpip.h"
  31          #include "filesys.h"
  32          
  33          /* NAMING CONSTANT DECLARATIONS */
  34          
  35          /* GLOBAL VARIABLES DECLARATIONS */
  36          
  37          /* LOCAL VARIABLES DECLARATIONS */
  38          
  39          /* LOCAL SUBPROGRAM DECLARATIONS */
  40          static U8_T httpapi_StrCpyReturnLen(U8_T **pDst, U8_T *pSur);
  41          static U8_T httpapi_BuildContentTypeHeader(U8_T **pDst, U8_T opt);
  42          
  43          /*
  44           * ----------------------------------------------------------------------------
  45           * Function Name: httpapi_StrCpyReturnLen()
  46           * Purpose:
  47           * Params:
  48           * Returns:
  49           * Note:
  50           * ----------------------------------------------------------------------------
  51           */
C51 COMPILER V9.01   HTTPDAPI                                                              03/08/2012 11:01:04 PAGE 2   

  52          U8_T httpapi_StrCpyReturnLen(U8_T **pDst, U8_T *pSur)
  53          {
  54   1              U8_T len;
  55   1              
  56   1              for (len=0; pSur[len] != '\0'; len++)
  57   1              {
  58   2                      (*pDst)[len] = pSur[len];
  59   2              }
  60   1              (*pDst) += len;
  61   1              return len;
  62   1      } /* End of httpapi_StrCpyReturnLen() */
  63          
  64          /*
  65           * ----------------------------------------------------------------------------
  66           * Function Name: HTTPAPI_ResponseErrMessage()
  67           * Purpose:
  68           * Params:
  69           * Returns:
  70           * Note:
  71           * ----------------------------------------------------------------------------
  72           */
  73          void HTTPAPI_ResponseErrMessage(U8_T *pDst, U8_T status, HTTP_SERVER_CONN *pConn)
  74          {
  75   1              U16_T len;
  76   1              U8_T *pSur = pDst, *pStatusCode;
  77   1      
  78   1              switch (status)
  79   1              {
  80   2              case HTTPAPI_400_BadRequest:
  81   2                      pStatusCode = "400 Bad_Request"; break;
  82   2              case HTTPAPI_404_NotFound:
  83   2              default:        
  84   2                      pStatusCode = "404 Not_Found"; break;
  85   2              case HTTPAPI_405_MethodNotAllowed:
  86   2                      pStatusCode = "405 Method_Not_Allowed"; break;
  87   2              case HTTPAPI_406_NotAccepTable:
  88   2                      pStatusCode = "406 Not_Acceptable"; break;
  89   2              }
  90   1                      
  91   1              /* Build response start line */
  92   1              len = httpapi_StrCpyReturnLen(&pDst, "HTTP/1.1");
  93   1              len += httpapi_StrCpyReturnLen(&pDst," ");      
  94   1              len += httpapi_StrCpyReturnLen(&pDst, pStatusCode);
  95   1              len += httpapi_StrCpyReturnLen(&pDst,"\r\n");
  96   1                              
  97   1              /* Build generic headers */
  98   1              len += httpapi_StrCpyReturnLen(&pDst, "Cache-control: no-cache\r\n");
  99   1              len += httpapi_StrCpyReturnLen(&pDst, "Connection: keep-alive\r\n");
 100   1              len += httpapi_StrCpyReturnLen(&pDst, "Content-type: text/html\r\n");
 101   1              
 102   1              /* Build empty line */
 103   1              len += httpapi_StrCpyReturnLen(&pDst, "\r\n");
 104   1              
 105   1              /* Build error message */
 106   1              len += httpapi_StrCpyReturnLen(&pDst, "<html><head><title>");   
 107   1              len += httpapi_StrCpyReturnLen(&pDst, "Document_Error");
 108   1              len += httpapi_StrCpyReturnLen(&pDst, "</title></head><body><h2>Access Error: ");
 109   1              len += httpapi_StrCpyReturnLen(&pDst, pStatusCode);
 110   1              len += httpapi_StrCpyReturnLen(&pDst, "</h2></body></html>");
 111   1                              
 112   1              /* Send response message */
 113   1              TCPIP_TcpSend(pConn->TcpSocket, pSur, len, TCPIP_SEND_FINAL);
C51 COMPILER V9.01   HTTPDAPI                                                              03/08/2012 11:01:04 PAGE 3   

 114   1              pConn->State = HTTP_STATE_SEND_FINAL;           
 115   1      } /* End of HTTPAPI_ResponseErrMessage() */
 116          
 117          /*
 118           * ----------------------------------------------------------------------------
 119           * Function Name: HTTPAPI_ResponseRedirectMesssge()
 120           * Purpose:
 121           * Params:
 122           * Returns:
 123           * Note:
 124           * ----------------------------------------------------------------------------
 125           */
 126          void HTTPAPI_ResponseRedirectMesssge(U8_T *pDst, U8_T fid, HTTP_SERVER_CONN *pConn)
 127          {
 128   1              U16_T len;
 129   1              U8_T *pSur = pDst;
 130   1              
 131   1              /* Build response start line */
 132   1              len = httpapi_StrCpyReturnLen(&pDst, "HTTP/1.1");
 133   1              len += httpapi_StrCpyReturnLen(&pDst," ");      
 134   1              len += httpapi_StrCpyReturnLen(&pDst, "302 Re-direction");
 135   1              len += httpapi_StrCpyReturnLen(&pDst,"\r\n");
 136   1              
 137   1              /* Build generic headers */
 138   1              len += httpapi_StrCpyReturnLen(&pDst, "Cache-control: no-cache\r\n");
 139   1              len += httpapi_StrCpyReturnLen(&pDst, "Connection: keep-alive\r\n");
 140   1              len += httpapi_StrCpyReturnLen(&pDst, "Content-type: text/html\r\n");
 141   1      
 142   1              /* Build redirection header */
 143   1              len += httpapi_StrCpyReturnLen(&pDst, "Location: ");
 144   1              len += httpapi_StrCpyReturnLen(&pDst, FSYS_Manage[fid].FName);
 145   1              len += httpapi_StrCpyReturnLen(&pDst, "\r\n");
 146   1              
 147   1              /* Build empty line */
 148   1              len += httpapi_StrCpyReturnLen(&pDst, "\r\n");
 149   1              
 150   1              /* Send response message */
 151   1              TCPIP_TcpSend(pConn->TcpSocket, pSur, len, TCPIP_SEND_FINAL);
 152   1              pConn->State = HTTP_STATE_SEND_FINAL;   
 153   1      } /* End of HTTPAPI_ResponseRedirectMesssge() */
 154          
 155          /*
 156           * ----------------------------------------------------------------------------
 157           * Function Name: HTTPAPI_ResponseAuthenMessage()
 158           * Purpose:
 159           * Params:
 160           * Returns:
 161           * Note:
 162           * ----------------------------------------------------------------------------
 163           */
 164          void HTTPAPI_ResponseAuthenMessage(U8_T *pDst, U8_T *pMsg, HTTP_SERVER_CONN *pConn)
 165          {
 166   1              U16_T len;
 167   1              U8_T *pSur = pDst;
 168   1              
 169   1              /* Build response start line */
 170   1              len = httpapi_StrCpyReturnLen(&pDst, "HTTP/1.1");
 171   1              len += httpapi_StrCpyReturnLen(&pDst," ");      
 172   1              len += httpapi_StrCpyReturnLen(&pDst, "401 Unauthorized");
 173   1              len += httpapi_StrCpyReturnLen(&pDst,"\r\n");
 174   1              
 175   1              /* Build generic headers */
C51 COMPILER V9.01   HTTPDAPI                                                              03/08/2012 11:01:04 PAGE 4   

 176   1              len += httpapi_StrCpyReturnLen(&pDst, "Cache-control: no-cache\r\n");
 177   1              len += httpapi_StrCpyReturnLen(&pDst, "Connection: keep-alive\r\n");
 178   1              len += httpapi_StrCpyReturnLen(&pDst, "Content-type: text/html\r\n");
 179   1              len += httpapi_StrCpyReturnLen(&pDst, "WWW-Authenticate: BASIC realm=\"");
 180   1              len += httpapi_StrCpyReturnLen(&pDst, pMsg);
 181   1              len += httpapi_StrCpyReturnLen(&pDst, "\"\r\n");
 182   1      
 183   1              /* Build empty line */
 184   1              len += httpapi_StrCpyReturnLen(&pDst, "\r\n");
 185   1              
 186   1              /* Send response message */
 187   1              TCPIP_TcpSend(pConn->TcpSocket, pSur, len, TCPIP_SEND_FINAL);
 188   1              pConn->State = HTTP_STATE_SEND_FINAL;
 189   1      } /* End of HTTPAPI_ResponseAuthenMessage() */
 190          
 191          /*
 192           * ----------------------------------------------------------------------------
 193           * Function Name: HTTPAPI_BuildGenericHeaders()
 194           * Purpose:
 195           * Params:
 196           * Returns:
 197           * Note:
 198           * ----------------------------------------------------------------------------
 199           */
 200          U16_T HTTPAPI_BuildGenericHeaders(U8_T **pDst, U8_T fid)
 201          {
 202   1              U16_T len;
 203   1              
 204   1              /* Build start line */  
 205   1              len = httpapi_StrCpyReturnLen(pDst, "HTTP/1.1");
 206   1              len += httpapi_StrCpyReturnLen(pDst," ");       
 207   1              len += httpapi_StrCpyReturnLen(pDst, "200 Ok");
 208   1              len += httpapi_StrCpyReturnLen(pDst,"\r\n");
 209   1              
 210   1              /* Build message headers */     
 211   1              len += httpapi_StrCpyReturnLen(pDst, "Cache-control: no-cache\r\n");
 212   1              len += httpapi_StrCpyReturnLen(pDst, "Connection: keep-alive\r\n");
 213   1              len += httpapi_StrCpyReturnLen(pDst, "Content-type: ");
 214   1              switch (FSYS_Manage[fid].FType)
 215   1              {
 216   2              default:                        
 217   2              case FILE_TYPE_HTML:
 218   2                      len += httpapi_StrCpyReturnLen(pDst, "text/html");      break;
 219   2              case FILE_TYPE_BIN:
 220   2                      len += httpapi_StrCpyReturnLen(pDst, "image/jpeg"); break;      
 221   2              case FILE_TYPE_JS:
 222   2                      len += httpapi_StrCpyReturnLen(pDst, "application/javascript"); break;  
 223   2              case FILE_TYPE_CSS:
 224   2                      len += httpapi_StrCpyReturnLen(pDst, "text/css"); break;        
 225   2              }       
 226   1              len += httpapi_StrCpyReturnLen(pDst, "\r\n");   
 227   1              
 228   1              /* Build empty line */
 229   1              len += httpapi_StrCpyReturnLen(pDst, "\r\n");   
 230   1              
 231   1              return len;
 232   1      } /* End of HTTPAPI_BuildGenericHeaders() */
 233          
 234          /*
 235           * ----------------------------------------------------------------------------
 236           * Function Name: HTTPAPI_BuildMessageBody()
 237           * Purpose:
C51 COMPILER V9.01   HTTPDAPI                                                              03/08/2012 11:01:04 PAGE 5   

 238           * Params:
 239           * Returns:
 240           * Note:
 241           * ----------------------------------------------------------------------------
 242           */
 243          U16_T HTTPAPI_BuildMessageBody(U8_T **pDst, U8_T Opt, U8_T *pName, U8_T *pId, const char *fmt, ...)
 244          {
 245   1              U16_T len = 0, lentmp = 0;
 246   1              va_list args;
 247   1      
 248   1              switch (Opt)
 249   1              {
 250   2              /* Build pure text message */   
 251   2              default:
 252   2              case HTTPAPI_FmtOnly:
 253   2                      if (fmt)
 254   2                      {       
 255   3                              va_start(args, fmt);
 256   3                              len = vsprintf(*pDst,fmt,args);
 257   3                              va_end(args);
 258   3                              (*pDst) += len;
 259   3                      }
 260   2                      break;
 261   2                      
 262   2              /* Build hidden element */
 263   2              case HTTPAPI_Hidden:
 264   2                      len += httpapi_StrCpyReturnLen(pDst, "<input type=\"hidden\" ");
 265   2                      if (pName)
 266   2                      {
 267   3                              len += httpapi_StrCpyReturnLen(pDst, "name=\"");
 268   3                              len += httpapi_StrCpyReturnLen(pDst, pName);            
 269   3                              len += httpapi_StrCpyReturnLen(pDst, "\" ");
 270   3                      }
 271   2                      if (pId)
 272   2                      {
 273   3                              len += httpapi_StrCpyReturnLen(pDst, "id=\"");
 274   3                              len += httpapi_StrCpyReturnLen(pDst, pId);              
 275   3                              len += httpapi_StrCpyReturnLen(pDst, "\" ");
 276   3                      }
 277   2                      if (fmt)
 278   2                      {
 279   3                              len += httpapi_StrCpyReturnLen(pDst, "value=\"");
 280   3                              va_start(args, fmt);
 281   3                              lentmp = vsprintf(*pDst,fmt,args);
 282   3                              va_end(args);
 283   3                              len += lentmp;
 284   3                              (*pDst) += lentmp;                      
 285   3                              len += httpapi_StrCpyReturnLen(pDst, "\" ");
 286   3                      }
 287   2                      len += httpapi_StrCpyReturnLen(pDst, "/>");             
 288   2                      break;
 289   2              }
 290   1              
 291   1              return len;
 292   1      } /* End of HTTPAPI_BuildMessageBody() */
 293          
 294          /*
 295           * ----------------------------------------------------------------------------
 296           * Function Name: HTTPAPI_ResponseResource()
 297           * Purpose:
 298           * Params:
 299           * Returns:
C51 COMPILER V9.01   HTTPDAPI                                                              03/08/2012 11:01:04 PAGE 6   

 300           * Note:
 301           * ----------------------------------------------------------------------------
 302           */
 303          void HTTPAPI_ResponseResource(U8_T *pSur, U16_T len, U8_T fid, HTTP_SERVER_CONN *pConn)
 304          {
 305   1              pConn->FileId = fid;
 306   1              
 307   1              /* Send response message */
 308   1              TCPIP_TcpSend(pConn->TcpSocket, pSur, len, TCPIP_SEND_NOT_FINAL);
 309   1              pConn->State = HTTP_STATE_SEND_HEADER;  
 310   1      } /* End of HTTPAPI_ResponseResource() */
 311          
 312          
 313          /*
 314           * ----------------------------------------------------------------------------
 315           * Function Name: HTTPAPI_Str2Short()
 316           * Purpose: Transfer a string to ushort number.
 317           * Params:
 318           * Returns:
 319           * Note:
 320           * ----------------------------------------------------------------------------
 321           */
 322          U16_T HTTPAPI_Str2Short(U8_T* pBuf, U8_T len)
 323          {
 324   1              U32_T   value = 0;
 325   1      
 326   1              while (len--)
 327   1              {
 328   2                      value *= 10;
 329   2       
 330   2                      if ((*pBuf < 0x3a) && (*pBuf > 0x2f))
 331   2                              value += (*pBuf - 0x30);
 332   2                      else
 333   2                              return 0xffff;
 334   2      
 335   2                      pBuf++;
 336   2              }
 337   1              if (value & 0xFFFF0000) return 0xFFFF;
 338   1              return (U16_T)(value & 0xFFFF);
 339   1      
 340   1      } /* End of HTTPAPI_Str2Short() */
 341          
 342          /*
 343           * ----------------------------------------------------------------------------
 344           * Function Name: HTTPAPI_Short2Str
 345           * Purpose: Transfer a unsigned short number to decimal string.
 346           * Params:
 347           * Returns:
 348           * Note:
 349           * ----------------------------------------------------------------------------
 350           */
 351          U8_T HTTPAPI_Short2Str(U16_T value, U8_T* pBuf)
 352          {
 353   1              U8_T    loop, index = 0;
 354   1              U8_T    tmp[5];
 355   1      
 356   1              while (value)
 357   1              {
 358   2                      tmp[index] = value % 10;
 359   2                      index++;
 360   2                      value /= 10;
 361   2              }
C51 COMPILER V9.01   HTTPDAPI                                                              03/08/2012 11:01:04 PAGE 7   

 362   1      
 363   1              for (loop = 0; loop < index; loop++)
 364   1              {
 365   2                      pBuf[loop] = tmp[index -loop -1] + 0x30;
 366   2              }
 367   1      
 368   1              return index;
 369   1      
 370   1      } /* End of HTTPAPI_Short2Str() */
 371          
 372          /*
 373           * ----------------------------------------------------------------------------
 374           * Function Name: HTTPAPI_Ulong2IpAddr()
 375           * Purpose: Convertion a unsigne long to dotted decimal notation string
 376           * Params:
 377           * Returns:
 378           * Note:
 379           * ----------------------------------------------------------------------------
 380           */
 381          U8_T HTTPAPI_Ulong2IpAddr(U32_T ip, U8_T* pbuf)
 382          {
 383   1              U8_T*   point = (U8_T*)&ip;
 384   1              U8_T    i = sizeof (U32_T);
 385   1              U8_T    temp, value[3];
 386   1              U8_T    j, len = 0;
 387   1      
 388   1              while (i--)
 389   1              {
 390   2                      temp = *point++;
 391   2                      if (temp == 0)
 392   2                      {
 393   3                              *pbuf++ = 0x30;
 394   3                              len++;
 395   3                      }
 396   2                      else
 397   2                      {
 398   3                              j = 3;
 399   3                              while (j--)
 400   3                              {
 401   4                                      value[j] = (temp % 10) + 0x30;
 402   4                                      temp /= 10;
 403   4                              }
 404   3      
 405   3                              if (value[0] != '0')
 406   3                              {
 407   4                                      *pbuf++ = value[0];
 408   4                                      *pbuf++ = value[1];
 409   4                                      *pbuf++ = value[2];
 410   4                                      len += 3;
 411   4                              }
 412   3                              else if (value[1] != '0')
 413   3                              {
 414   4                                      *pbuf++ = value[1];
 415   4                                      *pbuf++ = value[2];
 416   4                                      len += 2;
 417   4                              }
 418   3                              else
 419   3                              {
 420   4                                      *pbuf++ = value[2];
 421   4                                      len++;
 422   4                              }
 423   3                      }
C51 COMPILER V9.01   HTTPDAPI                                                              03/08/2012 11:01:04 PAGE 8   

 424   2      
 425   2                      if (i)
 426   2                      {
 427   3                              *pbuf++ = '.';
 428   3                              len++;
 429   3                      }
 430   2              }
 431   1      
 432   1              return len;
 433   1                              
 434   1      } /* End of HTTPAPI_Ulong2IpAddr() */
 435          
 436          /*
 437           * ----------------------------------------------------------------------------
 438           * Function Name: HTTPAPI_IpAddr2Ulong()
 439           * Purpose: Convertion dotted decimal notation string to a unsigne long
 440           * Params:
 441           * Returns:
 442           * Note:
 443           * ----------------------------------------------------------------------------
 444           */
 445          U32_T HTTPAPI_IpAddr2Ulong(U8_T* pBuf, U8_T len)
 446          {
 447   1              U32_T   ip = 0;
 448   1              U16_T   value16;
 449   1              U8_T*   point = (U8_T*)&ip;
 450   1              U8_T    count = 0;
 451   1      
 452   1              while (1)
 453   1              {
 454   2                      value16 = 0;
 455   2      
 456   2                      while ((*pBuf != '.') && len)
 457   2                      {
 458   3                              *point *= 10;
 459   3                              value16 *= 10;
 460   3        
 461   3                              if ((*pBuf < 0x3a) && (*pBuf > 0x2f))
 462   3                              {
 463   4                                      *point += (*pBuf - 0x30);
 464   4                                      value16 += (*pBuf - 0x30);
 465   4                              }
 466   3                              else
 467   3                                      return 0xffffffff;
 468   3      
 469   3                              pBuf++;
 470   3                              len--;
 471   3                      }
 472   2      
 473   2                      if (value16 > 255)
 474   2                              return 0xffffffff;
 475   2      
 476   2                      if (len == 0)
 477   2                              break;
 478   2      
 479   2                      pBuf++;
 480   2                      len--;
 481   2                      count++;
 482   2                      point++;
 483   2      
 484   2                      if (count > 3)
 485   2                              return 0xffffffff;
C51 COMPILER V9.01   HTTPDAPI                                                              03/08/2012 11:01:04 PAGE 9   

 486   2              }
 487   1      
 488   1              if (count != 3)
 489   1                      return 0xffffffff;
 490   1      
 491   1              return ip;
 492   1      } /* End of HTTPAPI_IpAddr2Ulong() */
 493          
 494          /*
 495           * ----------------------------------------------------------------------------
 496           * Function Name: U8_T HTTPAPI_Num2HexText()
 497           * Purpose: 
 498           * Params:
 499           * Returns:
 500           * Note:
 501           * ----------------------------------------------------------------------------
 502           */
 503          U8_T HTTPAPI_Num2HexText(U8_T *pHexText, U8_T *pNum, U8_T NumLen)
 504          {
 505   1              U8_T Char, i, HexTextLen;
 506   1              
 507   1              for (i = 0, HexTextLen = 0; i < NumLen; i ++)
 508   1              {
 509   2                      Char = pNum[i] >> 4;
 510   2                      if (Char > 9)
 511   2                              Char += 0x57;
 512   2                      else
 513   2                              Char += 0x30;
 514   2                      pHexText[HexTextLen++] = Char;
 515   2              
 516   2                      Char = (pNum[i]) & 0x0f;
 517   2                      if (Char > 9)
 518   2                              Char += 0x57;
 519   2                      else
 520   2                              Char += 0x30;
 521   2                      pHexText[HexTextLen++] = Char;
 522   2              }
 523   1              pHexText[HexTextLen] = '\0';
 524   1              
 525   1              return HexTextLen;
 526   1      } /* End of HTTPAPI_Num2HexText() */
 527          
 528          /*
 529           * ----------------------------------------------------------------------------
 530           * Function Name: U8_T HTTPAPI_HexText2Num()
 531           * Purpose: 
 532           * Params:
 533           * Returns:
 534           * Note:
 535           * ----------------------------------------------------------------------------
 536           */
 537          U8_T HTTPAPI_HexText2Num(U8_T *pNum, U8_T *pHexText, U8_T HexTextLen)
 538          {
 539   1              U8_T i, NumLen;
 540   1              
 541   1              for (i = 0, NumLen = 0; i < HexTextLen; i ++)
 542   1              {
 543   2                      if (pHexText[i] >= '0' && pHexText[i] <= '9')
 544   2                              pNum[NumLen] = (pHexText[i++] - 0x30) << 4;
 545   2                      else if (pHexText[i] >= 'a' && pHexText[i] <= 'f')
 546   2                              pNum[NumLen] = (pHexText[i++] - 0x61) << 4;             
 547   2                      else if (pHexText[i] >= 'A' && pHexText[i] <= 'F')
C51 COMPILER V9.01   HTTPDAPI                                                              03/08/2012 11:01:04 PAGE 10  

 548   2                              pNum[NumLen] = (pHexText[i++] - 0x41) << 4;
 549   2                      else
 550   2                              return 0;// not a valid character //
 551   2                              
 552   2                      if (!(i < HexTextLen))
 553   2                      {
 554   3                              NumLen ++;
 555   3                              break;
 556   3                      }
 557   2                      
 558   2                      if (pHexText[i] >= '0' && pHexText[i] <= '9')
 559   2                              pNum[NumLen++] |= (pHexText[i] - 0x30);
 560   2                      else if (pHexText[i] >= 'a' && pHexText[i] <= 'f')
 561   2                              pNum[NumLen++] |= (pHexText[i] - 0x61);         
 562   2                      else if (pHexText[i] >= 'A' && pHexText[i] <= 'F')
 563   2                              pNum[NumLen++] |= (pHexText[i] - 0x41);
 564   2                      else
 565   2                              return 0;// not a valid character //
 566   2              }
 567   1                      
 568   1              return NumLen;
 569   1      } /* End of HTTPAPI_HexText2Num() */
 570          
 571          
 572          /*
 573           * ----------------------------------------------------------------------------
 574           * Function Name: U16_T HTTPAPI_MIMEbase64Decode()
 575           * Purpose: 
 576           * Params:
 577           * Returns:
 578           * Note:
 579           * ----------------------------------------------------------------------------
 580           */
 581          U16_T HTTPAPI_MIMEbase64Decode(U8_T *pDst, U8_T *pSur, U16_T len)
 582          {
 583   1              U8_T i, tmp[4];
 584   1              U16_T j = 0;
 585   1      
 586   1              while (len)
 587   1              {
 588   2                      // get 4 bytes from source buffer //
 589   2                      for (i = 0; i < 4; i ++)
 590   2                      {
 591   3                              if (len)
 592   3                              {
 593   4                                      tmp[i] = *pSur++;
 594   4                                      len --;
 595   4                              }
 596   3                              else
 597   3                                      tmp[i] = 0;
 598   3                      }
 599   2      
 600   2                      // decode start //
 601   2                      for (i = 0; i < 4; i++)
 602   2                      {
 603   3                              if (tmp[i] > ('A'-1) && tmp[i] < ('Z'+1))
 604   3                                      tmp[i] -= 65;
 605   3                              else if (tmp[i] > ('a'-1) && tmp[i] < ('z'+1))
 606   3                                      tmp[i] -= 71;
 607   3                              else if (tmp[i] > ('0'-1) && tmp[i] < ('9'+1))
 608   3                                      tmp[i] += 4;
 609   3                              else if (tmp[i] == '+')
C51 COMPILER V9.01   HTTPDAPI                                                              03/08/2012 11:01:04 PAGE 11  

 610   3                                      tmp[i] += 19;
 611   3                              else if (tmp[i] == '/')
 612   3                                      tmp[i] += 16;
 613   3                              else if (tmp[i] == '=')
 614   3                                      tmp[i] = 0;
 615   3                      }
 616   2                      
 617   2                      // export data to destination buffer //
 618   2                      *pDst++ = (tmp[0] << 2) | (tmp[1] >> 4);
 619   2                      if (*(pDst - 1) != 0) j ++;
 620   2                      *pDst++ = (tmp[1] << 4) | (tmp[2] >> 2);
 621   2                      if (*(pDst - 1) != 0) j ++;             
 622   2                      *pDst++ = (tmp[2] << 6) | tmp[3];
 623   2                      if (*(pDst - 1) != 0) j ++;             
 624   2              }
 625   1              return j;
 626   1      } /* End of HTTPAPI_MIMEbase64Decode() */
 627          
 628          /*
 629           * ----------------------------------------------------------------------------
 630           * Function Name: httpapi_SearchStrStopByTag()
 631           * Purpose: 
 632           * Params:
 633           * Returns:
 634           * Note:
 635           * ----------------------------------------------------------------------------
 636           */
 637          U16_T httpapi_SearchStrStopByTag(U8_T *pSur, U8_T *pRef, U8_T *pStop)
 638          {
 639   1              U16_T i;
 640   1              U8_T c;
 641   1      
 642   1              for (i = 0; i < 1600; i ++)
 643   1              {
 644   2                      for (c = 0; pRef[c] != '\0'; c ++)
 645   2                      {
 646   3                              if (pSur[i+c] != pRef[c])
 647   3                                      break;
 648   3                      }
 649   2                      if (pRef[c] == '\0')
 650   2                              return i;// found return offset //
 651   2                              
 652   2                      for (c = 0; pStop[c] != '\0'; c ++)
 653   2                      {
 654   3                              if (pSur[i+c] != pStop[c])
 655   3                                      break;
 656   3                      }
 657   2                      if (pStop[c] == '\0')
 658   2                              return 0xffff;          
 659   2              }
 660   1              return 0xffff;
 661   1      } /* End of httpapi_SearchStrStopByTag() */
 662          
 663          /*
 664           * ----------------------------------------------------------------------------
 665           * Function Name: HTTPAPI_ParseAuthenHeader()
 666           * Purpose: 
 667           * Params:
 668           * Returns:
 669           * Note:
 670           * ----------------------------------------------------------------------------
 671           */
C51 COMPILER V9.01   HTTPDAPI                                                              03/08/2012 11:01:04 PAGE 12  

 672          U8_T HTTPAPI_ParseAuthenHeader(U8_T *pDst, U8_T *pSur, U8_T **pUserName, U8_T **pPassWord)
 673          {
 674   1              U16_T offset;
 675   1      
 676   1              offset = httpapi_SearchStrStopByTag(pSur, "Authorization: Basic ", "\r\n\r\n");
 677   1              
 678   1              if (offset != 0xffff)
 679   1              {
 680   2                      pSur += offset + 21;
 681   2                      offset = httpapi_SearchStrStopByTag(pSur, "\r\n", "\r\n\r\n");
 682   2                      if (offset == 0xffff) return HTTPAPI_ERR;
 683   2                      offset = HTTPAPI_MIMEbase64Decode(pDst, pSur, offset);
 684   2                      
 685   2                      *pUserName = pDst; // set username pointer //
 686   2                      pDst[offset] = '\0';
 687   2                      offset = httpapi_SearchStrStopByTag(pDst, ":", " ");
 688   2                      pDst[offset] = '\0';
 689   2                      *pPassWord = &pDst[offset+1]; // set password pointer //
 690   2                      return HTTPAPI_OK;
 691   2              }
 692   1              return HTTPAPI_ERR;// not found //
 693   1      } /* End of HTTPAPI_ParseAuthenHeader() */
 694          
 695          /* End of httpapi.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6329    ----
   CONSTANT SIZE    =    491    ----
   XDATA SIZE       =   ----     220
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
