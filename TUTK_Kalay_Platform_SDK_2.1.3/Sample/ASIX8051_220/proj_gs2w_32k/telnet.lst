C51 COMPILER V9.01   TELNET                                                                03/08/2012 11:01:00 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE TELNET
OBJECT MODULE PLACED IN .\telnet.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\src\mtelnet\telnet.c LARGE OMF2 ROM(D16M) BROWSE INTVECTOR(0X8020) INCDI
                    -R(..\src\main;..\src\mcpu;..\src\mswdma;..\src\uart0;..\src\mmstimer;..\src\mwif;..\src\madapter;..\src\mtcpip;..\src\mp
                    -ing;..\src\mpppoe;..\src\si2c;..\src\mdnsc;..\src\mconsole;..\src\mtelnet;..\src\meeprom;..\src\mmac;..\src\mdhcpc;..\sr
                    -c\mhttp;..\src\mgs2wifi;..\src\mhsuart;..\src\msmtpc;..\src\web_page;..\src\mdhcps;..\src\mdebug) DEFINE(RuntimeCodeAt32
                    -KH) VARBANKING DEBUG PRINT(.\telnet.lst) OBJECT(.\telnet.obj)

line level    source

   1          /*
   2           ******************************************************************************
   3           *     Copyright (c) 2006       ASIX Electronic Corporation      All rights reserved.
   4           *
   5           *     This is unpublished proprietary source code of ASIX Electronic Corporation
   6           *
   7           *     The copyright notice above does not evidence any actual or intended
   8           *     publication of such source code.
   9           ******************************************************************************
  10           */
  11          /*=============================================================================
  12           * Module Name: TELNET
  13           * Purpose: The purpose of this package provides the services to TELNET
  14           * Author:
  15           * Date:
  16           * Notes:
  17           * $Log$
  18          *=============================================================================
  19          */
  20          /* INCLUDE FILE DECLARATIONS */
  21          #include <stdio.h>
  22          #include <string.h>
  23          #include "main.h"
  24          #include "mstimer.h"
  25          #include "tcpip.h"
  26          #include "console.h"
  27          #include "telnet.h"
  28          #include "printd.h"
  29          #include "gconfig.h"
  30          
  31          #if (INCLUDE_TELNET_SERVER)
  32          /* NAMING CONSTANT DECLARATIONS */
  33          #define UF_ECHO 0x01
  34          #define UF_SGA  0x02
  35          #define CHM_TRY  0
  36          #define CHM_ON   1
  37          #define CHM_OFF  2
  38          #define TELNET_SERVER_PORT 23
  39          #define TELNET_RX_BUF_SZIE DATABUFSIZE
  40          #define TELNET_TX_BUF_SZIE (DATABUFSIZE*26)
  41          
  42          /* GLOBAL VARIABLES DECLARATIONS */
  43          
  44          /* LOCAL VARIABLES DECLARATIONS */
  45          static TELNET_SERVER_CONN TELNET_Connect;
  46          static U8_T far telnet_RxBuf[TELNET_RX_BUF_SZIE];
  47          static U8_T far telnet_TxBuf[TELNET_TX_BUF_SZIE];
  48          static U16_T telnet_RxHeadPtr, telnet_RxTailPtr;
  49          static U16_T telnet_TxHeadPtr, telnet_TxTailPtr;
  50          static U8_T telnet_InterfaceId, telnet_InitConsole=0;
  51          static U8_T telnet_TxReady=1; /* ready to transmit data to tcp layer */
C51 COMPILER V9.01   TELNET                                                                03/08/2012 11:01:00 PAGE 2   

  52          static U8_T far txPktBuf[8*DATABUFSIZE];
  53          
  54          /* LOCAL SUBPROGRAM DECLARATIONS */
  55          static void telnet_PutRxChar(U8_T c);
  56          static U8_T telnet_GetTxChar(void);
  57          static void telnet_SendData(TELNET_SERVER_CONN *pTnConn);
  58          static int telnet_Subneg(TELNET_SERVER_CONN *pTnConn, U8_T c);
  59          static void telnet_Telopt(TELNET_SERVER_CONN *pTnConn, U8_T c);
  60          static void telnet_ToEcho(TELNET_SERVER_CONN *pTnConn);
  61          static void telnet_ToSGA(TELNET_SERVER_CONN *pTnConn);
  62          static void telnet_ToNotSup(TELNET_SERVER_CONN *pTnConn, U8_T c);
  63          static void telnet_IACFlush(TELNET_SERVER_CONN *pTnConn);
  64          static void telnet_PutIAC(TELNET_SERVER_CONN *pTnConn, U8_T c);
  65          static void telnet_PutIAC2(TELNET_SERVER_CONN *pTnConn, U8_T wwdd, U8_T c);
  66          static void telnet_InitInstance(void);
  67          static void telnet_RcvdData(TELNET_SERVER_CONN *pTnConn, U8_T *pData, U16_T len);
  68          static void telnet_SendInitOptions(TELNET_SERVER_CONN *pTnConn);
  69          static void telnet_TcpSend(U8_T tcpSocket, U8_T *pBuf, U16_T len);
  70          
  71          /* LOCAL SUBPROGRAM BODIES */
  72          /*
  73           * ----------------------------------------------------------------------------
  74           * Function Name: telnet_PutRxChar()
  75           * Purpose:
  76           * Params:
  77           * Returns:
  78           * Note:
  79           * ----------------------------------------------------------------------------
  80           */
  81          static void telnet_PutRxChar(U8_T c)
  82          {
  83   1          U16_T tmp16;
  84   1      
  85   1          tmp16 = telnet_RxTailPtr+1;
  86   1          if (tmp16 >= TELNET_RX_BUF_SZIE)
  87   1              tmp16 = 0;
  88   1      
  89   1          /* is buffer full ? */
  90   1          if (telnet_RxHeadPtr == tmp16)
  91   1              return;
  92   1      
  93   1          telnet_RxBuf[telnet_RxTailPtr] = c;
  94   1          telnet_RxTailPtr = tmp16;
  95   1      
  96   1      } /* End of telnet_PutRxChar() */
  97          
  98          /*
  99           * ----------------------------------------------------------------------------
 100           * Function Name: TELNET_GetChar()
 101           * Purpose:
 102           * Params:
 103           * Returns:
 104           * Note:
 105           * ----------------------------------------------------------------------------
 106           */
 107          S8_T TELNET_GetChar(void)
 108          {
 109   1          S8_T c;
 110   1      
 111   1          if ((TELNET_Connect.State != TELNET_STATE_CONNECTED) ||
 112   1              (telnet_RxTailPtr == telnet_RxHeadPtr))
 113   1              return 0;
C51 COMPILER V9.01   TELNET                                                                03/08/2012 11:01:00 PAGE 3   

 114   1      
 115   1          c = telnet_RxBuf[telnet_RxHeadPtr];
 116   1          telnet_RxHeadPtr++;
 117   1          if (telnet_RxHeadPtr >= TELNET_RX_BUF_SZIE)
 118   1              telnet_RxHeadPtr = 0;
 119   1      
 120   1          return c;
 121   1      } /* End of TELNET_GetChar() */
 122          
 123          /*
 124           * ----------------------------------------------------------------------------
 125           * Function Name: TELNET_PutChar()
 126           * Purpose:
 127           * Params:
 128           * Returns:
 129           * Note:
 130           * ----------------------------------------------------------------------------
 131           */
 132          S8_T TELNET_PutChar(S8_T c)
 133          {
 134   1          U16_T tmp16;
 135   1      
 136   1          tmp16 = telnet_TxTailPtr+1;
 137   1          if (tmp16 >= TELNET_TX_BUF_SZIE)
 138   1              tmp16 = 0;
 139   1          
 140   1          /* is buffer full ? */
 141   1          if (telnet_TxHeadPtr == tmp16)
 142   1          {
 143   2              if (telnet_TxReady && TELNET_Connect.State == TELNET_STATE_CONNECTED)
 144   2                  telnet_SendData(&TELNET_Connect);
 145   2              else
 146   2              return -1;
 147   2          }
 148   1      
 149   1          telnet_TxBuf[telnet_TxTailPtr] = c;
 150   1          telnet_TxTailPtr = tmp16;
 151   1      
 152   1          return 1;
 153   1      } /* End of TELNET_PutChar() */ 
 154          
 155          /*
 156           * ----------------------------------------------------------------------------
 157           * Function Name: telnet_SendInitOptions()
 158           * Purpose:
 159           * Params:
 160           * Returns:
 161           * Note:
 162           * ----------------------------------------------------------------------------
 163           */
 164          static void telnet_SendInitOptions(TELNET_SERVER_CONN *pTnConn)
 165          {
 166   1          /* char mode */
 167   1          telnet_PutIAC2(pTnConn, WILL, TELOPT_ECHO);
 168   1          telnet_PutIAC2(pTnConn, WILL, TELOPT_SGA);
 169   1          pTnConn->TnServer.TelFlags |= (UF_ECHO | UF_SGA);
 170   1          telnet_IACFlush(pTnConn);
 171   1                
 172   1      } /* End of telnet_SendInitOptions() */
 173          
 174          /*
 175           * ----------------------------------------------------------------------------
C51 COMPILER V9.01   TELNET                                                                03/08/2012 11:01:00 PAGE 4   

 176           * Function Name: telnet_GetTxChar()
 177           * Purpose:
 178           * Params:
 179           * Returns:
 180           * Note:
 181           * ----------------------------------------------------------------------------
 182           */
 183          static U8_T telnet_GetTxChar(void)
 184          {
 185   1          S8_T c;
 186   1      
 187   1          if (telnet_TxTailPtr == telnet_TxHeadPtr)
 188   1              return 0;
 189   1         
 190   1          c = telnet_TxBuf[telnet_TxHeadPtr];
 191   1          telnet_TxHeadPtr++;
 192   1          if (telnet_TxHeadPtr >= TELNET_TX_BUF_SZIE)
 193   1              telnet_TxHeadPtr = 0;
 194   1      
 195   1          return c;
 196   1      } /* End of telnet_GetTxChar() */
 197          
 198          /*
 199           * ----------------------------------------------------------------------------
 200           * Function Name: telnet_SendData()
 201           * Purpose:
 202           * Params:
 203           * Returns:
 204           * Note:
 205           * ----------------------------------------------------------------------------
 206           */
 207          static void telnet_SendData(TELNET_SERVER_CONN *pTnConn)
 208          {
 209   1          U8_T c;
 210   1          U16_T len=0;
 211   1      
 212   1          /* send data */
 213   1          for (len= 0; len < (8*DATABUFSIZE);)
 214   1          {
 215   2              if ((c = telnet_GetTxChar()) == 0)
 216   2                  break;
 217   2      
 218   2              txPktBuf[len++] = c;
 219   2              if (c == 0xFF)
 220   2                  txPktBuf[len++] = 0xFF;
 221   2              else if (c == 0x0D)
 222   2                  txPktBuf[len++] = 0x00;
 223   2          }
 224   1      
 225   1          if (len)
 226   1              telnet_TcpSend(pTnConn->TcpSocket, txPktBuf, len);
 227   1      
 228   1      } /* End of telnet_SendData() */
 229          
 230          /*
 231           * ----------------------------------------------------------------------------
 232           * Function Name: telnet_SendData()
 233           * Purpose:
 234           * Params:
 235           * Returns:
 236           * Note:
 237           * ----------------------------------------------------------------------------
C51 COMPILER V9.01   TELNET                                                                03/08/2012 11:01:00 PAGE 5   

 238           */
 239          static void telnet_TcpSend(U8_T tcpSocket, U8_T *pBuf, U16_T len)
 240          {
 241   1          telnet_TxReady = 0;
 242   1          TCPIP_TcpSend(tcpSocket, pBuf, len, TCPIP_SEND_NOT_FINAL);
 243   1      
 244   1      } /* End of telnet_TcpSend() */
 245           
 246          
 247          /*
 248           * ----------------------------------------------------------------------------
 249           * Function Name: telnet_IACFlush()
 250           * Purpose:
 251           * Params:
 252           * Returns:
 253           * Note:
 254           * ----------------------------------------------------------------------------
 255           */
 256          static void telnet_IACFlush(TELNET_SERVER_CONN *pTnConn)
 257          {
 258   1          if (pTnConn->TnServer.IACLen > 0)
 259   1          {
 260   2              if (telnet_TxReady)
 261   2                  telnet_TcpSend(pTnConn->TcpSocket, pTnConn->TnServer.IACBuf, pTnConn->TnServer.IACLen);
 262   2              else
 263   2                  return;
 264   2              pTnConn->TnServer.IACLen = 0;
 265   2          }
 266   1      
 267   1      } /* End of telnet_IACFlush() */
 268          
 269          /*
 270           * ----------------------------------------------------------------------------
 271           * Function Name: telnet_PutIAC()
 272           * Purpose:
 273           * Params:
 274           * Returns:
 275           * Note:
 276           * ----------------------------------------------------------------------------
 277           */
 278          static void telnet_PutIAC(TELNET_SERVER_CONN *pTnConn, U8_T c)
 279          {
 280   1          pTnConn->TnServer.IACBuf[pTnConn->TnServer.IACLen++] = c;
 281   1      
 282   1      } /* End of telnet_PutIAC() */
 283          
 284          /*
 285           * ----------------------------------------------------------------------------
 286           * Function Name: telnet_PutIAC2()
 287           * Purpose:
 288           * Params:
 289           * Returns:
 290           * Note:
 291           * ----------------------------------------------------------------------------
 292           */
 293          static void telnet_PutIAC2(TELNET_SERVER_CONN *pTnConn, U8_T wwdd, U8_T c)
 294          {
 295   1          if (pTnConn->TnServer.IACLen + 3 > IACBUFSIZE)
 296   1              telnet_IACFlush(pTnConn);
 297   1      
 298   1          telnet_PutIAC(pTnConn, IAC);
 299   1          telnet_PutIAC(pTnConn, wwdd);
C51 COMPILER V9.01   TELNET                                                                03/08/2012 11:01:00 PAGE 6   

 300   1          telnet_PutIAC(pTnConn, c);
 301   1      
 302   1      } /* End of telnet_PutIAC2() */
 303          
 304          /*
 305           * ----------------------------------------------------------------------------
 306           * Function Name: telnet_ToNotSup()
 307           * Purpose:
 308           * Params:
 309           * Returns:
 310           * Note:
 311           * ----------------------------------------------------------------------------
 312           */
 313          static void telnet_ToNotSup(TELNET_SERVER_CONN *pTnConn, U8_T c)
 314          {
 315   1          if (pTnConn->TnServer.TelWish == WILL)
 316   1              telnet_PutIAC2(pTnConn, DONT, c);
 317   1          else if (pTnConn->TnServer.TelWish == DO)
 318   1              telnet_PutIAC2(pTnConn, WONT, c);
 319   1      
 320   1      } /* End of telnet_ToNotSup */
 321          
 322          /*
 323           * ----------------------------------------------------------------------------
 324           * Function Name: telnet_ToEcho()
 325           * Purpose:
 326           * Params:
 327           * Returns:
 328           * Note:
 329           * ----------------------------------------------------------------------------
 330           */
 331          static void telnet_ToEcho(TELNET_SERVER_CONN *pTnConn)
 332          {
 333   1          if (pTnConn->TnServer.TelFlags & UF_ECHO)
 334   1          {
 335   2              pTnConn->TnServer.TelFlags ^= UF_ECHO;
 336   2              return;
 337   2          }
 338   1      
 339   1          if (pTnConn->TnServer.TelWish == DO)
 340   1          { 
 341   2              telnet_PutIAC2(pTnConn, WILL, TELOPT_ECHO);
 342   2          }
 343   1          else if (pTnConn->TnServer.TelWish == WILL)
 344   1          {
 345   2              telnet_PutIAC2(pTnConn, WONT, TELOPT_ECHO);
 346   2          }
 347   1      
 348   1      } /* End of telnet_ToEcho() */
 349          
 350          /*
 351           * ----------------------------------------------------------------------------
 352           * Function Name: telnet_ToSGA()
 353           * Purpose:
 354           * Params:
 355           * Returns:
 356           * Note:
 357           * ----------------------------------------------------------------------------
 358           */
 359          static void telnet_ToSGA(TELNET_SERVER_CONN *pTnConn)
 360          {
 361   1          if (pTnConn->TnServer.TelFlags & UF_SGA)
C51 COMPILER V9.01   TELNET                                                                03/08/2012 11:01:00 PAGE 7   

 362   1          {
 363   2              pTnConn->TnServer.TelFlags ^= UF_SGA;
 364   2              return;
 365   2          }
 366   1      
 367   1          if (pTnConn->TnServer.TelWish == DO)
 368   1          { 
 369   2              telnet_PutIAC2(pTnConn, WILL, TELOPT_SGA);
 370   2          }
 371   1          else if (pTnConn->TnServer.TelWish == WILL)
 372   1          {
 373   2              telnet_PutIAC2(pTnConn, DO, TELOPT_SGA);
 374   2          }
 375   1      
 376   1      } /* End of telnet_ToSGA() */
 377          
 378          /*
 379           * ----------------------------------------------------------------------------
 380           * Function Name: telnet_Telopt()
 381           * Purpose:
 382           * Params:
 383           * Returns:
 384           * Note:
 385           * ----------------------------------------------------------------------------
 386           */
 387          static void telnet_Telopt(TELNET_SERVER_CONN *pTnConn, U8_T c)
 388          {
 389   1          switch (c)
 390   1          {
 391   2              case TELOPT_ECHO:
 392   2                  telnet_ToEcho(pTnConn);
 393   2                  break;
 394   2      
 395   2              case TELOPT_SGA:
 396   2                  telnet_ToSGA(pTnConn);
 397   2                  break;
 398   2      
 399   2              default:
 400   2                  telnet_ToNotSup(pTnConn, c);
 401   2                  break;
 402   2          }
 403   1      
 404   1      } /* End of telnet_Telopt() */
 405          
 406          /*
 407           * ----------------------------------------------------------------------------
 408           * Function Name: telnet_Subneg()
 409           * Purpose:
 410           * Params:
 411           * Returns:
 412           * Note:
 413           * ----------------------------------------------------------------------------
 414           */
 415          static int telnet_Subneg(TELNET_SERVER_CONN *pTnConn, U8_T c)
 416          {
 417   1          switch (pTnConn->TnServer.TelState)
 418   1          {
 419   2              case TS_SUB1:
 420   2                  if (c == IAC)
 421   2                      pTnConn->TnServer.TelState = TS_SUB2;
 422   2                  break;
 423   2              case TS_SUB2:
C51 COMPILER V9.01   TELNET                                                                03/08/2012 11:01:00 PAGE 8   

 424   2                  if (c == SE)
 425   2                      return 1;
 426   2                  pTnConn->TnServer.TelState = TS_SUB1;
 427   2                  break;
 428   2          }
 429   1          return 0;
 430   1      } /* End of telnet_Subneg() */
 431          
 432          /*
 433           * ----------------------------------------------------------------------------
 434           * Function Name: telnet_RcvdData()
 435           * Purpose:
 436           * Params:
 437           * Returns:
 438           * Note:
 439           * ----------------------------------------------------------------------------
 440           */
 441          static void telnet_RcvdData(TELNET_SERVER_CONN *pTnConn, U8_T *pData, U16_T len)
 442          {
 443   1          U16_T i;
 444   1      
 445   1          for (i = 0; i < len; i++)
 446   1          {
 447   2              U8_T c = pData[i];
 448   2              switch (pTnConn->TnServer.TelState)
 449   2              {
 450   3                  case TS_CR:
 451   3                      pTnConn->TnServer.TelState = TS_DATA;
 452   3                      if ((c == 0) || (c == '\n'))
 453   3                          break;
 454   3      
 455   3                  case TS_DATA:
 456   3                      if (c == IAC)
 457   3                          pTnConn->TnServer.TelState = TS_IAC;
 458   3                      else
 459   3                      {
 460   4                          if (c == '\r')
 461   4                              pTnConn->TnServer.TelState = TS_CR;
 462   4                          telnet_PutRxChar(c);
 463   4                      }
 464   3                      break;
 465   3      
 466   3                  case TS_IAC:
 467   3                      if (c == IAC) /* IAC IAC -> 0xFF */
 468   3                      {
 469   4                          telnet_PutRxChar(c);
 470   4                          pTnConn->TnServer.TelState = TS_DATA;
 471   4                          break;
 472   4                      }
 473   3                      /* else */
 474   3                      switch (c)
 475   3                      {
 476   4                          case SB:
 477   4                              pTnConn->TnServer.TelState = TS_SUB1;
 478   4                              break;
 479   4      
 480   4                          case DO:
 481   4                          case DONT:
 482   4                          case WILL:
 483   4                          case WONT:
 484   4                              pTnConn->TnServer.TelWish =  c;
 485   4                              pTnConn->TnServer.TelState = TS_OPT;
C51 COMPILER V9.01   TELNET                                                                03/08/2012 11:01:00 PAGE 9   

 486   4                              break;
 487   4                          default:
 488   4                              pTnConn->TnServer.TelState = TS_DATA;     /* DATA MARK must be added later */
 489   4                              break;
 490   4                      }
 491   3                      break;
 492   3                  case TS_OPT: /* WILL, WONT, DO, DONT */
 493   3                      telnet_Telopt(pTnConn, c);
 494   3                      pTnConn->TnServer.TelState = TS_DATA;
 495   3                      break;
 496   3                  case TS_SUB1: /* Subnegotiation */
 497   3                  case TS_SUB2: /* Subnegotiation */
 498   3                      if (telnet_Subneg(pTnConn, c))
 499   3                          pTnConn->TnServer.TelState = TS_DATA;
 500   3                      break;
 501   3              }
 502   2          }
 503   1      
 504   1          if (pTnConn->TnServer.IACLen)
 505   1              telnet_IACFlush(pTnConn);
 506   1      
 507   1      } /* End of telnet_RcvdData() */
 508          
 509          /*
 510           * ----------------------------------------------------------------------------
 511           * Function Name: TELNET_NotifyClose()
 512           * Purpose:
 513           * Params:
 514           * Returns:
 515           * Note:
 516           * ----------------------------------------------------------------------------
 517           */
 518          void TELNET_NotifyClose(void)
 519          {
 520   1          TELNET_Connect.State = TELNET_STATE_CLOSING;
 521   1          
 522   1      } /* End of TELNET_NotifyClose() */
 523          
 524          /*
 525           * ----------------------------------------------------------------------------
 526           * Function Name: TELNET_Event()
 527           * Purpose:
 528           * Params:
 529           * Returns:
 530           * Note:
 531           * ----------------------------------------------------------------------------
 532           */
 533          void TELNET_Event(U8_T id, U8_T event)
 534          {
 535   1          TELNET_SERVER_CONN *pTnConn = &TELNET_Connect;
 536   1      
 537   1          if (event == TCPIP_CONNECT_CANCEL)
 538   1          {
 539   2              CONSOLE_Inst *pInst;
 540   2      
 541   2              pTnConn->State = TELNET_STATE_FREE;
 542   2              /* notify the console that telnet close connectiion */
 543   2              pInst = CONSOLE_GetInstance(LL_TELNET);
 544   2              pInst->State = CLI_STATE_BLOCK;
 545   2          }
 546   1          else if (event == TCPIP_CONNECT_ACTIVE)
 547   1          {
C51 COMPILER V9.01   TELNET                                                                03/08/2012 11:01:00 PAGE 10  

 548   2              telnet_InitConsole = 1;
 549   2              telnet_RxHeadPtr = 0;
 550   2              telnet_RxTailPtr = 0;
 551   2              telnet_TxHeadPtr = 0;
 552   2              telnet_TxTailPtr = 0;;
 553   2              
 554   2              pTnConn->State = TELNET_STATE_CONNECTING;
 555   2              pTnConn->TnServer.TelState = TS_DATA;
 556   2              pTnConn->TnServer.TelFlags = 0;
 557   2              pTnConn->TnServer.IACLen = 0;
 558   2              telnet_SendInitOptions(pTnConn);
 559   2          }
 560   1              else if (event == TCPIP_CONNECT_XMIT_COMPLETE)
 561   1              {
 562   2              telnet_TxReady = 1;
 563   2              if (pTnConn->TnServer.IACLen)
 564   2                  telnet_IACFlush(pTnConn);
 565   2              else if (pTnConn->State == TELNET_STATE_CONNECTED)
 566   2                  telnet_SendData(pTnConn);
 567   2          }
 568   1      
 569   1      } /* End of TELNET_Event() */
*** WARNING C280 IN LINE 533 OF ..\SRC\MTELNET\TELNET.C: 'id': unreferenced local variable
 570          
 571          /*
 572           * ----------------------------------------------------------------------------
 573           * Function Name: TELNET_NewConn
 574           * Purpose: 
 575           * Params:
 576           * Returns:
 577           * Note:
 578           * ----------------------------------------------------------------------------
 579           */
 580          U8_T TELNET_NewConn(U32_T XDATA *pip, U16_T remotePort, U8_T socket)
 581          {
 582   1          U8_T i, found;
 583   1          U16_T temp16;
 584   1          U32_T addr;
 585   1      
 586   1          if (TELNET_Connect.State == TELNET_STATE_FREE)
 587   1              {
 588   2              found = 0;
 589   2              temp16 = GCONFIG_GetNetwork();
 590   2              if (temp16 & GCONFIG_NETWORK_ACC_IP_ENABLE)
 591   2              {
 592   3                  for (i=0; i < GCONFIG_ACCESSIBLE_IP_NUM; i++)
 593   3                  {
 594   4                      GCONFIG_GetAccessibleIP(i, &addr);
 595   4                      if (addr == *pip)
 596   4                      {
 597   5                          found = 1;
 598   5                          break;
 599   5                      }
 600   4                  }
 601   3      
 602   3                  if (!found)
 603   3                      return TCPIP_NO_NEW_CONN;
 604   3              }
 605   2      
 606   2              TELNET_Connect.State = TELNET_STATE_ACTIVE;
 607   2              TELNET_Connect.Ip = *pip;
 608   2              TELNET_Connect.Port = remotePort;
C51 COMPILER V9.01   TELNET                                                                03/08/2012 11:01:00 PAGE 11  

 609   2              TELNET_Connect.TcpSocket = socket;
 610   2      
 611   2              return 0;
 612   2          }
 613   1      
 614   1          return TCPIP_NO_NEW_CONN;
 615   1      } /* End of TELNET_NewConn() */
 616          
 617          /*
 618           * ----------------------------------------------------------------------------
 619           * Function Name: telnet_InitInstance
 620           * Purpose: 
 621           * Params:
 622           * Returns:
 623           * Note:
 624           * ----------------------------------------------------------------------------
 625           */
 626          static void telnet_InitInstance(void)
 627          {
 628   1          CONSOLE_Inst *pInst;
 629   1      
 630   1          pInst = CONSOLE_GetInstance(LL_TELNET);
 631   1          pInst->State = CLI_STATE_LOGIN;
 632   1          pInst->PromptEnable = 1;
 633   1          pInst->Privilege = 5;
 634   1          pInst->BufIndex = 0;
 635   1          memset(pInst->UserName, 0, CLI_MAX_USERNAME_LEN);
 636   1          memset(pInst->Passwd, 0, CLI_MAX_PASSWD_LEN);
 637   1          memset(pInst->CmdBuf, 0, CLI_MAX_COMMAND_LEN);
 638   1      
 639   1      } /* End of telnet_InitInstance() */
 640          
 641          /*
 642           * ----------------------------------------------------------------------------
 643           * Function Name: TELNET_Receive()
 644           * Purpose:
 645           * Params:
 646           * Returns:
 647           * Note:
 648           * ----------------------------------------------------------------------------
 649           */
 650          void TELNET_Receive(U8_T XDATA *pData, U16_T length, U8_T conn_id)
 651          {
 652   1          TELNET_SERVER_CONN *pTnConn = &TELNET_Connect;
 653   1      
 654   1          if (pTnConn->State == TELNET_STATE_CONNECTING ||
 655   1              pTnConn->State == TELNET_STATE_CONNECTED)
 656   1          {
 657   2              telnet_RcvdData(pTnConn, pData, length); 
 658   2          }
 659   1      
 660   1      } /* End of TELNET_Receive() */
*** WARNING C280 IN LINE 650 OF ..\SRC\MTELNET\TELNET.C: 'conn_id': unreferenced local variable
 661          
 662          /*
 663           * ----------------------------------------------------------------------------
 664           * Function Name: TELNET_Init()
 665           * Purpose:
 666           * Params:
 667           * Returns:
 668           * Note:
 669           * ----------------------------------------------------------------------------
C51 COMPILER V9.01   TELNET                                                                03/08/2012 11:01:00 PAGE 12  

 670           */
 671          void TELNET_Init(void)
 672          {
 673   1          TELNET_Connect.State = TELNET_STATE_FREE;
 674   1          telnet_RxHeadPtr = 0;
 675   1          telnet_RxTailPtr = 0;
 676   1          telnet_TxHeadPtr = 0;
 677   1          telnet_TxTailPtr = 0;;
 678   1      
 679   1              telnet_InterfaceId = TCPIP_Bind(TELNET_NewConn, TELNET_Event, TELNET_Receive);
 680   1              TCPIP_TcpListen(TELNET_SERVER_PORT ,telnet_InterfaceId);
 681   1      
 682   1      } /* End of TELNET_Init() */
 683          
 684          /*
 685           * ----------------------------------------------------------------------------
 686           * Function Name: TELNET_Task
 687           * Purpose: Main function
 688           * Params:
 689           * Returns:
 690           * Note:
 691           * ----------------------------------------------------------------------------
 692           */
 693          void TELNET_Task(void)
 694          {
 695   1          TELNET_SERVER_CONN *pTnConn = &TELNET_Connect;
 696   1      
 697   1          switch (pTnConn->State)
 698   1          {
 699   2              case TELNET_STATE_CONNECTING:
 700   2                  if (pTnConn->TnServer.TelFlags == 0)
 701   2                      pTnConn->State = TELNET_STATE_CONNECTED;
 702   2                  break;
 703   2      
 704   2              case TELNET_STATE_CONNECTED:
 705   2                  if (telnet_InitConsole)
 706   2                  {
 707   3                      /* Initailize the console state to login */
 708   3                      telnet_InitInstance();
 709   3                      telnet_InitConsole = 0;
 710   3                  }
 711   2      
 712   2                  if (telnet_TxReady)
 713   2                      telnet_SendData(pTnConn);
 714   2      
 715   2                  break;
 716   2      
 717   2              case TELNET_STATE_CLOSING:
 718   2                  if (telnet_TxReady)
 719   2                  {
 720   3                      /* no more data to be transmitted */
 721   3                      if (telnet_TxTailPtr == telnet_TxHeadPtr)
 722   3                      {
 723   4                          TCPIP_TcpClose(TELNET_Connect.TcpSocket);
 724   4                          pTnConn->State = TELNET_STATE_FREE;
 725   4                      }
 726   3                      else
 727   3                          telnet_SendData(pTnConn);
 728   3                  }
 729   2      
 730   2                  break;
 731   2      
C51 COMPILER V9.01   TELNET                                                                03/08/2012 11:01:00 PAGE 13  

 732   2              default:
 733   2                  break;
 734   2          }
 735   1      
 736   1      } /* End of TELNET_Task() */
 737          #endif /* #if (INCLUDE_TELNET_SERVER) */
 738          
 739          /* End of telnet.c */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3075    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    153      90
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   4480    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
