VALID_TOOLCHAINS := pnacl

NACL_SDK_ROOT ?= $(abspath $(CURDIR)/../../..)

TARGET = IOTC_RDT

EXTRA_INC_PATHS += ../../../Include
EXTRA_LIB_PATHS += ../../../Lib/NACL

include $(NACL_SDK_ROOT)/tools/common.mk

CHROME_ARGS += --allow-nacl-socket-api=localhost


DEPS = nacl_io

ifeq ($(CONFIG), Debug)
LIBS = RDTAPIsT IOTCAPIsT nacl_io ppapi_cpp ppapi pthread
else
LIBS = RDTAPIs IOTCAPIs nacl_io ppapi_cpp ppapi pthread
endif

CFLAGS = -Wall

SOURCES = IOTC_RDTClient.c 

# Build rules generated by macros from common.mk:

$(foreach dep,$(DEPS),$(eval $(call DEPEND_RULE,$(dep))))
$(foreach src,$(SOURCES),$(eval $(call COMPILE_RULE,$(src),$(CFLAGS))))

# The PNaCl workflow uses both an unstripped and finalized/stripped binary.
# On NaCl, only produce a stripped binary for Release configs (not Debug).
ifneq (,$(or $(findstring pnacl,$(TOOLCHAIN)),$(findstring Release,$(CONFIG))))
$(eval $(call LINK_RULE,$(TARGET)_unstripped,$(SOURCES),$(LIBS),$(DEPS)))
$(eval $(call STRIP_RULE,$(TARGET),$(TARGET)_unstripped))
else
$(eval $(call LINK_RULE,$(TARGET),$(SOURCES),$(LIBS),$(DEPS)))
endif

$(eval $(call NMF_RULE,$(TARGET),))
